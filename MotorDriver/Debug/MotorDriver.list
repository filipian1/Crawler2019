
MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003118  08003118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003190  08003190  00013190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08003194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          000009e4  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  200009f8  200009f8  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000249fd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000031f6  00000000  00000000  00044a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007948  00000000  00000000  00047c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b78  00000000  00000000  0004f580  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ae8  00000000  00000000  000500f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006ea9  00000000  00000000  00050be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003d5c  00000000  00000000  00057a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005b7e5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001d00  00000000  00000000  0005b864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003100 	.word	0x08003100

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003100 	.word	0x08003100

080001c8 <SendADCData>:
	buff [2] = ADC_MeasRaw[1] & 0xFF;
	buff [3] = (ADC_MeasRaw[1] >> 8) & 0xFF;
	buff [4] = ADC_MeasRaw[2] & 0xFF;
	buff [5] = (ADC_MeasRaw[2] >> 8) & 0xFF;
	CAN_Header.StdId=100;//trzeba zmienic adresy ramek
	CAN_Header.DLC=6;
 80001c8:	4b02      	ldr	r3, [pc, #8]	; (80001d4 <SendADCData+0xc>)
 80001ca:	2206      	movs	r2, #6
 80001cc:	611a      	str	r2, [r3, #16]
	buff [1] = (ADC_MeasRaw[3] >> 8) & 0xFF;
	buff [2] = ADC_MeasRaw[4] & 0xFF;
	buff [3] = (ADC_MeasRaw[4] >> 8) & 0xFF;
	buff [4] = ADC_MeasRaw[5] & 0xFF;
	buff [5] = (ADC_MeasRaw[5] >> 8) & 0xFF;
	CAN_Header.StdId=101;//trzeba znalezc adresy ramek
 80001ce:	2265      	movs	r2, #101	; 0x65
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	4770      	bx	lr
 80001d4:	20000814 	.word	0x20000814

080001d8 <ADC_Function>:
{
 80001d8:	b508      	push	{r3, lr}
	if (meas_timer==0)
 80001da:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <ADC_Function+0x2c>)
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	b14b      	cbz	r3, 80001f4 <ADC_Function+0x1c>
	meas_timer++;
 80001e0:	4a08      	ldr	r2, [pc, #32]	; (8000204 <ADC_Function+0x2c>)
 80001e2:	8813      	ldrh	r3, [r2, #0]
 80001e4:	3301      	adds	r3, #1
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	8013      	strh	r3, [r2, #0]
	if (meas_timer==ADC_SampleRate) meas_timer=0;
 80001ea:	4a07      	ldr	r2, [pc, #28]	; (8000208 <ADC_Function+0x30>)
 80001ec:	8812      	ldrh	r2, [r2, #0]
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d003      	beq.n	80001fa <ADC_Function+0x22>
 80001f2:	bd08      	pop	{r3, pc}
		SendADCData();
 80001f4:	f7ff ffe8 	bl	80001c8 <SendADCData>
 80001f8:	e7f2      	b.n	80001e0 <ADC_Function+0x8>
	if (meas_timer==ADC_SampleRate) meas_timer=0;
 80001fa:	2200      	movs	r2, #0
 80001fc:	4b01      	ldr	r3, [pc, #4]	; (8000204 <ADC_Function+0x2c>)
 80001fe:	801a      	strh	r2, [r3, #0]
}
 8000200:	e7f7      	b.n	80001f2 <ADC_Function+0x1a>
 8000202:	bf00      	nop
 8000204:	20000030 	.word	0x20000030
 8000208:	20000000 	.word	0x20000000

0800020c <CAN_Init>:
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1  , &CAN_RxHeader, CAN_Data);
	CAN_Odbior();
}

void CAN_Init(void)
{
 800020c:	b510      	push	{r4, lr}
 800020e:	b08a      	sub	sp, #40	; 0x28

	  CAN_FilterTypeDef  sFilterConfig;

  hcan.Instance = CAN;
 8000210:	4829      	ldr	r0, [pc, #164]	; (80002b8 <CAN_Init+0xac>)
 8000212:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <CAN_Init+0xb0>)
 8000214:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 4;
 8000216:	2304      	movs	r3, #4
 8000218:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800021a:	2300      	movs	r3, #0
 800021c:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800021e:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000220:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000224:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000226:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800022a:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800022c:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800022e:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000230:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000232:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000234:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000236:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000238:	f000 ff5a 	bl	80010f0 <HAL_CAN_Init>
 800023c:	bb40      	cbnz	r0, 8000290 <CAN_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
  }
  sFilterConfig.FilterBank = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	9305      	str	r3, [sp, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000242:	9306      	str	r3, [sp, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000244:	9307      	str	r3, [sp, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000246:	9300      	str	r3, [sp, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000248:	9301      	str	r3, [sp, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800024a:	9302      	str	r3, [sp, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800024c:	9303      	str	r3, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800024e:	9304      	str	r3, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000250:	2201      	movs	r2, #1
 8000252:	9208      	str	r2, [sp, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8000254:	9309      	str	r3, [sp, #36]	; 0x24

    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000256:	4669      	mov	r1, sp
 8000258:	4817      	ldr	r0, [pc, #92]	; (80002b8 <CAN_Init+0xac>)
 800025a:	f000 ffef 	bl	800123c <HAL_CAN_ConfigFilter>
 800025e:	b9e0      	cbnz	r0, 800029a <CAN_Init+0x8e>
      /* Filter configuration Error */
      Error_Handler();
    }


  HAL_CAN_Start(&hcan);
 8000260:	4c15      	ldr	r4, [pc, #84]	; (80002b8 <CAN_Init+0xac>)
 8000262:	4620      	mov	r0, r4
 8000264:	f001 f868 	bl	8001338 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000268:	2102      	movs	r1, #2
 800026a:	4620      	mov	r0, r4
 800026c:	f001 f92c 	bl	80014c8 <HAL_CAN_ActivateNotification>
 8000270:	b9c0      	cbnz	r0, 80002a4 <CAN_Init+0x98>
   {

     Error_Handler();
   }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000272:	2110      	movs	r1, #16
 8000274:	4810      	ldr	r0, [pc, #64]	; (80002b8 <CAN_Init+0xac>)
 8000276:	f001 f927 	bl	80014c8 <HAL_CAN_ActivateNotification>
 800027a:	b9c0      	cbnz	r0, 80002ae <CAN_Init+0xa2>
     Error_Handler();
   }



  CAN_Header.StdId=0;
 800027c:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <CAN_Init+0xb4>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
  CAN_Header.ExtId=0;
 8000282:	605a      	str	r2, [r3, #4]
  CAN_Header.IDE=CAN_ID_STD;
 8000284:	609a      	str	r2, [r3, #8]
  CAN_Header.RTR=CAN_RTR_DATA;
 8000286:	60da      	str	r2, [r3, #12]
  CAN_Header.DLC=4;
 8000288:	2204      	movs	r2, #4
 800028a:	611a      	str	r2, [r3, #16]
*/




}
 800028c:	b00a      	add	sp, #40	; 0x28
 800028e:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8000290:	2130      	movs	r1, #48	; 0x30
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <CAN_Init+0xb8>)
 8000294:	f000 fdb0 	bl	8000df8 <_Error_Handler>
 8000298:	e7d1      	b.n	800023e <CAN_Init+0x32>
      Error_Handler();
 800029a:	2140      	movs	r1, #64	; 0x40
 800029c:	4809      	ldr	r0, [pc, #36]	; (80002c4 <CAN_Init+0xb8>)
 800029e:	f000 fdab 	bl	8000df8 <_Error_Handler>
 80002a2:	e7dd      	b.n	8000260 <CAN_Init+0x54>
     Error_Handler();
 80002a4:	2148      	movs	r1, #72	; 0x48
 80002a6:	4807      	ldr	r0, [pc, #28]	; (80002c4 <CAN_Init+0xb8>)
 80002a8:	f000 fda6 	bl	8000df8 <_Error_Handler>
 80002ac:	e7e1      	b.n	8000272 <CAN_Init+0x66>
     Error_Handler();
 80002ae:	214d      	movs	r1, #77	; 0x4d
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <CAN_Init+0xb8>)
 80002b2:	f000 fda1 	bl	8000df8 <_Error_Handler>
 80002b6:	e7e1      	b.n	800027c <CAN_Init+0x70>
 80002b8:	20000040 	.word	0x20000040
 80002bc:	40006400 	.word	0x40006400
 80002c0:	20000814 	.word	0x20000814
 80002c4:	08003118 	.word	0x08003118

080002c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN)
 80002c8:	6802      	ldr	r2, [r0, #0]
 80002ca:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <HAL_CAN_MspInit+0x7c>)
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d000      	beq.n	80002d2 <HAL_CAN_MspInit+0xa>
 80002d0:	4770      	bx	lr
{
 80002d2:	b510      	push	{r4, lr}
 80002d4:	b088      	sub	sp, #32
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002d6:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80002da:	69da      	ldr	r2, [r3, #28]
 80002dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80002e0:	61da      	str	r2, [r3, #28]
 80002e2:	69da      	ldr	r2, [r3, #28]
 80002e4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80002e8:	9201      	str	r2, [sp, #4]
 80002ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	695a      	ldr	r2, [r3, #20]
 80002ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80002f2:	615a      	str	r2, [r3, #20]
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002fa:	9302      	str	r3, [sp, #8]
 80002fc:	9b02      	ldr	r3, [sp, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000302:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000304:	2302      	movs	r3, #2
 8000306:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	2400      	movs	r4, #0
 800030a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800030c:	2303      	movs	r3, #3
 800030e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000310:	2309      	movs	r3, #9
 8000312:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000314:	a903      	add	r1, sp, #12
 8000316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031a:	f001 fa99 	bl	8001850 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800031e:	4622      	mov	r2, r4
 8000320:	4621      	mov	r1, r4
 8000322:	2014      	movs	r0, #20
 8000324:	f001 fa2c 	bl	8001780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( USB_LP_CAN_RX0_IRQn);
 8000328:	2014      	movs	r0, #20
 800032a:	f001 fa5b 	bl	80017e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800032e:	4622      	mov	r2, r4
 8000330:	4621      	mov	r1, r4
 8000332:	2015      	movs	r0, #21
 8000334:	f001 fa24 	bl	8001780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000338:	2015      	movs	r0, #21
 800033a:	f001 fa53 	bl	80017e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800033e:	b008      	add	sp, #32
 8000340:	bd10      	pop	{r4, pc}
 8000342:	bf00      	nop
 8000344:	40006400 	.word	0x40006400

08000348 <CAN_Odbior>:
  }

}

void CAN_Odbior()
{
 8000348:	b508      	push	{r3, lr}
	int8_t motorDuty = 0;
	switch (CAN_RxHeader.StdId)
 800034a:	4b12      	ldr	r3, [pc, #72]	; (8000394 <CAN_Odbior+0x4c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2b15      	cmp	r3, #21
 8000350:	d00e      	beq.n	8000370 <CAN_Odbior+0x28>
 8000352:	2b65      	cmp	r3, #101	; 0x65
 8000354:	d002      	beq.n	800035c <CAN_Odbior+0x14>
 8000356:	2b14      	cmp	r3, #20
 8000358:	d014      	beq.n	8000384 <CAN_Odbior+0x3c>
 800035a:	bd08      	pop	{r3, pc}
	{
	case 101:
		if (CAN_Data[0]==1) StartMotors();
 800035c:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <CAN_Odbior+0x50>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d002      	beq.n	800036a <CAN_Odbior+0x22>
		else StopMotors();
 8000364:	f000 f9e0 	bl	8000728 <StopMotors>
 8000368:	bd08      	pop	{r3, pc}
		if (CAN_Data[0]==1) StartMotors();
 800036a:	f000 f9bd 	bl	80006e8 <StartMotors>
 800036e:	bd08      	pop	{r3, pc}
		#ifdef LEWA_STRONA
			REG_SetReference(CAN_Data[0]);
		#endif
		break;*/
	case 21:
		if (CAN_Data[0]==1) StartMotors();
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <CAN_Odbior+0x50>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d002      	beq.n	800037e <CAN_Odbior+0x36>
		else StopMotors();
 8000378:	f000 f9d6 	bl	8000728 <StopMotors>
 800037c:	bd08      	pop	{r3, pc}
		if (CAN_Data[0]==1) StartMotors();
 800037e:	f000 f9b3 	bl	80006e8 <StartMotors>
 8000382:	bd08      	pop	{r3, pc}
		break;
	case 20:
#ifdef LEFT_MOTORS
		motorDuty = -(int8_t)CAN_Data[0];
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <CAN_Odbior+0x50>)
 8000386:	7818      	ldrb	r0, [r3, #0]
 8000388:	4240      	negs	r0, r0
		REG_SetReference(motorDuty);
 800038a:	b240      	sxtb	r0, r0
 800038c:	f000 fa08 	bl	80007a0 <REG_SetReference>
		REG_SetReference(motorDuty);
#endif //RIGHT_MOTORS

		break;
	}
}
 8000390:	e7e3      	b.n	800035a <CAN_Odbior+0x12>
 8000392:	bf00      	nop
 8000394:	20000844 	.word	0x20000844
 8000398:	20000860 	.word	0x20000860

0800039c <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 800039c:	b508      	push	{r3, lr}
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0  , &CAN_RxHeader, CAN_Data);
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14>)
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	f000 fff6 	bl	8001394 <HAL_CAN_GetRxMessage>
	CAN_Odbior();
 80003a8:	f7ff ffce 	bl	8000348 <CAN_Odbior>
 80003ac:	bd08      	pop	{r3, pc}
 80003ae:	bf00      	nop
 80003b0:	20000860 	.word	0x20000860
 80003b4:	20000844 	.word	0x20000844

080003b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 80003b8:	b508      	push	{r3, lr}
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1  , &CAN_RxHeader, CAN_Data);
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <HAL_CAN_RxFifo1MsgPendingCallback+0x14>)
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x18>)
 80003be:	2101      	movs	r1, #1
 80003c0:	f000 ffe8 	bl	8001394 <HAL_CAN_GetRxMessage>
	CAN_Odbior();
 80003c4:	f7ff ffc0 	bl	8000348 <CAN_Odbior>
 80003c8:	bd08      	pop	{r3, pc}
 80003ca:	bf00      	nop
 80003cc:	20000860 	.word	0x20000860
 80003d0:	20000844 	.word	0x20000844

080003d4 <HAL_TIM_IC_CaptureCallback>:
		 period_motor_3 = 0;
		 abs_period_motor_3 = 0;
	  }
}*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80003d4:	b538      	push	{r3, r4, r5, lr}
 80003d6:	4604      	mov	r4, r0


	 if (htim->Instance==TIM2)
 80003d8:	6803      	ldr	r3, [r0, #0]
 80003da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003de:	d008      	beq.n	80003f2 <HAL_TIM_IC_CaptureCallback+0x1e>

			 //period_motor_1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);

		  }

		 if (htim->Instance==TIM16)
 80003e0:	6822      	ldr	r2, [r4, #0]
 80003e2:	4b39      	ldr	r3, [pc, #228]	; (80004c8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d029      	beq.n	800043c <HAL_TIM_IC_CaptureCallback+0x68>
					 EnkPeriod[1] = (-1)*AbsEnkPeriod[1];
				 }

			  }

		 if (htim->Instance==TIM17)
 80003e8:	6822      	ldr	r2, [r4, #0]
 80003ea:	4b38      	ldr	r3, [pc, #224]	; (80004cc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d048      	beq.n	8000482 <HAL_TIM_IC_CaptureCallback+0xae>
 80003f0:	bd38      	pop	{r3, r4, r5, pc}
		 	 AbsEnkPeriod[0]=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 80003f2:	4d37      	ldr	r5, [pc, #220]	; (80004d0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80003f4:	2104      	movs	r1, #4
 80003f6:	4628      	mov	r0, r5
 80003f8:	f002 f8b3 	bl	8002562 <HAL_TIM_ReadCapturedValue>
 80003fc:	4b35      	ldr	r3, [pc, #212]	; (80004d4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80003fe:	6018      	str	r0, [r3, #0]
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000400:	682b      	ldr	r3, [r5, #0]
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
			 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET)
 8000406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f001 fae9 	bl	80019e4 <HAL_GPIO_ReadPin>
 8000412:	2801      	cmp	r0, #1
 8000414:	d00d      	beq.n	8000432 <HAL_TIM_IC_CaptureCallback+0x5e>
			 else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET)
 8000416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800041a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041e:	f001 fae1 	bl	80019e4 <HAL_GPIO_ReadPin>
 8000422:	2800      	cmp	r0, #0
 8000424:	d1dc      	bne.n	80003e0 <HAL_TIM_IC_CaptureCallback+0xc>
				 EnkPeriod[0]= (-1)*AbsEnkPeriod[0];
 8000426:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	425b      	negs	r3, r3
 800042c:	4a2a      	ldr	r2, [pc, #168]	; (80004d8 <HAL_TIM_IC_CaptureCallback+0x104>)
 800042e:	6013      	str	r3, [r2, #0]
 8000430:	e7d6      	b.n	80003e0 <HAL_TIM_IC_CaptureCallback+0xc>
				EnkPeriod[0]= AbsEnkPeriod[0];
 8000432:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	e7d1      	b.n	80003e0 <HAL_TIM_IC_CaptureCallback+0xc>
			 AbsEnkPeriod[1]=HAL_TIM_ReadCapturedValue(&htim16, TIM_CHANNEL_1);
 800043c:	4d27      	ldr	r5, [pc, #156]	; (80004dc <HAL_TIM_IC_CaptureCallback+0x108>)
 800043e:	2100      	movs	r1, #0
 8000440:	4628      	mov	r0, r5
 8000442:	f002 f88e 	bl	8002562 <HAL_TIM_ReadCapturedValue>
 8000446:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000448:	6058      	str	r0, [r3, #4]
			 __HAL_TIM_SET_COUNTER(&htim16, 0);
 800044a:	682b      	ldr	r3, [r5, #0]
 800044c:	2200      	movs	r2, #0
 800044e:	625a      	str	r2, [r3, #36]	; 0x24
				 if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET)
 8000450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000454:	4822      	ldr	r0, [pc, #136]	; (80004e0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000456:	f001 fac5 	bl	80019e4 <HAL_GPIO_ReadPin>
 800045a:	2801      	cmp	r0, #1
 800045c:	d00c      	beq.n	8000478 <HAL_TIM_IC_CaptureCallback+0xa4>
				 else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_RESET)
 800045e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000462:	481f      	ldr	r0, [pc, #124]	; (80004e0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000464:	f001 fabe 	bl	80019e4 <HAL_GPIO_ReadPin>
 8000468:	2800      	cmp	r0, #0
 800046a:	d1bd      	bne.n	80003e8 <HAL_TIM_IC_CaptureCallback+0x14>
					 EnkPeriod[1] = (-1)*AbsEnkPeriod[1];
 800046c:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	425b      	negs	r3, r3
 8000472:	4a19      	ldr	r2, [pc, #100]	; (80004d8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000474:	6053      	str	r3, [r2, #4]
 8000476:	e7b7      	b.n	80003e8 <HAL_TIM_IC_CaptureCallback+0x14>
					 EnkPeriod[1]= AbsEnkPeriod[1];
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800047a:	685a      	ldr	r2, [r3, #4]
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <HAL_TIM_IC_CaptureCallback+0x104>)
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	e7b2      	b.n	80003e8 <HAL_TIM_IC_CaptureCallback+0x14>
			  {
			 AbsEnkPeriod[1]=HAL_TIM_ReadCapturedValue(&htim17, TIM_CHANNEL_1);
 8000482:	4c18      	ldr	r4, [pc, #96]	; (80004e4 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000484:	2100      	movs	r1, #0
 8000486:	4620      	mov	r0, r4
 8000488:	f002 f86b 	bl	8002562 <HAL_TIM_ReadCapturedValue>
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800048e:	6058      	str	r0, [r3, #4]
			 __HAL_TIM_SET_COUNTER(&htim17, 0);
 8000490:	6823      	ldr	r3, [r4, #0]
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
				 if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == GPIO_PIN_SET)
 8000496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800049a:	4811      	ldr	r0, [pc, #68]	; (80004e0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800049c:	f001 faa2 	bl	80019e4 <HAL_GPIO_ReadPin>
 80004a0:	2801      	cmp	r0, #1
 80004a2:	d00c      	beq.n	80004be <HAL_TIM_IC_CaptureCallback+0xea>
				 {
					 EnkPeriod[2]= AbsEnkPeriod[2];
				 }
				 else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == GPIO_PIN_RESET)
 80004a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80004aa:	f001 fa9b 	bl	80019e4 <HAL_GPIO_ReadPin>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d19e      	bne.n	80003f0 <HAL_TIM_IC_CaptureCallback+0x1c>
				 {
					 EnkPeriod[2]= (-1)*AbsEnkPeriod[2];
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	425b      	negs	r3, r3
 80004b8:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <HAL_TIM_IC_CaptureCallback+0x104>)
 80004ba:	6093      	str	r3, [r2, #8]
				 }
			  }
}
 80004bc:	e798      	b.n	80003f0 <HAL_TIM_IC_CaptureCallback+0x1c>
					 EnkPeriod[2]= AbsEnkPeriod[2];
 80004be:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80004c0:	689a      	ldr	r2, [r3, #8]
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <HAL_TIM_IC_CaptureCallback+0x104>)
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	bd38      	pop	{r3, r4, r5, pc}
 80004c8:	40014400 	.word	0x40014400
 80004cc:	40014800 	.word	0x40014800
 80004d0:	20000964 	.word	0x20000964
 80004d4:	20000890 	.word	0x20000890
 80004d8:	20000884 	.word	0x20000884
 80004dc:	200009a4 	.word	0x200009a4
 80004e0:	48000800 	.word	0x48000800
 80004e4:	200008e4 	.word	0x200008e4

080004e8 <ENK_TIM_Init>:
	f_obr_motor_2 = freq*50/(abs_period2*pres*64);
	f_obr_motor_3 = freq*50/(abs_period3*pres*64);
}

void ENK_TIM_Init()
{
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	b08b      	sub	sp, #44	; 0x2c
	 __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ec:	4b33      	ldr	r3, [pc, #204]	; (80005bc <ENK_TIM_Init+0xd4>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80004f4:	615a      	str	r2, [r3, #20]
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80004fc:	9201      	str	r2, [sp, #4]
 80004fe:	9a01      	ldr	r2, [sp, #4]
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800050e:	9202      	str	r2, [sp, #8]
 8000510:	9a02      	ldr	r2, [sp, #8]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	695a      	ldr	r2, [r3, #20]
 800051c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000520:	9203      	str	r2, [sp, #12]
 8000522:	9a03      	ldr	r2, [sp, #12]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000532:	9304      	str	r3, [sp, #16]
 8000534:	9b04      	ldr	r3, [sp, #16]

	  GPIO_InitTypeDef GPIO_InitStruct;

	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 8000536:	4e22      	ldr	r6, [pc, #136]	; (80005c0 <ENK_TIM_Init+0xd8>)
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800053e:	4630      	mov	r0, r6
 8000540:	f001 fa57 	bl	80019f2 <HAL_GPIO_WritePin>

	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000544:	4d1f      	ldr	r5, [pc, #124]	; (80005c4 <ENK_TIM_Init+0xdc>)
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054c:	4628      	mov	r0, r5
 800054e:	f001 fa50 	bl	80019f2 <HAL_GPIO_WritePin>

	   GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000552:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000556:	9305      	str	r3, [sp, #20]
	   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000558:	2400      	movs	r4, #0
 800055a:	9406      	str	r4, [sp, #24]
	   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	9407      	str	r4, [sp, #28]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	9408      	str	r4, [sp, #32]
	   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000560:	a905      	add	r1, sp, #20
 8000562:	4630      	mov	r0, r6
 8000564:	f001 f974 	bl	8001850 <HAL_GPIO_Init>

	   GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800056c:	9305      	str	r3, [sp, #20]
	   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056e:	9406      	str	r4, [sp, #24]
	   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	9407      	str	r4, [sp, #28]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	9408      	str	r4, [sp, #32]
	   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000574:	a905      	add	r1, sp, #20
 8000576:	4628      	mov	r0, r5
 8000578:	f001 f96a 	bl	8001850 <HAL_GPIO_Init>

  	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800057c:	4f12      	ldr	r7, [pc, #72]	; (80005c8 <ENK_TIM_Init+0xe0>)
 800057e:	2104      	movs	r1, #4
 8000580:	4638      	mov	r0, r7
 8000582:	f002 fbcf 	bl	8002d24 <HAL_TIM_IC_Start_IT>
   	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 8000586:	4e11      	ldr	r6, [pc, #68]	; (80005cc <ENK_TIM_Init+0xe4>)
 8000588:	4621      	mov	r1, r4
 800058a:	4630      	mov	r0, r6
 800058c:	f002 fbca 	bl	8002d24 <HAL_TIM_IC_Start_IT>
   	HAL_TIM_IC_Start_IT(&htim17, TIM_CHANNEL_1);
 8000590:	4d0f      	ldr	r5, [pc, #60]	; (80005d0 <ENK_TIM_Init+0xe8>)
 8000592:	4621      	mov	r1, r4
 8000594:	4628      	mov	r0, r5
 8000596:	f002 fbc5 	bl	8002d24 <HAL_TIM_IC_Start_IT>
   	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	68d3      	ldr	r3, [r2, #12]
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	60d3      	str	r3, [r2, #12]
   	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 80005a4:	6832      	ldr	r2, [r6, #0]
 80005a6:	68d3      	ldr	r3, [r2, #12]
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	60d3      	str	r3, [r2, #12]
   	__HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 80005ae:	682a      	ldr	r2, [r5, #0]
 80005b0:	68d3      	ldr	r3, [r2, #12]
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	60d3      	str	r3, [r2, #12]
}
 80005b8:	b00b      	add	sp, #44	; 0x2c
 80005ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000800 	.word	0x48000800
 80005c4:	48000400 	.word	0x48000400
 80005c8:	20000964 	.word	0x20000964
 80005cc:	200009a4 	.word	0x200009a4
 80005d0:	200008e4 	.word	0x200008e4

080005d4 <PWM_Init>:
#include <PWMlibF3.h>
#include "CANlibF3.h"

void PWM_Init()
{
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	b08b      	sub	sp, #44	; 0x2c
	 /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d8:	4b3e      	ldr	r3, [pc, #248]	; (80006d4 <PWM_Init+0x100>)
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80005e0:	615a      	str	r2, [r3, #20]
 80005e2:	695a      	ldr	r2, [r3, #20]
 80005e4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	695a      	ldr	r2, [r3, #20]
 80005f6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80005fa:	9202      	str	r2, [sp, #8]
 80005fc:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800060c:	9203      	str	r2, [sp, #12]
 800060e:	9a03      	ldr	r2, [sp, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000616:	615a      	str	r2, [r3, #20]
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	9304      	str	r3, [sp, #16]
 8000620:	9b04      	ldr	r3, [sp, #16]

	  GPIO_InitTypeDef GPIO_InitStruct;


   /*Configure GPIO pin Output Level */
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000622:	4f2d      	ldr	r7, [pc, #180]	; (80006d8 <PWM_Init+0x104>)
 8000624:	2200      	movs	r2, #0
 8000626:	f24c 01c0 	movw	r1, #49344	; 0xc0c0
 800062a:	4638      	mov	r0, r7
 800062c:	f001 f9e1 	bl	80019f2 <HAL_GPIO_WritePin>

	   /*Configure GPIO pin Output Level */
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000630:	4d2a      	ldr	r5, [pc, #168]	; (80006dc <PWM_Init+0x108>)
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000638:	4628      	mov	r0, r5
 800063a:	f001 f9da 	bl	80019f2 <HAL_GPIO_WritePin>

	   /*Configure GPIO pins : PC14 PC15 PC6 PC7 */
	   GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 800063e:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8000642:	9305      	str	r3, [sp, #20]
	   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2601      	movs	r6, #1
 8000646:	9606      	str	r6, [sp, #24]
	   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2400      	movs	r4, #0
 800064a:	9407      	str	r4, [sp, #28]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	9408      	str	r4, [sp, #32]
	   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	a905      	add	r1, sp, #20
 8000650:	4638      	mov	r0, r7
 8000652:	f001 f8fd 	bl	8001850 <HAL_GPIO_Init>

	   /*Configure GPIO pins : PB10 PB11 */
	   GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000656:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800065a:	9305      	str	r3, [sp, #20]
	   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	9606      	str	r6, [sp, #24]
	   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	9407      	str	r4, [sp, #28]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	9408      	str	r4, [sp, #32]
	   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	a905      	add	r1, sp, #20
 8000664:	4628      	mov	r0, r5
 8000666:	f001 f8f3 	bl	8001850 <HAL_GPIO_Init>


	   /*Stop Motors*/

	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14 | GPIO_PIN_6, GPIO_PIN_RESET);
 800066a:	4622      	mov	r2, r4
 800066c:	f244 0140 	movw	r1, #16448	; 0x4040
 8000670:	4638      	mov	r0, r7
 8000672:	f001 f9be 	bl	80019f2 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000676:	4632      	mov	r2, r6
 8000678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067c:	4628      	mov	r0, r5
 800067e:	f001 f9b8 	bl	80019f2 <HAL_GPIO_WritePin>

	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000682:	4622      	mov	r2, r4
 8000684:	f248 0180 	movw	r1, #32896	; 0x8080
 8000688:	4638      	mov	r0, r7
 800068a:	f001 f9b2 	bl	80019f2 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800068e:	4632      	mov	r2, r6
 8000690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000694:	4628      	mov	r0, r5
 8000696:	f001 f9ac 	bl	80019f2 <HAL_GPIO_WritePin>
	   /*Timers*/


	   HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800069a:	4d11      	ldr	r5, [pc, #68]	; (80006e0 <PWM_Init+0x10c>)
 800069c:	4621      	mov	r1, r4
 800069e:	4628      	mov	r0, r5
 80006a0:	f002 fb12 	bl	8002cc8 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80006a4:	2104      	movs	r1, #4
 80006a6:	4628      	mov	r0, r5
 80006a8:	f002 fb0e 	bl	8002cc8 <HAL_TIM_PWM_Start>

	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006ac:	4d0d      	ldr	r5, [pc, #52]	; (80006e4 <PWM_Init+0x110>)
 80006ae:	4621      	mov	r1, r4
 80006b0:	4628      	mov	r0, r5
 80006b2:	f002 fb09 	bl	8002cc8 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006b6:	2104      	movs	r1, #4
 80006b8:	4628      	mov	r0, r5
 80006ba:	f002 fb05 	bl	8002cc8 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006be:	2108      	movs	r1, #8
 80006c0:	4628      	mov	r0, r5
 80006c2:	f002 fb01 	bl	8002cc8 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006c6:	210c      	movs	r1, #12
 80006c8:	4628      	mov	r0, r5
 80006ca:	f002 fafd 	bl	8002cc8 <HAL_TIM_PWM_Start>

}
 80006ce:	b00b      	add	sp, #44	; 0x2c
 80006d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000
 80006d8:	48000800 	.word	0x48000800
 80006dc:	48000400 	.word	0x48000400
 80006e0:	200008a4 	.word	0x200008a4
 80006e4:	20000924 	.word	0x20000924

080006e8 <StartMotors>:

void StartMotors(){ //
 80006e8:	b538      	push	{r3, r4, r5, lr}

	  	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14 | GPIO_PIN_6, GPIO_PIN_RESET);
 80006ea:	4d0d      	ldr	r5, [pc, #52]	; (8000720 <StartMotors+0x38>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f244 0140 	movw	r1, #16448	; 0x4040
 80006f2:	4628      	mov	r0, r5
 80006f4:	f001 f97d 	bl	80019f2 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80006f8:	4c0a      	ldr	r4, [pc, #40]	; (8000724 <StartMotors+0x3c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000700:	4620      	mov	r0, r4
 8000702:	f001 f976 	bl	80019f2 <HAL_GPIO_WritePin>

		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15 | GPIO_PIN_7, GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	f248 0180 	movw	r1, #32896	; 0x8080
 800070c:	4628      	mov	r0, r5
 800070e:	f001 f970 	bl	80019f2 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000718:	4620      	mov	r0, r4
 800071a:	f001 f96a 	bl	80019f2 <HAL_GPIO_WritePin>
 800071e:	bd38      	pop	{r3, r4, r5, pc}
 8000720:	48000800 	.word	0x48000800
 8000724:	48000400 	.word	0x48000400

08000728 <StopMotors>:
}
void StopMotors(){
 8000728:	b538      	push	{r3, r4, r5, lr}
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14 | GPIO_PIN_6, GPIO_PIN_SET);
 800072a:	4d0d      	ldr	r5, [pc, #52]	; (8000760 <StopMotors+0x38>)
 800072c:	2201      	movs	r2, #1
 800072e:	f244 0140 	movw	r1, #16448	; 0x4040
 8000732:	4628      	mov	r0, r5
 8000734:	f001 f95d 	bl	80019f2 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <StopMotors+0x3c>)
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000740:	4620      	mov	r0, r4
 8000742:	f001 f956 	bl	80019f2 <HAL_GPIO_WritePin>

	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f248 0180 	movw	r1, #32896	; 0x8080
 800074c:	4628      	mov	r0, r5
 800074e:	f001 f950 	bl	80019f2 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000758:	4620      	mov	r0, r4
 800075a:	f001 f94a 	bl	80019f2 <HAL_GPIO_WritePin>
 800075e:	bd38      	pop	{r3, r4, r5, pc}
 8000760:	48000800 	.word	0x48000800
 8000764:	48000400 	.word	0x48000400

08000768 <PWM_Set>:
 */

void PWM_Set(int16_t counter){

#ifdef LEFT_MOTORS
	if (counter>0)
 8000768:	2800      	cmp	r0, #0
 800076a:	dd0a      	ble.n	8000782 <PWM_Set+0x1a>
	{
	TIM1->CCR3 = counter;
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <PWM_Set+0x34>)
 800076e:	63d8      	str	r0, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;       //motor3
 8000770:	2200      	movs	r2, #0
 8000772:	641a      	str	r2, [r3, #64]	; 0x40

	TIM1->CCR1 = counter;
 8000774:	6358      	str	r0, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;       //motor2
 8000776:	639a      	str	r2, [r3, #56]	; 0x38

	TIM15->CCR1 = counter;
 8000778:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800077c:	6358      	str	r0, [r3, #52]	; 0x34
	TIM15->CCR2 = 0;			//motor1
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
 8000780:	4770      	bx	lr
	}
	else
	{
	TIM1->CCR3= 0;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <PWM_Set+0x34>)
 8000784:	2200      	movs	r2, #0
 8000786:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = -counter; 		//motor3
 8000788:	4240      	negs	r0, r0
 800078a:	6418      	str	r0, [r3, #64]	; 0x40

	TIM1->CCR1 = 0;
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = -counter;		//motor2
 800078e:	6398      	str	r0, [r3, #56]	; 0x38

	TIM15->CCR1 = 0;
 8000790:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = -counter;	//motor1
 8000796:	6398      	str	r0, [r3, #56]	; 0x38
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40012c00 	.word	0x40012c00

080007a0 <REG_SetReference>:

}

void REG_SetReference(int16_t speed)
{
	ReferencePulse=speed*REFERENCE_MULTIPILER;
 80007a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80007a4:	0043      	lsls	r3, r0, #1
 80007a6:	4a01      	ldr	r2, [pc, #4]	; (80007ac <REG_SetReference+0xc>)
 80007a8:	8013      	strh	r3, [r2, #0]
 80007aa:	4770      	bx	lr
 80007ac:	20000038 	.word	0x20000038

080007b0 <SetInertial>:
}
void SetInertial()
{
	CurrentPulseFloat += (InertialGain*((float)(ReferencePulse)-(float)(CurrentPulse)));
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <SetInertial+0x44>)
 80007b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b6:	ee07 3a90 	vmov	s15, r3
 80007ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <SetInertial+0x48>)
 80007c0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80007c4:	ee07 3a90 	vmov	s15, r3
 80007c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <SetInertial+0x4c>)
 80007d2:	ed93 7a00 	vldr	s14, [r3]
 80007d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <SetInertial+0x50>)
 80007dc:	ed93 7a00 	vldr	s14, [r3]
 80007e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007e4:	edc3 7a00 	vstr	s15, [r3]
	CurrentPulse = (int16_t) CurrentPulseFloat;
 80007e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ec:	ee17 3a90 	vmov	r3, s15
 80007f0:	8013      	strh	r3, [r2, #0]
 80007f2:	4770      	bx	lr
 80007f4:	20000038 	.word	0x20000038
 80007f8:	20000032 	.word	0x20000032
 80007fc:	20000004 	.word	0x20000004
 8000800:	20000034 	.word	0x20000034

08000804 <REG_MainFunction>:
{
 8000804:	b508      	push	{r3, lr}
	SetInertial();
 8000806:	f7ff ffd3 	bl	80007b0 <SetInertial>
	PWM_Set(CurrentPulse);
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <REG_MainFunction+0x14>)
 800080c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000810:	f7ff ffaa 	bl	8000768 <PWM_Set>
 8000814:	bd08      	pop	{r3, pc}
 8000816:	bf00      	nop
 8000818:	20000032 	.word	0x20000032

0800081c <MX_TIM2_Init>:
}

/* TIM2 init function */

void MX_TIM2_Init(void)
{
 800081c:	b500      	push	{lr}
 800081e:	b08d      	sub	sp, #52	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
 8000820:	4829      	ldr	r0, [pc, #164]	; (80008c8 <MX_TIM2_Init+0xac>)
 8000822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000826:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 10;
 8000828:	230a      	movs	r3, #10
 800082a:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	2300      	movs	r3, #0
 800082e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8000830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000834:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000836:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000838:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800083a:	f001 ffcb 	bl	80027d4 <HAL_TIM_Base_Init>
 800083e:	bb28      	cbnz	r0, 800088c <MX_TIM2_Init+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000840:	a90c      	add	r1, sp, #48	; 0x30
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800084a:	481f      	ldr	r0, [pc, #124]	; (80008c8 <MX_TIM2_Init+0xac>)
 800084c:	f002 f9a0 	bl	8002b90 <HAL_TIM_ConfigClockSource>
 8000850:	bb10      	cbnz	r0, 8000898 <MX_TIM2_Init+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000852:	481d      	ldr	r0, [pc, #116]	; (80008c8 <MX_TIM2_Init+0xac>)
 8000854:	f001 fff0 	bl	8002838 <HAL_TIM_IC_Init>
 8000858:	bb20      	cbnz	r0, 80008a4 <MX_TIM2_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000860:	a905      	add	r1, sp, #20
 8000862:	4819      	ldr	r0, [pc, #100]	; (80008c8 <MX_TIM2_Init+0xac>)
 8000864:	f002 fb8a 	bl	8002f7c <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	bb10      	cbnz	r0, 80008b0 <MX_TIM2_Init+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800086a:	2300      	movs	r3, #0
 800086c:	9301      	str	r3, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800086e:	2201      	movs	r2, #1
 8000870:	9202      	str	r2, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000872:	9303      	str	r3, [sp, #12]
  sConfigIC.ICFilter = 15;
 8000874:	230f      	movs	r3, #15
 8000876:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000878:	2204      	movs	r2, #4
 800087a:	eb0d 0102 	add.w	r1, sp, r2
 800087e:	4812      	ldr	r0, [pc, #72]	; (80008c8 <MX_TIM2_Init+0xac>)
 8000880:	f002 f91a 	bl	8002ab8 <HAL_TIM_IC_ConfigChannel>
 8000884:	b9d0      	cbnz	r0, 80008bc <MX_TIM2_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8000886:	b00d      	add	sp, #52	; 0x34
 8000888:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800088c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8000890:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_TIM2_Init+0xb0>)
 8000892:	f000 fab1 	bl	8000df8 <_Error_Handler>
 8000896:	e7d3      	b.n	8000840 <MX_TIM2_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8000898:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_TIM2_Init+0xb0>)
 800089e:	f000 faab 	bl	8000df8 <_Error_Handler>
 80008a2:	e7d6      	b.n	8000852 <MX_TIM2_Init+0x36>
    _Error_Handler(__FILE__, __LINE__);
 80008a4:	f240 11e1 	movw	r1, #481	; 0x1e1
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <MX_TIM2_Init+0xb0>)
 80008aa:	f000 faa5 	bl	8000df8 <_Error_Handler>
 80008ae:	e7d4      	b.n	800085a <MX_TIM2_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 80008b0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_TIM2_Init+0xb0>)
 80008b6:	f000 fa9f 	bl	8000df8 <_Error_Handler>
 80008ba:	e7d6      	b.n	800086a <MX_TIM2_Init+0x4e>
    _Error_Handler(__FILE__, __LINE__);
 80008bc:	f240 11f1 	movw	r1, #497	; 0x1f1
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <MX_TIM2_Init+0xb0>)
 80008c2:	f000 fa99 	bl	8000df8 <_Error_Handler>
}
 80008c6:	e7de      	b.n	8000886 <MX_TIM2_Init+0x6a>
 80008c8:	20000964 	.word	0x20000964
 80008cc:	08003130 	.word	0x08003130

080008d0 <MX_TIM16_Init>:

}
/* TIM16 init function */

void MX_TIM16_Init(void)
{
 80008d0:	b500      	push	{lr}
 80008d2:	b085      	sub	sp, #20

  TIM_IC_InitTypeDef sConfigIC;

  htim16.Instance = TIM16;
 80008d4:	4819      	ldr	r0, [pc, #100]	; (800093c <MX_TIM16_Init+0x6c>)
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_TIM16_Init+0x70>)
 80008d8:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 10;
 80008da:	230a      	movs	r3, #10
 80008dc:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	2300      	movs	r3, #0
 80008e0:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 0xFFFF;
 80008e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e6:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e8:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 80008ea:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008ee:	f001 ff71 	bl	80027d4 <HAL_TIM_Base_Init>
 80008f2:	b988      	cbnz	r0, 8000918 <MX_TIM16_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_TIM16_Init+0x6c>)
 80008f6:	f001 ff9f 	bl	8002838 <HAL_TIM_IC_Init>
 80008fa:	b998      	cbnz	r0, 8000924 <MX_TIM16_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008fc:	2200      	movs	r2, #0
 80008fe:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000900:	2301      	movs	r3, #1
 8000902:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000904:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 8000906:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000908:	4669      	mov	r1, sp
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_TIM16_Init+0x6c>)
 800090c:	f002 f8d4 	bl	8002ab8 <HAL_TIM_IC_ConfigChannel>
 8000910:	b970      	cbnz	r0, 8000930 <MX_TIM16_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8000912:	b005      	add	sp, #20
 8000914:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8000918:	f44f 7110 	mov.w	r1, #576	; 0x240
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_TIM16_Init+0x74>)
 800091e:	f000 fa6b 	bl	8000df8 <_Error_Handler>
 8000922:	e7e7      	b.n	80008f4 <MX_TIM16_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8000924:	f240 2145 	movw	r1, #581	; 0x245
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <MX_TIM16_Init+0x74>)
 800092a:	f000 fa65 	bl	8000df8 <_Error_Handler>
 800092e:	e7e5      	b.n	80008fc <MX_TIM16_Init+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 8000930:	f240 214e 	movw	r1, #590	; 0x24e
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM16_Init+0x74>)
 8000936:	f000 fa5f 	bl	8000df8 <_Error_Handler>
}
 800093a:	e7ea      	b.n	8000912 <MX_TIM16_Init+0x42>
 800093c:	200009a4 	.word	0x200009a4
 8000940:	40014400 	.word	0x40014400
 8000944:	08003130 	.word	0x08003130

08000948 <MX_TIM17_Init>:

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000948:	b500      	push	{lr}
 800094a:	b085      	sub	sp, #20

  TIM_IC_InitTypeDef sConfigIC;

  htim17.Instance = TIM17;
 800094c:	4819      	ldr	r0, [pc, #100]	; (80009b4 <MX_TIM17_Init+0x6c>)
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_TIM17_Init+0x70>)
 8000950:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 10;
 8000952:	230a      	movs	r3, #10
 8000954:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	2300      	movs	r3, #0
 8000958:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 0xFFFF;
 800095a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095e:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8000962:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000966:	f001 ff35 	bl	80027d4 <HAL_TIM_Base_Init>
 800096a:	b988      	cbnz	r0, 8000990 <MX_TIM17_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800096c:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_TIM17_Init+0x6c>)
 800096e:	f001 ff63 	bl	8002838 <HAL_TIM_IC_Init>
 8000972:	b998      	cbnz	r0, 800099c <MX_TIM17_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000974:	2200      	movs	r2, #0
 8000976:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000978:	2301      	movs	r3, #1
 800097a:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800097c:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800097e:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000980:	4669      	mov	r1, sp
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_TIM17_Init+0x6c>)
 8000984:	f002 f898 	bl	8002ab8 <HAL_TIM_IC_ConfigChannel>
 8000988:	b970      	cbnz	r0, 80009a8 <MX_TIM17_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 800098a:	b005      	add	sp, #20
 800098c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8000990:	f240 2162 	movw	r1, #610	; 0x262
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <MX_TIM17_Init+0x74>)
 8000996:	f000 fa2f 	bl	8000df8 <_Error_Handler>
 800099a:	e7e7      	b.n	800096c <MX_TIM17_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 800099c:	f240 2167 	movw	r1, #615	; 0x267
 80009a0:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_TIM17_Init+0x74>)
 80009a2:	f000 fa29 	bl	8000df8 <_Error_Handler>
 80009a6:	e7e5      	b.n	8000974 <MX_TIM17_Init+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 80009a8:	f44f 711c 	mov.w	r1, #624	; 0x270
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <MX_TIM17_Init+0x74>)
 80009ae:	f000 fa23 	bl	8000df8 <_Error_Handler>
}
 80009b2:	e7ea      	b.n	800098a <MX_TIM17_Init+0x42>
 80009b4:	200008e4 	.word	0x200008e4
 80009b8:	40014800 	.word	0x40014800
 80009bc:	08003130 	.word	0x08003130

080009c0 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c0:	b510      	push	{r4, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 80009c4:	6803      	ldr	r3, [r0, #0]
 80009c6:	4a45      	ldr	r2, [pc, #276]	; (8000adc <HAL_TIM_Base_MspInit+0x11c>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d00a      	beq.n	80009e2 <HAL_TIM_Base_MspInit+0x22>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80009cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d0:	d022      	beq.n	8000a18 <HAL_TIM_Base_MspInit+0x58>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 80009d2:	4a43      	ldr	r2, [pc, #268]	; (8000ae0 <HAL_TIM_Base_MspInit+0x120>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d040      	beq.n	8000a5a <HAL_TIM_Base_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 80009d8:	4a42      	ldr	r2, [pc, #264]	; (8000ae4 <HAL_TIM_Base_MspInit+0x124>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d05d      	beq.n	8000a9a <HAL_TIM_Base_MspInit+0xda>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80009de:	b00a      	add	sp, #40	; 0x28
 80009e0:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009e2:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <HAL_TIM_Base_MspInit+0x128>)
 80009e4:	699a      	ldr	r2, [r3, #24]
 80009e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009ea:	619a      	str	r2, [r3, #24]
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	4611      	mov	r1, r2
 80009fa:	2019      	movs	r0, #25
 80009fc:	f000 fec0 	bl	8001780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a00:	2019      	movs	r0, #25
 8000a02:	f000 feef 	bl	80017e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	4611      	mov	r1, r2
 8000a0a:	201a      	movs	r0, #26
 8000a0c:	f000 feb8 	bl	8001780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000a10:	201a      	movs	r0, #26
 8000a12:	f000 fee7 	bl	80017e4 <HAL_NVIC_EnableIRQ>
 8000a16:	e7e2      	b.n	80009de <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a18:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000a1c:	69da      	ldr	r2, [r3, #28]
 8000a1e:	f042 0201 	orr.w	r2, r2, #1
 8000a22:	61da      	str	r2, [r3, #28]
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	9302      	str	r3, [sp, #8]
 8000a2c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2400      	movs	r4, #0
 8000a38:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	a905      	add	r1, sp, #20
 8000a42:	482a      	ldr	r0, [pc, #168]	; (8000aec <HAL_TIM_Base_MspInit+0x12c>)
 8000a44:	f000 ff04 	bl	8001850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a48:	4622      	mov	r2, r4
 8000a4a:	4621      	mov	r1, r4
 8000a4c:	201c      	movs	r0, #28
 8000a4e:	f000 fe97 	bl	8001780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a52:	201c      	movs	r0, #28
 8000a54:	f000 fec6 	bl	80017e4 <HAL_NVIC_EnableIRQ>
 8000a58:	e7c1      	b.n	80009de <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <HAL_TIM_Base_MspInit+0x128>)
 8000a5c:	699a      	ldr	r2, [r3, #24]
 8000a5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a62:	619a      	str	r2, [r3, #24]
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	9303      	str	r3, [sp, #12]
 8000a6c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2400      	movs	r4, #0
 8000a78:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	a905      	add	r1, sp, #20
 8000a82:	481a      	ldr	r0, [pc, #104]	; (8000aec <HAL_TIM_Base_MspInit+0x12c>)
 8000a84:	f000 fee4 	bl	8001850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a88:	4622      	mov	r2, r4
 8000a8a:	4621      	mov	r1, r4
 8000a8c:	2019      	movs	r0, #25
 8000a8e:	f000 fe77 	bl	8001780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a92:	2019      	movs	r0, #25
 8000a94:	f000 fea6 	bl	80017e4 <HAL_NVIC_EnableIRQ>
 8000a98:	e7a1      	b.n	80009de <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <HAL_TIM_Base_MspInit+0x128>)
 8000a9c:	699a      	ldr	r2, [r3, #24]
 8000a9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000aa2:	619a      	str	r2, [r3, #24]
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aaa:	9304      	str	r3, [sp, #16]
 8000aac:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aae:	2320      	movs	r3, #32
 8000ab0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2400      	movs	r4, #0
 8000ab8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000abc:	230a      	movs	r3, #10
 8000abe:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	a905      	add	r1, sp, #20
 8000ac2:	480a      	ldr	r0, [pc, #40]	; (8000aec <HAL_TIM_Base_MspInit+0x12c>)
 8000ac4:	f000 fec4 	bl	8001850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000ac8:	4622      	mov	r2, r4
 8000aca:	4621      	mov	r1, r4
 8000acc:	201a      	movs	r0, #26
 8000ace:	f000 fe57 	bl	8001780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ad2:	201a      	movs	r0, #26
 8000ad4:	f000 fe86 	bl	80017e4 <HAL_NVIC_EnableIRQ>
}
 8000ad8:	e781      	b.n	80009de <HAL_TIM_Base_MspInit+0x1e>
 8000ada:	bf00      	nop
 8000adc:	40012c00 	.word	0x40012c00
 8000ae0:	40014400 	.word	0x40014400
 8000ae4:	40014800 	.word	0x40014800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	48000400 	.word	0x48000400

08000af0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM15)
 8000af0:	6802      	ldr	r2, [r0, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_TIM_PWM_MspInit+0x28>)
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d000      	beq.n	8000afa <HAL_TIM_PWM_MspInit+0xa>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000af8:	4770      	bx	lr
{
 8000afa:	b082      	sub	sp, #8
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000afc:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8000b00:	699a      	ldr	r2, [r3, #24]
 8000b02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b06:	619a      	str	r2, [r3, #24]
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	9b01      	ldr	r3, [sp, #4]
}
 8000b12:	b002      	add	sp, #8
 8000b14:	e7f0      	b.n	8000af8 <HAL_TIM_PWM_MspInit+0x8>
 8000b16:	bf00      	nop
 8000b18:	40014000 	.word	0x40014000

08000b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b1c:	b530      	push	{r4, r5, lr}
 8000b1e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8000b20:	6803      	ldr	r3, [r0, #0]
 8000b22:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <HAL_TIM_MspPostInit+0x68>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d004      	beq.n	8000b32 <HAL_TIM_MspPostInit+0x16>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM15)
 8000b28:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_TIM_MspPostInit+0x6c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d01b      	beq.n	8000b66 <HAL_TIM_MspPostInit+0x4a>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000b2e:	b007      	add	sp, #28
 8000b30:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b32:	230c      	movs	r3, #12
 8000b34:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2502      	movs	r5, #2
 8000b38:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2400      	movs	r4, #0
 8000b3c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b40:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b42:	a901      	add	r1, sp, #4
 8000b44:	4811      	ldr	r0, [pc, #68]	; (8000b8c <HAL_TIM_MspPostInit+0x70>)
 8000b46:	f000 fe83 	bl	8001850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b56:	2306      	movs	r3, #6
 8000b58:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	a901      	add	r1, sp, #4
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f000 fe76 	bl	8001850 <HAL_GPIO_Init>
 8000b64:	e7e3      	b.n	8000b2e <HAL_TIM_MspPostInit+0x12>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b66:	230c      	movs	r3, #12
 8000b68:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8000b74:	2309      	movs	r3, #9
 8000b76:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	a901      	add	r1, sp, #4
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f000 fe67 	bl	8001850 <HAL_GPIO_Init>
}
 8000b82:	e7d4      	b.n	8000b2e <HAL_TIM_MspPostInit+0x12>
 8000b84:	40012c00 	.word	0x40012c00
 8000b88:	40014000 	.word	0x40014000
 8000b8c:	48000800 	.word	0x48000800

08000b90 <MX_TIM1_Init>:
{
 8000b90:	b500      	push	{lr}
 8000b92:	b09b      	sub	sp, #108	; 0x6c
  htim1.Instance = TIM1;
 8000b94:	484f      	ldr	r0, [pc, #316]	; (8000cd4 <MX_TIM1_Init+0x144>)
 8000b96:	4b50      	ldr	r3, [pc, #320]	; (8000cd8 <MX_TIM1_Init+0x148>)
 8000b98:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 72;
 8000b9a:	2348      	movs	r3, #72	; 0x48
 8000b9c:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1000;
 8000ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba6:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba8:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000baa:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bac:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bae:	f001 fe11 	bl	80027d4 <HAL_TIM_Base_Init>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d157      	bne.n	8000c66 <MX_TIM1_Init+0xd6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb6:	a91a      	add	r1, sp, #104	; 0x68
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bc0:	4844      	ldr	r0, [pc, #272]	; (8000cd4 <MX_TIM1_Init+0x144>)
 8000bc2:	f001 ffe5 	bl	8002b90 <HAL_TIM_ConfigClockSource>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d153      	bne.n	8000c72 <MX_TIM1_Init+0xe2>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bca:	4842      	ldr	r0, [pc, #264]	; (8000cd4 <MX_TIM1_Init+0x144>)
 8000bcc:	f001 fe1b 	bl	8002806 <HAL_TIM_PWM_Init>
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d154      	bne.n	8000c7e <MX_TIM1_Init+0xee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bd8:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bda:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bdc:	a913      	add	r1, sp, #76	; 0x4c
 8000bde:	483d      	ldr	r0, [pc, #244]	; (8000cd4 <MX_TIM1_Init+0x144>)
 8000be0:	f002 f9cc 	bl	8002f7c <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	2800      	cmp	r0, #0
 8000be6:	d150      	bne.n	8000c8a <MX_TIM1_Init+0xfa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be8:	2360      	movs	r3, #96	; 0x60
 8000bea:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000bec:	2200      	movs	r2, #0
 8000bee:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf0:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf2:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf4:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bf6:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bf8:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfa:	a90c      	add	r1, sp, #48	; 0x30
 8000bfc:	4835      	ldr	r0, [pc, #212]	; (8000cd4 <MX_TIM1_Init+0x144>)
 8000bfe:	f002 f923 	bl	8002e48 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	2800      	cmp	r0, #0
 8000c04:	d147      	bne.n	8000c96 <MX_TIM1_Init+0x106>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c06:	2204      	movs	r2, #4
 8000c08:	a90c      	add	r1, sp, #48	; 0x30
 8000c0a:	4832      	ldr	r0, [pc, #200]	; (8000cd4 <MX_TIM1_Init+0x144>)
 8000c0c:	f002 f91c 	bl	8002e48 <HAL_TIM_PWM_ConfigChannel>
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d146      	bne.n	8000ca2 <MX_TIM1_Init+0x112>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c14:	2208      	movs	r2, #8
 8000c16:	a90c      	add	r1, sp, #48	; 0x30
 8000c18:	482e      	ldr	r0, [pc, #184]	; (8000cd4 <MX_TIM1_Init+0x144>)
 8000c1a:	f002 f915 	bl	8002e48 <HAL_TIM_PWM_ConfigChannel>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d145      	bne.n	8000cae <MX_TIM1_Init+0x11e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c22:	220c      	movs	r2, #12
 8000c24:	a90c      	add	r1, sp, #48	; 0x30
 8000c26:	482b      	ldr	r0, [pc, #172]	; (8000cd4 <MX_TIM1_Init+0x144>)
 8000c28:	f002 f90e 	bl	8002e48 <HAL_TIM_PWM_ConfigChannel>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d144      	bne.n	8000cba <MX_TIM1_Init+0x12a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c34:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c36:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c38:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c40:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c42:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c44:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c4a:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c4c:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c4e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c50:	a901      	add	r1, sp, #4
 8000c52:	4820      	ldr	r0, [pc, #128]	; (8000cd4 <MX_TIM1_Init+0x144>)
 8000c54:	f002 f9ba 	bl	8002fcc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c58:	bba8      	cbnz	r0, 8000cc6 <MX_TIM1_Init+0x136>
  HAL_TIM_MspPostInit(&htim1);
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <MX_TIM1_Init+0x144>)
 8000c5c:	f7ff ff5e 	bl	8000b1c <HAL_TIM_MspPostInit>
}
 8000c60:	b01b      	add	sp, #108	; 0x6c
 8000c62:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8000c66:	f240 1181 	movw	r1, #385	; 0x181
 8000c6a:	481c      	ldr	r0, [pc, #112]	; (8000cdc <MX_TIM1_Init+0x14c>)
 8000c6c:	f000 f8c4 	bl	8000df8 <_Error_Handler>
 8000c70:	e7a1      	b.n	8000bb6 <MX_TIM1_Init+0x26>
    _Error_Handler(__FILE__, __LINE__);
 8000c72:	f240 1187 	movw	r1, #391	; 0x187
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <MX_TIM1_Init+0x14c>)
 8000c78:	f000 f8be 	bl	8000df8 <_Error_Handler>
 8000c7c:	e7a5      	b.n	8000bca <MX_TIM1_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
 8000c7e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8000c82:	4816      	ldr	r0, [pc, #88]	; (8000cdc <MX_TIM1_Init+0x14c>)
 8000c84:	f000 f8b8 	bl	8000df8 <_Error_Handler>
 8000c88:	e7a4      	b.n	8000bd4 <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8000c8a:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8000c8e:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_TIM1_Init+0x14c>)
 8000c90:	f000 f8b2 	bl	8000df8 <_Error_Handler>
 8000c94:	e7a8      	b.n	8000be8 <MX_TIM1_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 8000c96:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8000c9a:	4810      	ldr	r0, [pc, #64]	; (8000cdc <MX_TIM1_Init+0x14c>)
 8000c9c:	f000 f8ac 	bl	8000df8 <_Error_Handler>
 8000ca0:	e7b1      	b.n	8000c06 <MX_TIM1_Init+0x76>
    _Error_Handler(__FILE__, __LINE__);
 8000ca2:	f240 11a5 	movw	r1, #421	; 0x1a5
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM1_Init+0x14c>)
 8000ca8:	f000 f8a6 	bl	8000df8 <_Error_Handler>
 8000cac:	e7b2      	b.n	8000c14 <MX_TIM1_Init+0x84>
    _Error_Handler(__FILE__, __LINE__);
 8000cae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000cb2:	480a      	ldr	r0, [pc, #40]	; (8000cdc <MX_TIM1_Init+0x14c>)
 8000cb4:	f000 f8a0 	bl	8000df8 <_Error_Handler>
 8000cb8:	e7b3      	b.n	8000c22 <MX_TIM1_Init+0x92>
    _Error_Handler(__FILE__, __LINE__);
 8000cba:	f240 11af 	movw	r1, #431	; 0x1af
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM1_Init+0x14c>)
 8000cc0:	f000 f89a 	bl	8000df8 <_Error_Handler>
 8000cc4:	e7b4      	b.n	8000c30 <MX_TIM1_Init+0xa0>
    _Error_Handler(__FILE__, __LINE__);
 8000cc6:	f240 11bf 	movw	r1, #447	; 0x1bf
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_TIM1_Init+0x14c>)
 8000ccc:	f000 f894 	bl	8000df8 <_Error_Handler>
 8000cd0:	e7c3      	b.n	8000c5a <MX_TIM1_Init+0xca>
 8000cd2:	bf00      	nop
 8000cd4:	20000924 	.word	0x20000924
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	08003130 	.word	0x08003130

08000ce0 <MX_TIM15_Init>:
{
 8000ce0:	b500      	push	{lr}
 8000ce2:	b097      	sub	sp, #92	; 0x5c
  htim15.Instance = TIM15;
 8000ce4:	4830      	ldr	r0, [pc, #192]	; (8000da8 <MX_TIM15_Init+0xc8>)
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <MX_TIM15_Init+0xcc>)
 8000ce8:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 72;
 8000cea:	2348      	movs	r3, #72	; 0x48
 8000cec:	6043      	str	r3, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	6083      	str	r3, [r0, #8]
  htim15.Init.Period = 1000;
 8000cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf6:	60c2      	str	r2, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	6103      	str	r3, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8000cfa:	6143      	str	r3, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000cfe:	f001 fd82 	bl	8002806 <HAL_TIM_PWM_Init>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d132      	bne.n	8000d6c <MX_TIM15_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d0c:	a913      	add	r1, sp, #76	; 0x4c
 8000d0e:	4826      	ldr	r0, [pc, #152]	; (8000da8 <MX_TIM15_Init+0xc8>)
 8000d10:	f002 f934 	bl	8002f7c <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d12f      	bne.n	8000d78 <MX_TIM15_Init+0x98>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	; 0x60
 8000d1a:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d22:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d26:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d28:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d2a:	a90c      	add	r1, sp, #48	; 0x30
 8000d2c:	481e      	ldr	r0, [pc, #120]	; (8000da8 <MX_TIM15_Init+0xc8>)
 8000d2e:	f002 f88b 	bl	8002e48 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	bb38      	cbnz	r0, 8000d84 <MX_TIM15_Init+0xa4>
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d34:	2204      	movs	r2, #4
 8000d36:	a90c      	add	r1, sp, #48	; 0x30
 8000d38:	481b      	ldr	r0, [pc, #108]	; (8000da8 <MX_TIM15_Init+0xc8>)
 8000d3a:	f002 f885 	bl	8002e48 <HAL_TIM_PWM_ConfigChannel>
 8000d3e:	bb38      	cbnz	r0, 8000d90 <MX_TIM15_Init+0xb0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d44:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d46:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d48:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d4a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d50:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d52:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d54:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000d56:	a901      	add	r1, sp, #4
 8000d58:	4813      	ldr	r0, [pc, #76]	; (8000da8 <MX_TIM15_Init+0xc8>)
 8000d5a:	f002 f937 	bl	8002fcc <HAL_TIMEx_ConfigBreakDeadTime>
 8000d5e:	b9e8      	cbnz	r0, 8000d9c <MX_TIM15_Init+0xbc>
  HAL_TIM_MspPostInit(&htim15);
 8000d60:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_TIM15_Init+0xc8>)
 8000d62:	f7ff fedb 	bl	8000b1c <HAL_TIM_MspPostInit>
}
 8000d66:	b017      	add	sp, #92	; 0x5c
 8000d68:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8000d6c:	f240 2105 	movw	r1, #517	; 0x205
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <MX_TIM15_Init+0xd0>)
 8000d72:	f000 f841 	bl	8000df8 <_Error_Handler>
 8000d76:	e7c6      	b.n	8000d06 <MX_TIM15_Init+0x26>
    _Error_Handler(__FILE__, __LINE__);
 8000d78:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <MX_TIM15_Init+0xd0>)
 8000d7e:	f000 f83b 	bl	8000df8 <_Error_Handler>
 8000d82:	e7c9      	b.n	8000d18 <MX_TIM15_Init+0x38>
    _Error_Handler(__FILE__, __LINE__);
 8000d84:	f44f 7106 	mov.w	r1, #536	; 0x218
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <MX_TIM15_Init+0xd0>)
 8000d8a:	f000 f835 	bl	8000df8 <_Error_Handler>
 8000d8e:	e7d1      	b.n	8000d34 <MX_TIM15_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8000d90:	f240 211d 	movw	r1, #541	; 0x21d
 8000d94:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_TIM15_Init+0xd0>)
 8000d96:	f000 f82f 	bl	8000df8 <_Error_Handler>
 8000d9a:	e7d1      	b.n	8000d40 <MX_TIM15_Init+0x60>
    _Error_Handler(__FILE__, __LINE__);
 8000d9c:	f240 212a 	movw	r1, #554	; 0x22a
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <MX_TIM15_Init+0xd0>)
 8000da2:	f000 f829 	bl	8000df8 <_Error_Handler>
 8000da6:	e7db      	b.n	8000d60 <MX_TIM15_Init+0x80>
 8000da8:	200008a4 	.word	0x200008a4
 8000dac:	40014000 	.word	0x40014000
 8000db0:	08003130 	.word	0x08003130

08000db4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000db4:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_GPIO_Init+0x40>)
 8000db8:	695a      	ldr	r2, [r3, #20]
 8000dba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000dbe:	615a      	str	r2, [r3, #20]
 8000dc0:	695a      	ldr	r2, [r3, #20]
 8000dc2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000dc6:	9201      	str	r2, [sp, #4]
 8000dc8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	695a      	ldr	r2, [r3, #20]
 8000dcc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000dd0:	615a      	str	r2, [r3, #20]
 8000dd2:	695a      	ldr	r2, [r3, #20]
 8000dd4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000dd8:	9202      	str	r2, [sp, #8]
 8000dda:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000de2:	615a      	str	r2, [r3, #20]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	9303      	str	r3, [sp, #12]
 8000dec:	9b03      	ldr	r3, [sp, #12]

}
 8000dee:	b004      	add	sp, #16
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000df8:	e7fe      	b.n	8000df8 <_Error_Handler>
	...

08000dfc <SystemClock_Config>:
{
 8000dfc:	b500      	push	{lr}
 8000dfe:	b09d      	sub	sp, #116	; 0x74
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e00:	2302      	movs	r3, #2
 8000e02:	9312      	str	r3, [sp, #72]	; 0x48
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2201      	movs	r2, #1
 8000e06:	9216      	str	r2, [sp, #88]	; 0x58
	  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000e08:	2210      	movs	r2, #16
 8000e0a:	9217      	str	r2, [sp, #92]	; 0x5c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0c:	9319      	str	r3, [sp, #100]	; 0x64
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	931a      	str	r3, [sp, #104]	; 0x68
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e16:	931b      	str	r3, [sp, #108]	; 0x6c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	a812      	add	r0, sp, #72	; 0x48
 8000e1a:	f000 fdef 	bl	80019fc <HAL_RCC_OscConfig>
 8000e1e:	bb50      	cbnz	r0, 8000e76 <SystemClock_Config+0x7a>
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	2302      	movs	r3, #2
 8000e26:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	9311      	str	r3, [sp, #68]	; 0x44
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e30:	2101      	movs	r1, #1
 8000e32:	a80d      	add	r0, sp, #52	; 0x34
 8000e34:	f001 f924 	bl	8002080 <HAL_RCC_ClockConfig>
 8000e38:	bb08      	cbnz	r0, 8000e7e <SystemClock_Config+0x82>
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15;
 8000e3a:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000e3e:	9300      	str	r3, [sp, #0]
	  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	9308      	str	r3, [sp, #32]
	  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000e44:	9309      	str	r3, [sp, #36]	; 0x24
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e46:	4668      	mov	r0, sp
 8000e48:	f001 f9f0 	bl	800222c <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	b9d8      	cbnz	r0, 8000e86 <SystemClock_Config+0x8a>
	  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e4e:	f001 f9e7 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <SystemClock_Config+0x94>)
 8000e54:	fba3 3000 	umull	r3, r0, r3, r0
 8000e58:	0980      	lsrs	r0, r0, #6
 8000e5a:	f000 fccf 	bl	80017fc <HAL_SYSTICK_Config>
	  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e5e:	2004      	movs	r0, #4
 8000e60:	f000 fce2 	bl	8001828 <HAL_SYSTICK_CLKSourceConfig>
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	4611      	mov	r1, r2
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 fc88 	bl	8001780 <HAL_NVIC_SetPriority>
	 }
 8000e70:	b01d      	add	sp, #116	; 0x74
 8000e72:	f85d fb04 	ldr.w	pc, [sp], #4
	    _Error_Handler(__FILE__, __LINE__);
 8000e76:	2185      	movs	r1, #133	; 0x85
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <SystemClock_Config+0x98>)
 8000e7a:	f7ff ffbd 	bl	8000df8 <_Error_Handler>
	    _Error_Handler(__FILE__, __LINE__);
 8000e7e:	2193      	movs	r1, #147	; 0x93
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <SystemClock_Config+0x98>)
 8000e82:	f7ff ffb9 	bl	8000df8 <_Error_Handler>
	    _Error_Handler(__FILE__, __LINE__);
 8000e86:	219b      	movs	r1, #155	; 0x9b
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <SystemClock_Config+0x98>)
 8000e8a:	f7ff ffb5 	bl	8000df8 <_Error_Handler>
 8000e8e:	bf00      	nop
 8000e90:	10624dd3 	.word	0x10624dd3
 8000e94:	08003148 	.word	0x08003148

08000e98 <main>:
{
 8000e98:	b508      	push	{r3, lr}
  HAL_Init();
 8000e9a:	f000 f905 	bl	80010a8 <HAL_Init>
  SystemClock_Config();
 8000e9e:	f7ff ffad 	bl	8000dfc <SystemClock_Config>
  MX_GPIO_Init();
 8000ea2:	f7ff ff87 	bl	8000db4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ea6:	f7ff fe73 	bl	8000b90 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000eaa:	f7ff ff19 	bl	8000ce0 <MX_TIM15_Init>
  PWM_Init();
 8000eae:	f7ff fb91 	bl	80005d4 <PWM_Init>
  MX_TIM2_Init();
 8000eb2:	f7ff fcb3 	bl	800081c <MX_TIM2_Init>
  MX_TIM16_Init();
 8000eb6:	f7ff fd0b 	bl	80008d0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000eba:	f7ff fd45 	bl	8000948 <MX_TIM17_Init>
  ENK_TIM_Init();
 8000ebe:	f7ff fb13 	bl	80004e8 <ENK_TIM_Init>
  CAN_Init();
 8000ec2:	f7ff f9a3 	bl	800020c <CAN_Init>
  StopMotors();
 8000ec6:	f7ff fc2f 	bl	8000728 <StopMotors>
	  enc1 = TIM2->CNT;
 8000eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ed0:	4b01      	ldr	r3, [pc, #4]	; (8000ed8 <main+0x40>)
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e7f9      	b.n	8000eca <main+0x32>
 8000ed6:	bf00      	nop
 8000ed8:	200009f0 	.word	0x200009f0

08000edc <HAL_SYSTICK_Callback>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
void HAL_SYSTICK_Callback ()
{
 8000edc:	b508      	push	{r3, lr}
	REG_MainFunction();
 8000ede:	f7ff fc91 	bl	8000804 <REG_MainFunction>
	ADC_Function();
 8000ee2:	f7ff f979 	bl	80001d8 <ADC_Function>
 8000ee6:	bd08      	pop	{r3, pc}

08000ee8 <HAL_MspInit>:

/* USER CODE END 0 */
                        

void HAL_MspInit(void)
{
 8000ee8:	b500      	push	{lr}
 8000eea:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_MspInit+0x8c>)
 8000eee:	699a      	ldr	r2, [r3, #24]
 8000ef0:	f042 0201 	orr.w	r2, r2, #1
 8000ef4:	619a      	str	r2, [r3, #24]
 8000ef6:	699a      	ldr	r2, [r3, #24]
 8000ef8:	f002 0201 	and.w	r2, r2, #1
 8000efc:	9200      	str	r2, [sp, #0]
 8000efe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	69da      	ldr	r2, [r3, #28]
 8000f02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f06:	61da      	str	r2, [r3, #28]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
 8000f14:	f000 fc22 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	f06f 000b 	mvn.w	r0, #11
 8000f20:	f000 fc2e 	bl	8001780 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	4611      	mov	r1, r2
 8000f28:	f06f 000a 	mvn.w	r0, #10
 8000f2c:	f000 fc28 	bl	8001780 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	4611      	mov	r1, r2
 8000f34:	f06f 0009 	mvn.w	r0, #9
 8000f38:	f000 fc22 	bl	8001780 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4611      	mov	r1, r2
 8000f40:	f06f 0004 	mvn.w	r0, #4
 8000f44:	f000 fc1c 	bl	8001780 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	f06f 0003 	mvn.w	r0, #3
 8000f50:	f000 fc16 	bl	8001780 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	4611      	mov	r1, r2
 8000f58:	f06f 0001 	mvn.w	r0, #1
 8000f5c:	f000 fc10 	bl	8001780 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	4611      	mov	r1, r2
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 fc0a 	bl	8001780 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	b003      	add	sp, #12
 8000f6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000f78:	4770      	bx	lr

08000f7a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler>

08000f7c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler>

08000f7e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler>

08000f80 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler>

08000f82 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000f88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f89f 	bl	80010cc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000f8e:	f000 fc5b 	bl	8001848 <HAL_SYSTICK_IRQHandler>
 8000f92:	bd08      	pop	{r3, pc}

08000f94 <USB_LP_CAN_RX0_IRQHandler>:
/* please refer to the startup file (startup_stm32f3xx.s).                    */
/******************************************************************************/


void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000f94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f96:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <USB_LP_CAN_RX0_IRQHandler+0xc>)
 8000f98:	f000 fab3 	bl	8001502 <HAL_CAN_IRQHandler>
 8000f9c:	bd08      	pop	{r3, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000040 	.word	0x20000040

08000fa4 <CAN_RX1_IRQHandler>:
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
void CAN_RX1_IRQHandler(void)
{
 8000fa4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000fa6:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <CAN_RX1_IRQHandler+0xc>)
 8000fa8:	f000 faab 	bl	8001502 <HAL_CAN_IRQHandler>
 8000fac:	bd08      	pop	{r3, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000040 	.word	0x20000040

08000fb4 <TIM2_IRQHandler>:
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
void TIM2_IRQHandler(void)
{
 8000fb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <TIM2_IRQHandler+0xc>)
 8000fb8:	f001 fafd 	bl	80025b6 <HAL_TIM_IRQHandler>
 8000fbc:	bd08      	pop	{r3, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000964 	.word	0x20000964

08000fc4 <TIM1_TRG_COM_TIM17_IRQHandler>:
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000fc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000fc8:	f001 faf5 	bl	80025b6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000fce:	f001 faf2 	bl	80025b6 <HAL_TIM_IRQHandler>
 8000fd2:	bd08      	pop	{r3, pc}
 8000fd4:	20000924 	.word	0x20000924
 8000fd8:	200008e4 	.word	0x200008e4

08000fdc <TIM1_UP_TIM16_IRQHandler>:
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fe0:	f001 fae9 	bl	80025b6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000fe6:	f001 fae6 	bl	80025b6 <HAL_TIM_IRQHandler>
 8000fea:	bd08      	pop	{r3, pc}
 8000fec:	20000924 	.word	0x20000924
 8000ff0:	200009a4 	.word	0x200009a4

08000ff4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4915      	ldr	r1, [pc, #84]	; (800104c <SystemInit+0x58>)
 8000ff6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000ffa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <SystemInit+0x5c>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800100c:	6858      	ldr	r0, [r3, #4]
 800100e:	4a11      	ldr	r2, [pc, #68]	; (8001054 <SystemInit+0x60>)
 8001010:	4002      	ands	r2, r0
 8001012:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800101a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800101e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001026:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800102e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001032:	f022 020f 	bic.w	r2, r2, #15
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001038:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <SystemInit+0x64>)
 800103c:	4002      	ands	r2, r0
 800103e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001044:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001048:	608b      	str	r3, [r1, #8]
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00
 8001050:	40021000 	.word	0x40021000
 8001054:	f87fc00c 	.word	0xf87fc00c
 8001058:	ff00fccc 	.word	0xff00fccc

0800105c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b510      	push	{r4, lr}
 800105e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_InitTick+0x40>)
 8001062:	7818      	ldrb	r0, [r3, #0]
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	fbb3 f3f0 	udiv	r3, r3, r0
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <HAL_InitTick+0x44>)
 800106e:	6810      	ldr	r0, [r2, #0]
 8001070:	fbb0 f0f3 	udiv	r0, r0, r3
 8001074:	f000 fbc2 	bl	80017fc <HAL_SYSTICK_Config>
 8001078:	b968      	cbnz	r0, 8001096 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	2c0f      	cmp	r4, #15
 800107c:	d901      	bls.n	8001082 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800107e:	2001      	movs	r0, #1
  }
   /* Return function status */
  return HAL_OK;
}
 8001080:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001082:	2200      	movs	r2, #0
 8001084:	4621      	mov	r1, r4
 8001086:	f04f 30ff 	mov.w	r0, #4294967295
 800108a:	f000 fb79 	bl	8001780 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_InitTick+0x48>)
 8001090:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001092:	2000      	movs	r0, #0
 8001094:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
 8001098:	bd10      	pop	{r4, pc}
 800109a:	bf00      	nop
 800109c:	2000000c 	.word	0x2000000c
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000010 	.word	0x20000010

080010a8 <HAL_Init>:
{
 80010a8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_Init+0x20>)
 80010ac:	6813      	ldr	r3, [r2, #0]
 80010ae:	f043 0310 	orr.w	r3, r3, #16
 80010b2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 fb51 	bl	800175c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff ffce 	bl	800105c <HAL_InitTick>
  HAL_MspInit();
 80010c0:	f7ff ff12 	bl	8000ee8 <HAL_MspInit>
}
 80010c4:	2000      	movs	r0, #0
 80010c6:	bd08      	pop	{r3, pc}
 80010c8:	40022000 	.word	0x40022000

080010cc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010cc:	4a03      	ldr	r2, [pc, #12]	; (80010dc <HAL_IncTick+0x10>)
 80010ce:	6811      	ldr	r1, [r2, #0]
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_IncTick+0x14>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	440b      	add	r3, r1
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200009f4 	.word	0x200009f4
 80010e0:	2000000c 	.word	0x2000000c

080010e4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80010e4:	4b01      	ldr	r3, [pc, #4]	; (80010ec <HAL_GetTick+0x8>)
 80010e6:	6818      	ldr	r0, [r3, #0]
}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200009f4 	.word	0x200009f4

080010f0 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010f0:	2800      	cmp	r0, #0
 80010f2:	f000 80a1 	beq.w	8001238 <HAL_CAN_Init+0x148>
{
 80010f6:	b538      	push	{r3, r4, r5, lr}
 80010f8:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80010fa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80010fe:	b1d3      	cbz	r3, 8001136 <HAL_CAN_Init+0x46>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001100:	6822      	ldr	r2, [r4, #0]
 8001102:	6813      	ldr	r3, [r2, #0]
 8001104:	f023 0302 	bic.w	r3, r3, #2
 8001108:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800110a:	f7ff ffeb 	bl	80010e4 <HAL_GetTick>
 800110e:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	f012 0f02 	tst.w	r2, #2
 8001118:	d010      	beq.n	800113c <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800111a:	f7ff ffe3 	bl	80010e4 <HAL_GetTick>
 800111e:	1b40      	subs	r0, r0, r5
 8001120:	280a      	cmp	r0, #10
 8001122:	d9f5      	bls.n	8001110 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112a:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800112c:	2305      	movs	r3, #5
 800112e:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001136:	f7ff f8c7 	bl	80002c8 <HAL_CAN_MspInit>
 800113a:	e7e1      	b.n	8001100 <HAL_CAN_Init+0x10>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f042 0201 	orr.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001144:	f7ff ffce 	bl	80010e4 <HAL_GetTick>
 8001148:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	f012 0f01 	tst.w	r2, #1
 8001152:	d10d      	bne.n	8001170 <HAL_CAN_Init+0x80>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001154:	f7ff ffc6 	bl	80010e4 <HAL_GetTick>
 8001158:	1b40      	subs	r0, r0, r5
 800115a:	280a      	cmp	r0, #10
 800115c:	d9f5      	bls.n	800114a <HAL_CAN_Init+0x5a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800115e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001166:	2305      	movs	r3, #5
 8001168:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800116c:	2001      	movs	r0, #1
 800116e:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001170:	7e22      	ldrb	r2, [r4, #24]
 8001172:	2a01      	cmp	r2, #1
 8001174:	d03d      	beq.n	80011f2 <HAL_CAN_Init+0x102>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800117e:	7e63      	ldrb	r3, [r4, #25]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d03b      	beq.n	80011fc <HAL_CAN_Init+0x10c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001184:	6822      	ldr	r2, [r4, #0]
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800118c:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800118e:	7ea3      	ldrb	r3, [r4, #26]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d039      	beq.n	8001208 <HAL_CAN_Init+0x118>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001194:	6822      	ldr	r2, [r4, #0]
 8001196:	6813      	ldr	r3, [r2, #0]
 8001198:	f023 0320 	bic.w	r3, r3, #32
 800119c:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800119e:	7ee3      	ldrb	r3, [r4, #27]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d037      	beq.n	8001214 <HAL_CAN_Init+0x124>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011a4:	6822      	ldr	r2, [r4, #0]
 80011a6:	6813      	ldr	r3, [r2, #0]
 80011a8:	f043 0310 	orr.w	r3, r3, #16
 80011ac:	6013      	str	r3, [r2, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011ae:	7f23      	ldrb	r3, [r4, #28]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d035      	beq.n	8001220 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011b4:	6822      	ldr	r2, [r4, #0]
 80011b6:	6813      	ldr	r3, [r2, #0]
 80011b8:	f023 0308 	bic.w	r3, r3, #8
 80011bc:	6013      	str	r3, [r2, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011be:	7f63      	ldrb	r3, [r4, #29]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d033      	beq.n	800122c <HAL_CAN_Init+0x13c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011c4:	6822      	ldr	r2, [r4, #0]
 80011c6:	6813      	ldr	r3, [r2, #0]
 80011c8:	f023 0304 	bic.w	r3, r3, #4
 80011cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011ce:	6821      	ldr	r1, [r4, #0]
 80011d0:	68a3      	ldr	r3, [r4, #8]
 80011d2:	68e2      	ldr	r2, [r4, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	6922      	ldr	r2, [r4, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	6962      	ldr	r2, [r4, #20]
 80011dc:	4313      	orrs	r3, r2
 80011de:	6862      	ldr	r2, [r4, #4]
 80011e0:	3a01      	subs	r2, #1
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61cb      	str	r3, [r1, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011e6:	2000      	movs	r0, #0
 80011e8:	6260      	str	r0, [r4, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011ea:	2301      	movs	r3, #1
 80011ec:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80011f0:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e7c0      	b.n	800117e <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011fc:	6822      	ldr	r2, [r4, #0]
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e7c2      	b.n	800118e <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001208:	6822      	ldr	r2, [r4, #0]
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e7c4      	b.n	800119e <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001214:	6822      	ldr	r2, [r4, #0]
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f023 0310 	bic.w	r3, r3, #16
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e7c6      	b.n	80011ae <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001220:	6822      	ldr	r2, [r4, #0]
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e7c8      	b.n	80011be <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800122c:	6822      	ldr	r2, [r4, #0]
 800122e:	6813      	ldr	r3, [r2, #0]
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e7ca      	b.n	80011ce <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8001238:	2001      	movs	r0, #1
 800123a:	4770      	bx	lr

0800123c <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800123c:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800123e:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001242:	3b01      	subs	r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d905      	bls.n	8001256 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800124a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001252:	2001      	movs	r0, #1
 8001254:	4770      	bx	lr
{
 8001256:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001258:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001264:	694b      	ldr	r3, [r1, #20]
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	2001      	movs	r0, #1
 800126c:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001270:	f8d2 421c 	ldr.w	r4, [r2, #540]	; 0x21c
 8001274:	43d8      	mvns	r0, r3
 8001276:	4004      	ands	r4, r0
 8001278:	f8c2 421c 	str.w	r4, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800127c:	69cc      	ldr	r4, [r1, #28]
 800127e:	b9ac      	cbnz	r4, 80012ac <HAL_CAN_ConfigFilter+0x70>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001280:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
 8001284:	4004      	ands	r4, r0
 8001286:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800128a:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800128c:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800128e:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001290:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001294:	3448      	adds	r4, #72	; 0x48
 8001296:	f842 5034 	str.w	r5, [r2, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800129a:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800129c:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800129e:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012a0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a4:	3448      	adds	r4, #72	; 0x48
 80012a6:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 80012aa:	6065      	str	r5, [r4, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012ac:	69cc      	ldr	r4, [r1, #28]
 80012ae:	2c01      	cmp	r4, #1
 80012b0:	d019      	beq.n	80012e6 <HAL_CAN_ConfigFilter+0xaa>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012b2:	698c      	ldr	r4, [r1, #24]
 80012b4:	bb74      	cbnz	r4, 8001314 <HAL_CAN_ConfigFilter+0xd8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012b6:	f8d2 4204 	ldr.w	r4, [r2, #516]	; 0x204
 80012ba:	4004      	ands	r4, r0
 80012bc:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012c0:	690c      	ldr	r4, [r1, #16]
 80012c2:	bb6c      	cbnz	r4, 8001320 <HAL_CAN_ConfigFilter+0xe4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012c4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80012c8:	4020      	ands	r0, r4
 80012ca:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012ce:	6a09      	ldr	r1, [r1, #32]
 80012d0:	2901      	cmp	r1, #1
 80012d2:	d02b      	beq.n	800132c <HAL_CAN_ConfigFilter+0xf0>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012d4:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 80012e0:	2000      	movs	r0, #0
  }
}
 80012e2:	bc70      	pop	{r4, r5, r6}
 80012e4:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012e6:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
 80012ea:	431c      	orrs	r4, r3
 80012ec:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012f0:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012f2:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012f4:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012f6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012fa:	3448      	adds	r4, #72	; 0x48
 80012fc:	f842 5034 	str.w	r5, [r2, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001300:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001302:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001304:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001306:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800130a:	3448      	adds	r4, #72	; 0x48
 800130c:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8001310:	6065      	str	r5, [r4, #4]
 8001312:	e7ce      	b.n	80012b2 <HAL_CAN_ConfigFilter+0x76>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001314:	f8d2 4204 	ldr.w	r4, [r2, #516]	; 0x204
 8001318:	431c      	orrs	r4, r3
 800131a:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
 800131e:	e7cf      	b.n	80012c0 <HAL_CAN_ConfigFilter+0x84>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001320:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8001324:	4318      	orrs	r0, r3
 8001326:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 800132a:	e7d0      	b.n	80012ce <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800132c:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8001330:	430b      	orrs	r3, r1
 8001332:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8001336:	e7cd      	b.n	80012d4 <HAL_CAN_ConfigFilter+0x98>

08001338 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001338:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800133a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d005      	beq.n	8001350 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001344:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800134a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800134c:	2001      	movs	r0, #1
  }
}
 800134e:	bd38      	pop	{r3, r4, r5, pc}
 8001350:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001352:	2302      	movs	r3, #2
 8001354:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001358:	6802      	ldr	r2, [r0, #0]
 800135a:	6813      	ldr	r3, [r2, #0]
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001362:	f7ff febf 	bl	80010e4 <HAL_GetTick>
 8001366:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f013 0f01 	tst.w	r3, #1
 8001370:	d00d      	beq.n	800138e <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001372:	f7ff feb7 	bl	80010e4 <HAL_GetTick>
 8001376:	1b40      	subs	r0, r0, r5
 8001378:	280a      	cmp	r0, #10
 800137a:	d9f5      	bls.n	8001368 <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800137c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800137e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001382:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001384:	2305      	movs	r3, #5
 8001386:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
 800138c:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800138e:	2000      	movs	r0, #0
 8001390:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 8001392:	bd38      	pop	{r3, r4, r5, pc}

08001394 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001394:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001396:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800139a:	3c01      	subs	r4, #1
 800139c:	b2e4      	uxtb	r4, r4
 800139e:	2c01      	cmp	r4, #1
 80013a0:	d906      	bls.n	80013b0 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
  }
}
 80013ac:	bc30      	pop	{r4, r5}
 80013ae:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013b0:	2900      	cmp	r1, #0
 80013b2:	d16f      	bne.n	8001494 <HAL_CAN_GetRxMessage+0x100>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013b4:	6804      	ldr	r4, [r0, #0]
 80013b6:	68e4      	ldr	r4, [r4, #12]
 80013b8:	f014 0f03 	tst.w	r4, #3
 80013bc:	d064      	beq.n	8001488 <HAL_CAN_GetRxMessage+0xf4>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013be:	6805      	ldr	r5, [r0, #0]
 80013c0:	f101 041b 	add.w	r4, r1, #27
 80013c4:	0124      	lsls	r4, r4, #4
 80013c6:	592c      	ldr	r4, [r5, r4]
 80013c8:	f004 0404 	and.w	r4, r4, #4
 80013cc:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013ce:	2c00      	cmp	r4, #0
 80013d0:	d16b      	bne.n	80014aa <HAL_CAN_GetRxMessage+0x116>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013d2:	6805      	ldr	r5, [r0, #0]
 80013d4:	f101 041b 	add.w	r4, r1, #27
 80013d8:	0124      	lsls	r4, r4, #4
 80013da:	592c      	ldr	r4, [r5, r4]
 80013dc:	0d64      	lsrs	r4, r4, #21
 80013de:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80013e0:	6805      	ldr	r5, [r0, #0]
 80013e2:	f101 041b 	add.w	r4, r1, #27
 80013e6:	0124      	lsls	r4, r4, #4
 80013e8:	592d      	ldr	r5, [r5, r4]
 80013ea:	f3c5 0540 	ubfx	r5, r5, #1, #1
 80013ee:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013f0:	6805      	ldr	r5, [r0, #0]
 80013f2:	4425      	add	r5, r4
 80013f4:	686d      	ldr	r5, [r5, #4]
 80013f6:	f005 050f 	and.w	r5, r5, #15
 80013fa:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013fc:	6805      	ldr	r5, [r0, #0]
 80013fe:	4425      	add	r5, r4
 8001400:	686d      	ldr	r5, [r5, #4]
 8001402:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8001406:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001408:	6805      	ldr	r5, [r0, #0]
 800140a:	442c      	add	r4, r5
 800140c:	6864      	ldr	r4, [r4, #4]
 800140e:	0c24      	lsrs	r4, r4, #16
 8001410:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001412:	6804      	ldr	r4, [r0, #0]
 8001414:	010a      	lsls	r2, r1, #4
 8001416:	4414      	add	r4, r2
 8001418:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800141c:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800141e:	6804      	ldr	r4, [r0, #0]
 8001420:	4414      	add	r4, r2
 8001422:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8001426:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800142a:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800142c:	6804      	ldr	r4, [r0, #0]
 800142e:	4414      	add	r4, r2
 8001430:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8001434:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8001438:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800143a:	6804      	ldr	r4, [r0, #0]
 800143c:	4414      	add	r4, r2
 800143e:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8001442:	0e24      	lsrs	r4, r4, #24
 8001444:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001446:	6804      	ldr	r4, [r0, #0]
 8001448:	4414      	add	r4, r2
 800144a:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800144e:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001450:	6804      	ldr	r4, [r0, #0]
 8001452:	4414      	add	r4, r2
 8001454:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8001458:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800145c:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800145e:	6804      	ldr	r4, [r0, #0]
 8001460:	4414      	add	r4, r2
 8001462:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8001466:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800146a:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800146c:	6804      	ldr	r4, [r0, #0]
 800146e:	4422      	add	r2, r4
 8001470:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001474:	0e12      	lsrs	r2, r2, #24
 8001476:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001478:	b9f9      	cbnz	r1, 80014ba <HAL_CAN_GetRxMessage+0x126>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800147a:	6802      	ldr	r2, [r0, #0]
 800147c:	68d3      	ldr	r3, [r2, #12]
 800147e:	f043 0320 	orr.w	r3, r3, #32
 8001482:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001484:	2000      	movs	r0, #0
 8001486:	e791      	b.n	80013ac <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001488:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800148a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148e:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8001490:	2001      	movs	r0, #1
 8001492:	e78b      	b.n	80013ac <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001494:	6804      	ldr	r4, [r0, #0]
 8001496:	6924      	ldr	r4, [r4, #16]
 8001498:	f014 0f03 	tst.w	r4, #3
 800149c:	d18f      	bne.n	80013be <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800149e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a4:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
 80014a8:	e780      	b.n	80013ac <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014aa:	6805      	ldr	r5, [r0, #0]
 80014ac:	f101 041b 	add.w	r4, r1, #27
 80014b0:	0124      	lsls	r4, r4, #4
 80014b2:	592c      	ldr	r4, [r5, r4]
 80014b4:	08e4      	lsrs	r4, r4, #3
 80014b6:	6054      	str	r4, [r2, #4]
 80014b8:	e792      	b.n	80013e0 <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014ba:	6802      	ldr	r2, [r0, #0]
 80014bc:	6913      	ldr	r3, [r2, #16]
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 80014c4:	2000      	movs	r0, #0
 80014c6:	e771      	b.n	80013ac <HAL_CAN_GetRxMessage+0x18>

080014c8 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80014c8:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d905      	bls.n	80014e0 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014da:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
  }
}
 80014de:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014e0:	6802      	ldr	r2, [r0, #0]
 80014e2:	6953      	ldr	r3, [r2, #20]
 80014e4:	4319      	orrs	r1, r3
 80014e6:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80014e8:	2000      	movs	r0, #0
 80014ea:	4770      	bx	lr

080014ec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014ec:	4770      	bx	lr

080014ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014ee:	4770      	bx	lr

080014f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014f0:	4770      	bx	lr

080014f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014f2:	4770      	bx	lr

080014f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014f4:	4770      	bx	lr

080014f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014f6:	4770      	bx	lr

080014f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014f8:	4770      	bx	lr

080014fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014fa:	4770      	bx	lr

080014fc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	4770      	bx	lr

080014fe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014fe:	4770      	bx	lr

08001500 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001500:	4770      	bx	lr

08001502 <HAL_CAN_IRQHandler>:
{
 8001502:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001506:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001508:	6803      	ldr	r3, [r0, #0]
 800150a:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800150c:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800150e:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001510:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001514:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001518:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800151c:	f014 0f01 	tst.w	r4, #1
 8001520:	d05a      	beq.n	80015d8 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001522:	f016 0f01 	tst.w	r6, #1
 8001526:	d017      	beq.n	8001558 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001528:	2201      	movs	r2, #1
 800152a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800152c:	f016 0f02 	tst.w	r6, #2
 8001530:	d108      	bne.n	8001544 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001532:	f016 0f04 	tst.w	r6, #4
 8001536:	d130      	bne.n	800159a <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001538:	f016 0f08 	tst.w	r6, #8
 800153c:	d007      	beq.n	800154e <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800153e:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 8001542:	e00b      	b.n	800155c <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001544:	f7ff ffd2 	bl	80014ec <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001548:	f04f 0b00 	mov.w	fp, #0
 800154c:	e006      	b.n	800155c <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800154e:	f7ff ffd0 	bl	80014f2 <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001552:	f04f 0b00 	mov.w	fp, #0
 8001556:	e001      	b.n	800155c <HAL_CAN_IRQHandler+0x5a>
 8001558:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800155c:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001560:	d00b      	beq.n	800157a <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001562:	682b      	ldr	r3, [r5, #0]
 8001564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001568:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800156a:	f416 7f00 	tst.w	r6, #512	; 0x200
 800156e:	d117      	bne.n	80015a0 <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001570:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001574:	d018      	beq.n	80015a8 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001576:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800157a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800157e:	d02d      	beq.n	80015dc <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001586:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001588:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800158c:	d116      	bne.n	80015bc <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800158e:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8001592:	d017      	beq.n	80015c4 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001594:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8001598:	e020      	b.n	80015dc <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800159a:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 800159e:	e7dd      	b.n	800155c <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015a0:	4628      	mov	r0, r5
 80015a2:	f7ff ffa4 	bl	80014ee <HAL_CAN_TxMailbox1CompleteCallback>
 80015a6:	e7e8      	b.n	800157a <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015a8:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80015ac:	d002      	beq.n	80015b4 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015ae:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 80015b2:	e7e2      	b.n	800157a <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015b4:	4628      	mov	r0, r5
 80015b6:	f7ff ff9d 	bl	80014f4 <HAL_CAN_TxMailbox1AbortCallback>
 80015ba:	e7de      	b.n	800157a <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015bc:	4628      	mov	r0, r5
 80015be:	f7ff ff97 	bl	80014f0 <HAL_CAN_TxMailbox2CompleteCallback>
 80015c2:	e00b      	b.n	80015dc <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015c4:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 80015c8:	d002      	beq.n	80015d0 <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015ca:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 80015ce:	e005      	b.n	80015dc <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015d0:	4628      	mov	r0, r5
 80015d2:	f7ff ff90 	bl	80014f6 <HAL_CAN_TxMailbox2AbortCallback>
 80015d6:	e001      	b.n	80015dc <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015d8:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015dc:	f014 0f08 	tst.w	r4, #8
 80015e0:	d007      	beq.n	80015f2 <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015e2:	f019 0f10 	tst.w	r9, #16
 80015e6:	d004      	beq.n	80015f2 <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015e8:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015ec:	682b      	ldr	r3, [r5, #0]
 80015ee:	2210      	movs	r2, #16
 80015f0:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015f2:	f014 0f04 	tst.w	r4, #4
 80015f6:	d002      	beq.n	80015fe <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015f8:	f019 0f08 	tst.w	r9, #8
 80015fc:	d160      	bne.n	80016c0 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015fe:	f014 0f02 	tst.w	r4, #2
 8001602:	d004      	beq.n	800160e <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f013 0f03 	tst.w	r3, #3
 800160c:	d15f      	bne.n	80016ce <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800160e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001612:	d007      	beq.n	8001624 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001614:	f018 0f10 	tst.w	r8, #16
 8001618:	d004      	beq.n	8001624 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800161a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	2210      	movs	r2, #16
 8001622:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001624:	f014 0f20 	tst.w	r4, #32
 8001628:	d002      	beq.n	8001630 <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800162a:	f018 0f08 	tst.w	r8, #8
 800162e:	d152      	bne.n	80016d6 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001630:	f014 0f10 	tst.w	r4, #16
 8001634:	d004      	beq.n	8001640 <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	f013 0f03 	tst.w	r3, #3
 800163e:	d151      	bne.n	80016e4 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001640:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001644:	d002      	beq.n	800164c <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001646:	f017 0f10 	tst.w	r7, #16
 800164a:	d14f      	bne.n	80016ec <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800164c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001650:	d002      	beq.n	8001658 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001652:	f017 0f08 	tst.w	r7, #8
 8001656:	d150      	bne.n	80016fa <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001658:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800165c:	d067      	beq.n	800172e <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800165e:	f017 0f04 	tst.w	r7, #4
 8001662:	d061      	beq.n	8001728 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001664:	f414 7f80 	tst.w	r4, #256	; 0x100
 8001668:	d004      	beq.n	8001674 <HAL_CAN_IRQHandler+0x172>
 800166a:	f01a 0f01 	tst.w	sl, #1
 800166e:	d001      	beq.n	8001674 <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 8001670:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001674:	f414 7f00 	tst.w	r4, #512	; 0x200
 8001678:	d004      	beq.n	8001684 <HAL_CAN_IRQHandler+0x182>
 800167a:	f01a 0f02 	tst.w	sl, #2
 800167e:	d001      	beq.n	8001684 <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 8001680:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001684:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8001688:	d004      	beq.n	8001694 <HAL_CAN_IRQHandler+0x192>
 800168a:	f01a 0f04 	tst.w	sl, #4
 800168e:	d001      	beq.n	8001694 <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 8001690:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001694:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8001698:	d046      	beq.n	8001728 <HAL_CAN_IRQHandler+0x226>
 800169a:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 800169e:	d043      	beq.n	8001728 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 80016a0:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80016a4:	d048      	beq.n	8001738 <HAL_CAN_IRQHandler+0x236>
 80016a6:	d92f      	bls.n	8001708 <HAL_CAN_IRQHandler+0x206>
 80016a8:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 80016ac:	d047      	beq.n	800173e <HAL_CAN_IRQHandler+0x23c>
 80016ae:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 80016b2:	d047      	beq.n	8001744 <HAL_CAN_IRQHandler+0x242>
 80016b4:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80016b8:	d131      	bne.n	800171e <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 80016ba:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 80016be:	e02e      	b.n	800171e <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	2208      	movs	r2, #8
 80016c4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016c6:	4628      	mov	r0, r5
 80016c8:	f7ff ff16 	bl	80014f8 <HAL_CAN_RxFifo0FullCallback>
 80016cc:	e797      	b.n	80015fe <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016ce:	4628      	mov	r0, r5
 80016d0:	f7fe fe64 	bl	800039c <HAL_CAN_RxFifo0MsgPendingCallback>
 80016d4:	e79b      	b.n	800160e <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	2208      	movs	r2, #8
 80016da:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016dc:	4628      	mov	r0, r5
 80016de:	f7ff ff0c 	bl	80014fa <HAL_CAN_RxFifo1FullCallback>
 80016e2:	e7a5      	b.n	8001630 <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016e4:	4628      	mov	r0, r5
 80016e6:	f7fe fe67 	bl	80003b8 <HAL_CAN_RxFifo1MsgPendingCallback>
 80016ea:	e7a9      	b.n	8001640 <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016ec:	682b      	ldr	r3, [r5, #0]
 80016ee:	2210      	movs	r2, #16
 80016f0:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80016f2:	4628      	mov	r0, r5
 80016f4:	f7ff ff02 	bl	80014fc <HAL_CAN_SleepCallback>
 80016f8:	e7a8      	b.n	800164c <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016fa:	682b      	ldr	r3, [r5, #0]
 80016fc:	2208      	movs	r2, #8
 80016fe:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001700:	4628      	mov	r0, r5
 8001702:	f7ff fefc 	bl	80014fe <HAL_CAN_WakeUpFromRxMsgCallback>
 8001706:	e7a7      	b.n	8001658 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 8001708:	f1ba 0f10 	cmp.w	sl, #16
 800170c:	d005      	beq.n	800171a <HAL_CAN_IRQHandler+0x218>
 800170e:	f1ba 0f20 	cmp.w	sl, #32
 8001712:	d104      	bne.n	800171e <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001714:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8001718:	e001      	b.n	800171e <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 800171a:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800171e:	682a      	ldr	r2, [r5, #0]
 8001720:	6993      	ldr	r3, [r2, #24]
 8001722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001726:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	2204      	movs	r2, #4
 800172c:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800172e:	f1bb 0f00 	cmp.w	fp, #0
 8001732:	d10a      	bne.n	800174a <HAL_CAN_IRQHandler+0x248>
 8001734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 8001738:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 800173c:	e7ef      	b.n	800171e <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 800173e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 8001742:	e7ec      	b.n	800171e <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001744:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 8001748:	e7e9      	b.n	800171e <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 800174a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800174c:	ea4b 0303 	orr.w	r3, fp, r3
 8001750:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001752:	4628      	mov	r0, r5
 8001754:	f7ff fed4 	bl	8001500 <HAL_CAN_ErrorCallback>
}
 8001758:	e7ec      	b.n	8001734 <HAL_CAN_IRQHandler+0x232>
	...

0800175c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800175e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001760:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001764:	041b      	lsls	r3, r3, #16
 8001766:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001768:	0200      	lsls	r0, r0, #8
 800176a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001770:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001774:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001778:	60d0      	str	r0, [r2, #12]
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_NVIC_SetPriority+0x5c>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178a:	f1c3 0407 	rsb	r4, r3, #7
 800178e:	2c04      	cmp	r4, #4
 8001790:	bf28      	it	cs
 8001792:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001794:	1d1d      	adds	r5, r3, #4
 8001796:	2d06      	cmp	r5, #6
 8001798:	d917      	bls.n	80017ca <HAL_NVIC_SetPriority+0x4a>
 800179a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	2501      	movs	r5, #1
 800179e:	fa05 f404 	lsl.w	r4, r5, r4
 80017a2:	3c01      	subs	r4, #1
 80017a4:	4021      	ands	r1, r4
 80017a6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	fa05 f303 	lsl.w	r3, r5, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80017b2:	2800      	cmp	r0, #0
 80017b4:	db0b      	blt.n	80017ce <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	0109      	lsls	r1, r1, #4
 80017b8:	b2c9      	uxtb	r1, r1
 80017ba:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017be:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017c2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017c6:	bc30      	pop	{r4, r5}
 80017c8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	2300      	movs	r3, #0
 80017cc:	e7e6      	b.n	800179c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	f000 000f 	and.w	r0, r0, #15
 80017d2:	0109      	lsls	r1, r1, #4
 80017d4:	b2c9      	uxtb	r1, r1
 80017d6:	4b02      	ldr	r3, [pc, #8]	; (80017e0 <HAL_NVIC_SetPriority+0x60>)
 80017d8:	5419      	strb	r1, [r3, r0]
 80017da:	e7f4      	b.n	80017c6 <HAL_NVIC_SetPriority+0x46>
 80017dc:	e000ed00 	.word	0xe000ed00
 80017e0:	e000ed14 	.word	0xe000ed14

080017e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017e4:	0942      	lsrs	r2, r0, #5
 80017e6:	f000 001f 	and.w	r0, r0, #31
 80017ea:	2301      	movs	r3, #1
 80017ec:	fa03 f000 	lsl.w	r0, r3, r0
 80017f0:	4b01      	ldr	r3, [pc, #4]	; (80017f8 <HAL_NVIC_EnableIRQ+0x14>)
 80017f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100

080017fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	3801      	subs	r0, #1
 80017fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001802:	d20a      	bcs.n	800181a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_SYSTICK_Config+0x24>)
 8001806:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	21f0      	movs	r1, #240	; 0xf0
 800180a:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_SYSTICK_Config+0x28>)
 800180c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	2000      	movs	r0, #0
 8001812:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001828:	2804      	cmp	r0, #4
 800182a:	d005      	beq.n	8001838 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800182c:	4a05      	ldr	r2, [pc, #20]	; (8001844 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800182e:	6813      	ldr	r3, [r2, #0]
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001838:	4a02      	ldr	r2, [pc, #8]	; (8001844 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800183a:	6813      	ldr	r3, [r2, #0]
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4770      	bx	lr
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001848:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800184a:	f7ff fb47 	bl	8000edc <HAL_SYSTICK_Callback>
 800184e:	bd08      	pop	{r3, pc}

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001852:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001854:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001856:	e088      	b.n	800196a <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001858:	08de      	lsrs	r6, r3, #3
 800185a:	3608      	adds	r6, #8
 800185c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001860:	f003 0e07 	and.w	lr, r3, #7
 8001864:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001868:	270f      	movs	r7, #15
 800186a:	fa07 f70e 	lsl.w	r7, r7, lr
 800186e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001872:	690f      	ldr	r7, [r1, #16]
 8001874:	fa07 f70e 	lsl.w	r7, r7, lr
 8001878:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 800187a:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 800187e:	e083      	b.n	8001988 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001880:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001882:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001884:	68cf      	ldr	r7, [r1, #12]
 8001886:	fa07 f70e 	lsl.w	r7, r7, lr
 800188a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800188c:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001890:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001894:	684e      	ldr	r6, [r1, #4]
 8001896:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800189a:	409e      	lsls	r6, r3
 800189c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800189e:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018a0:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a2:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a4:	688d      	ldr	r5, [r1, #8]
 80018a6:	fa05 f50e 	lsl.w	r5, r5, lr
 80018aa:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80018ac:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ae:	684c      	ldr	r4, [r1, #4]
 80018b0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80018b4:	d058      	beq.n	8001968 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4c47      	ldr	r4, [pc, #284]	; (80019d4 <HAL_GPIO_Init+0x184>)
 80018b8:	69a5      	ldr	r5, [r4, #24]
 80018ba:	f045 0501 	orr.w	r5, r5, #1
 80018be:	61a5      	str	r5, [r4, #24]
 80018c0:	69a4      	ldr	r4, [r4, #24]
 80018c2:	f004 0401 	and.w	r4, r4, #1
 80018c6:	9401      	str	r4, [sp, #4]
 80018c8:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 80018ca:	089d      	lsrs	r5, r3, #2
 80018cc:	1cae      	adds	r6, r5, #2
 80018ce:	4c42      	ldr	r4, [pc, #264]	; (80019d8 <HAL_GPIO_Init+0x188>)
 80018d0:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80018d4:	f003 0603 	and.w	r6, r3, #3
 80018d8:	00b6      	lsls	r6, r6, #2
 80018da:	270f      	movs	r7, #15
 80018dc:	40b7      	lsls	r7, r6
 80018de:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018e2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80018e6:	d06c      	beq.n	80019c2 <HAL_GPIO_Init+0x172>
 80018e8:	4f3c      	ldr	r7, [pc, #240]	; (80019dc <HAL_GPIO_Init+0x18c>)
 80018ea:	42b8      	cmp	r0, r7
 80018ec:	d06b      	beq.n	80019c6 <HAL_GPIO_Init+0x176>
 80018ee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80018f2:	42b8      	cmp	r0, r7
 80018f4:	d069      	beq.n	80019ca <HAL_GPIO_Init+0x17a>
 80018f6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80018fa:	42b8      	cmp	r0, r7
 80018fc:	d05f      	beq.n	80019be <HAL_GPIO_Init+0x16e>
 80018fe:	2705      	movs	r7, #5
 8001900:	fa07 f606 	lsl.w	r6, r7, r6
 8001904:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001906:	3502      	adds	r5, #2
 8001908:	4e33      	ldr	r6, [pc, #204]	; (80019d8 <HAL_GPIO_Init+0x188>)
 800190a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800190e:	4c34      	ldr	r4, [pc, #208]	; (80019e0 <HAL_GPIO_Init+0x190>)
 8001910:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001912:	43d4      	mvns	r4, r2
 8001914:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001918:	684f      	ldr	r7, [r1, #4]
 800191a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800191e:	d001      	beq.n	8001924 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8001920:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001924:	4d2e      	ldr	r5, [pc, #184]	; (80019e0 <HAL_GPIO_Init+0x190>)
 8001926:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001928:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 800192a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192e:	684f      	ldr	r7, [r1, #4]
 8001930:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001934:	d001      	beq.n	800193a <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8001936:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 800193a:	4d29      	ldr	r5, [pc, #164]	; (80019e0 <HAL_GPIO_Init+0x190>)
 800193c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001940:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001944:	684f      	ldr	r7, [r1, #4]
 8001946:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800194a:	d001      	beq.n	8001950 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 800194c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001950:	4d23      	ldr	r5, [pc, #140]	; (80019e0 <HAL_GPIO_Init+0x190>)
 8001952:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001954:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001956:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	684e      	ldr	r6, [r1, #4]
 800195a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800195e:	d001      	beq.n	8001964 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8001960:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001964:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <HAL_GPIO_Init+0x190>)
 8001966:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001968:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800196a:	680a      	ldr	r2, [r1, #0]
 800196c:	fa32 f403 	lsrs.w	r4, r2, r3
 8001970:	d02d      	beq.n	80019ce <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001972:	2501      	movs	r5, #1
 8001974:	409d      	lsls	r5, r3
    if(iocurrent)
 8001976:	402a      	ands	r2, r5
 8001978:	d0f6      	beq.n	8001968 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800197a:	684c      	ldr	r4, [r1, #4]
 800197c:	2c02      	cmp	r4, #2
 800197e:	f43f af6b 	beq.w	8001858 <HAL_GPIO_Init+0x8>
 8001982:	2c12      	cmp	r4, #18
 8001984:	f43f af68 	beq.w	8001858 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001988:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800198e:	2403      	movs	r4, #3
 8001990:	fa04 f40e 	lsl.w	r4, r4, lr
 8001994:	43e4      	mvns	r4, r4
 8001996:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001998:	684f      	ldr	r7, [r1, #4]
 800199a:	f007 0703 	and.w	r7, r7, #3
 800199e:	fa07 f70e 	lsl.w	r7, r7, lr
 80019a2:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80019a4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a6:	684e      	ldr	r6, [r1, #4]
 80019a8:	1e77      	subs	r7, r6, #1
 80019aa:	2f01      	cmp	r7, #1
 80019ac:	f67f af68 	bls.w	8001880 <HAL_GPIO_Init+0x30>
 80019b0:	2e11      	cmp	r6, #17
 80019b2:	f43f af65 	beq.w	8001880 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b6:	2e12      	cmp	r6, #18
 80019b8:	f47f af72 	bne.w	80018a0 <HAL_GPIO_Init+0x50>
 80019bc:	e760      	b.n	8001880 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019be:	2703      	movs	r7, #3
 80019c0:	e79e      	b.n	8001900 <HAL_GPIO_Init+0xb0>
 80019c2:	2700      	movs	r7, #0
 80019c4:	e79c      	b.n	8001900 <HAL_GPIO_Init+0xb0>
 80019c6:	2701      	movs	r7, #1
 80019c8:	e79a      	b.n	8001900 <HAL_GPIO_Init+0xb0>
 80019ca:	2702      	movs	r7, #2
 80019cc:	e798      	b.n	8001900 <HAL_GPIO_Init+0xb0>
  }
}
 80019ce:	b003      	add	sp, #12
 80019d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010000 	.word	0x40010000
 80019dc:	48000400 	.word	0x48000400
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e4:	6903      	ldr	r3, [r0, #16]
 80019e6:	4219      	tst	r1, r3
 80019e8:	d101      	bne.n	80019ee <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ea:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80019ec:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80019ee:	2001      	movs	r0, #1
 80019f0:	4770      	bx	lr

080019f2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f2:	b90a      	cbnz	r2, 80019f8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019f4:	6281      	str	r1, [r0, #40]	; 0x28
 80019f6:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f8:	6181      	str	r1, [r0, #24]
 80019fa:	4770      	bx	lr

080019fc <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019fc:	2800      	cmp	r0, #0
 80019fe:	f000 82f3 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x5ec>
{
 8001a02:	b570      	push	{r4, r5, r6, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a08:	6803      	ldr	r3, [r0, #0]
 8001a0a:	f013 0f01 	tst.w	r3, #1
 8001a0e:	d063      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a10:	4bb4      	ldr	r3, [pc, #720]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d046      	beq.n	8001aaa <HAL_RCC_OscConfig+0xae>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a1c:	4bb1      	ldr	r3, [pc, #708]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d03b      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xa4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a28:	6863      	ldr	r3, [r4, #4]
 8001a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2e:	f000 808e 	beq.w	8001b4e <HAL_RCC_OscConfig+0x152>
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 8091 	bne.w	8001b5a <HAL_RCC_OscConfig+0x15e>
 8001a38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a3c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a4e:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a50:	4aa4      	ldr	r2, [pc, #656]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001a52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a54:	f023 030f 	bic.w	r3, r3, #15
 8001a58:	68a1      	ldr	r1, [r4, #8]
 8001a5a:	430b      	orrs	r3, r1
 8001a5c:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5e:	6863      	ldr	r3, [r4, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8094 	beq.w	8001b8e <HAL_RCC_OscConfig+0x192>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff fb3d 	bl	80010e4 <HAL_GetTick>
 8001a6a:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a70:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a74:	4b9b      	ldr	r3, [pc, #620]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001a76:	6819      	ldr	r1, [r3, #0]
 8001a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	2201      	movs	r2, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	4219      	tst	r1, r3
 8001a90:	d122      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xdc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a92:	f7ff fb27 	bl	80010e4 <HAL_GetTick>
 8001a96:	1b40      	subs	r0, r0, r5
 8001a98:	2864      	cmp	r0, #100	; 0x64
 8001a9a:	d9e7      	bls.n	8001a6c <HAL_RCC_OscConfig+0x70>
          {
            return HAL_TIMEOUT;
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	e2b2      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa0:	4b90      	ldr	r3, [pc, #576]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001aa8:	d0be      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2c>
 8001aaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aae:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab2:	4b8c      	ldr	r3, [pc, #560]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	4219      	tst	r1, r3
 8001ace:	d003      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xdc>
 8001ad0:	6863      	ldr	r3, [r4, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 828a 	beq.w	8001fec <HAL_RCC_OscConfig+0x5f0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	f013 0f02 	tst.w	r3, #2
 8001ade:	f000 809c 	beq.w	8001c1a <HAL_RCC_OscConfig+0x21e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ae2:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f013 0f0c 	tst.w	r3, #12
 8001aea:	d072      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1d6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aec:	4b7d      	ldr	r3, [pc, #500]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d067      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x1cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af8:	6923      	ldr	r3, [r4, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80cb 	beq.w	8001c96 <HAL_RCC_OscConfig+0x29a>
 8001b00:	2201      	movs	r2, #1
 8001b02:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fae5 	bl	80010e4 <HAL_GetTick>
 8001b1a:	4605      	mov	r5, r0
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b22:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	2302      	movs	r3, #2
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	2201      	movs	r2, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	4219      	tst	r1, r3
 8001b3c:	f040 809c 	bne.w	8001c78 <HAL_RCC_OscConfig+0x27c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff fad0 	bl	80010e4 <HAL_GetTick>
 8001b44:	1b40      	subs	r0, r0, r5
 8001b46:	2802      	cmp	r0, #2
 8001b48:	d9e8      	bls.n	8001b1c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	e25b      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4e:	4a65      	ldr	r2, [pc, #404]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e77a      	b.n	8001a50 <HAL_RCC_OscConfig+0x54>
 8001b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5e:	d009      	beq.n	8001b74 <HAL_RCC_OscConfig+0x178>
 8001b60:	4b60      	ldr	r3, [pc, #384]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e76d      	b.n	8001a50 <HAL_RCC_OscConfig+0x54>
 8001b74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b78:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e760      	b.n	8001a50 <HAL_RCC_OscConfig+0x54>
        tickstart = HAL_GetTick();
 8001b8e:	f7ff faa9 	bl	80010e4 <HAL_GetTick>
 8001b92:	4605      	mov	r5, r0
 8001b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b98:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9c:	4b51      	ldr	r3, [pc, #324]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	4219      	tst	r1, r3
 8001bb8:	d08e      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xdc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bba:	f7ff fa93 	bl	80010e4 <HAL_GetTick>
 8001bbe:	1b40      	subs	r0, r0, r5
 8001bc0:	2864      	cmp	r0, #100	; 0x64
 8001bc2:	d9e7      	bls.n	8001b94 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	e21e      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bc8:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001bd0:	d192      	bne.n	8001af8 <HAL_RCC_OscConfig+0xfc>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd8:	4b42      	ldr	r3, [pc, #264]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	2302      	movs	r3, #2
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2201      	movs	r2, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	4219      	tst	r1, r3
 8001bf2:	d004      	beq.n	8001bfe <HAL_RCC_OscConfig+0x202>
 8001bf4:	6923      	ldr	r3, [r4, #16]
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x202>
        return HAL_ERROR;
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	e203      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4839      	ldr	r0, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001c00:	6803      	ldr	r3, [r0, #0]
 8001c02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c06:	6961      	ldr	r1, [r4, #20]
 8001c08:	22f8      	movs	r2, #248	; 0xf8
 8001c0a:	fa92 f2a2 	rbit	r2, r2
 8001c0e:	fab2 f282 	clz	r2, r2
 8001c12:	fa01 f202 	lsl.w	r2, r1, r2
 8001c16:	4313      	orrs	r3, r2
 8001c18:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	f013 0f08 	tst.w	r3, #8
 8001c20:	f000 808c 	beq.w	8001d3c <HAL_RCC_OscConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c24:	69a3      	ldr	r3, [r4, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d060      	beq.n	8001cec <HAL_RCC_OscConfig+0x2f0>
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c30:	fab2 f282 	clz	r2, r2
 8001c34:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <HAL_RCC_OscConfig+0x2ec>)
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fa52 	bl	80010e4 <HAL_GetTick>
 8001c40:	4605      	mov	r5, r0
 8001c42:	2302      	movs	r3, #2
 8001c44:	fa93 f2a3 	rbit	r2, r3
 8001c48:	fa93 f2a3 	rbit	r2, r3
 8001c4c:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001c52:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	2201      	movs	r2, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	4219      	tst	r1, r3
 8001c68:	d168      	bne.n	8001d3c <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fa3b 	bl	80010e4 <HAL_GetTick>
 8001c6e:	1b40      	subs	r0, r0, r5
 8001c70:	2802      	cmp	r0, #2
 8001c72:	d9e6      	bls.n	8001c42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c74:	2003      	movs	r0, #3
 8001c76:	e1c6      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	481a      	ldr	r0, [pc, #104]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001c7a:	6803      	ldr	r3, [r0, #0]
 8001c7c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c80:	6961      	ldr	r1, [r4, #20]
 8001c82:	22f8      	movs	r2, #248	; 0xf8
 8001c84:	fa92 f2a2 	rbit	r2, r2
 8001c88:	fab2 f282 	clz	r2, r2
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4313      	orrs	r3, r2
 8001c92:	6003      	str	r3, [r0, #0]
 8001c94:	e7c1      	b.n	8001c1a <HAL_RCC_OscConfig+0x21e>
 8001c96:	2301      	movs	r3, #1
 8001c98:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cae:	f7ff fa19 	bl	80010e4 <HAL_GetTick>
 8001cb2:	4605      	mov	r5, r0
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_RCC_OscConfig+0x2e8>)
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	2201      	movs	r2, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	4219      	tst	r1, r3
 8001cd4:	d0a1      	beq.n	8001c1a <HAL_RCC_OscConfig+0x21e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fa05 	bl	80010e4 <HAL_GetTick>
 8001cda:	1b40      	subs	r0, r0, r5
 8001cdc:	2802      	cmp	r0, #2
 8001cde:	d9e9      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x2b8>
            return HAL_TIMEOUT;
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	e190      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	10908120 	.word	0x10908120
 8001cec:	2201      	movs	r2, #1
 8001cee:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf2:	fab2 f282 	clz	r2, r2
 8001cf6:	4bc0      	ldr	r3, [pc, #768]	; (8001ff8 <HAL_RCC_OscConfig+0x5fc>)
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7ff f9f0 	bl	80010e4 <HAL_GetTick>
 8001d04:	4605      	mov	r5, r0
 8001d06:	2302      	movs	r3, #2
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d14:	4ab9      	ldr	r2, [pc, #740]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001d16:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	2201      	movs	r2, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	4219      	tst	r1, r3
 8001d2c:	d006      	beq.n	8001d3c <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f9d9 	bl	80010e4 <HAL_GetTick>
 8001d32:	1b40      	subs	r0, r0, r5
 8001d34:	2802      	cmp	r0, #2
 8001d36:	d9e6      	bls.n	8001d06 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d38:	2003      	movs	r0, #3
 8001d3a:	e164      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	f013 0f04 	tst.w	r3, #4
 8001d42:	f000 80b3 	beq.w	8001eac <HAL_RCC_OscConfig+0x4b0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d46:	4bad      	ldr	r3, [pc, #692]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001d4e:	d126      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4baa      	ldr	r3, [pc, #680]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001d52:	69da      	ldr	r2, [r3, #28]
 8001d54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d58:	61da      	str	r2, [r3, #28]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d64:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4ba6      	ldr	r3, [pc, #664]	; (8002000 <HAL_RCC_OscConfig+0x604>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d6e:	d018      	beq.n	8001da2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d70:	68e3      	ldr	r3, [r4, #12]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d029      	beq.n	8001dca <HAL_RCC_OscConfig+0x3ce>
 8001d76:	bb73      	cbnz	r3, 8001dd6 <HAL_RCC_OscConfig+0x3da>
 8001d78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d7c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d80:	6a1a      	ldr	r2, [r3, #32]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	621a      	str	r2, [r3, #32]
 8001d88:	6a1a      	ldr	r2, [r3, #32]
 8001d8a:	f022 0204 	bic.w	r2, r2, #4
 8001d8e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d90:	68e3      	ldr	r3, [r4, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d05d      	beq.n	8001e52 <HAL_RCC_OscConfig+0x456>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7ff f9a5 	bl	80010e4 <HAL_GetTick>
 8001d9a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	e047      	b.n	8001e2e <HAL_RCC_OscConfig+0x432>
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2500      	movs	r5, #0
 8001da0:	e7e1      	b.n	8001d66 <HAL_RCC_OscConfig+0x36a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da2:	4a97      	ldr	r2, [pc, #604]	; (8002000 <HAL_RCC_OscConfig+0x604>)
 8001da4:	6813      	ldr	r3, [r2, #0]
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001dac:	f7ff f99a 	bl	80010e4 <HAL_GetTick>
 8001db0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b93      	ldr	r3, [pc, #588]	; (8002000 <HAL_RCC_OscConfig+0x604>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001dba:	d1d9      	bne.n	8001d70 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbc:	f7ff f992 	bl	80010e4 <HAL_GetTick>
 8001dc0:	1b80      	subs	r0, r0, r6
 8001dc2:	2864      	cmp	r0, #100	; 0x64
 8001dc4:	d9f5      	bls.n	8001db2 <HAL_RCC_OscConfig+0x3b6>
          return HAL_TIMEOUT;
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	e11d      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dca:	4a8c      	ldr	r2, [pc, #560]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001dcc:	6a13      	ldr	r3, [r2, #32]
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	e7dc      	b.n	8001d90 <HAL_RCC_OscConfig+0x394>
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d009      	beq.n	8001dee <HAL_RCC_OscConfig+0x3f2>
 8001dda:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001ddc:	6a1a      	ldr	r2, [r3, #32]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	621a      	str	r2, [r3, #32]
 8001de4:	6a1a      	ldr	r2, [r3, #32]
 8001de6:	f022 0204 	bic.w	r2, r2, #4
 8001dea:	621a      	str	r2, [r3, #32]
 8001dec:	e7d0      	b.n	8001d90 <HAL_RCC_OscConfig+0x394>
 8001dee:	4b83      	ldr	r3, [pc, #524]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001df0:	6a1a      	ldr	r2, [r3, #32]
 8001df2:	f042 0204 	orr.w	r2, r2, #4
 8001df6:	621a      	str	r2, [r3, #32]
 8001df8:	6a1a      	ldr	r2, [r3, #32]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	621a      	str	r2, [r3, #32]
 8001e00:	e7c6      	b.n	8001d90 <HAL_RCC_OscConfig+0x394>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e02:	4b7e      	ldr	r3, [pc, #504]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001e04:	6a19      	ldr	r1, [r3, #32]
 8001e06:	2302      	movs	r3, #2
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	2201      	movs	r2, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	4219      	tst	r1, r3
 8001e1c:	d145      	bne.n	8001eaa <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff f961 	bl	80010e4 <HAL_GetTick>
 8001e22:	1b80      	subs	r0, r0, r6
 8001e24:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e28:	4298      	cmp	r0, r3
 8001e2a:	f200 80e1 	bhi.w	8001ff0 <HAL_RCC_OscConfig+0x5f4>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	fa93 f2a3 	rbit	r2, r3
 8001e34:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d0dd      	beq.n	8001e02 <HAL_RCC_OscConfig+0x406>
 8001e46:	2302      	movs	r3, #2
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	4b6b      	ldr	r3, [pc, #428]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001e4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e50:	e7d9      	b.n	8001e06 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff f947 	bl	80010e4 <HAL_GetTick>
 8001e56:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	e015      	b.n	8001e86 <HAL_RCC_OscConfig+0x48a>
 8001e5a:	4b68      	ldr	r3, [pc, #416]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001e5c:	6a19      	ldr	r1, [r3, #32]
 8001e5e:	2302      	movs	r3, #2
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	4219      	tst	r1, r3
 8001e74:	d019      	beq.n	8001eaa <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7ff f935 	bl	80010e4 <HAL_GetTick>
 8001e7a:	1b80      	subs	r0, r0, r6
 8001e7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e80:	4298      	cmp	r0, r3
 8001e82:	f200 80b7 	bhi.w	8001ff4 <HAL_RCC_OscConfig+0x5f8>
 8001e86:	2302      	movs	r3, #2
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d0dd      	beq.n	8001e5a <HAL_RCC_OscConfig+0x45e>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	4b55      	ldr	r3, [pc, #340]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001ea6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ea8:	e7d9      	b.n	8001e5e <HAL_RCC_OscConfig+0x462>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eaa:	bbb5      	cbnz	r5, 8001f1a <HAL_RCC_OscConfig+0x51e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eac:	69e3      	ldr	r3, [r4, #28]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80a8 	beq.w	8002004 <HAL_RCC_OscConfig+0x608>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb4:	4a51      	ldr	r2, [pc, #324]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001eb6:	6852      	ldr	r2, [r2, #4]
 8001eb8:	f002 020c 	and.w	r2, r2, #12
 8001ebc:	2a08      	cmp	r2, #8
 8001ebe:	f000 80a4 	beq.w	800200a <HAL_RCC_OscConfig+0x60e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d02f      	beq.n	8001f26 <HAL_RCC_OscConfig+0x52a>
 8001ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eca:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ed6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f900 	bl	80010e4 <HAL_GetTick>
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eea:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	4b43      	ldr	r3, [pc, #268]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2201      	movs	r2, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	4219      	tst	r1, r3
 8001f0a:	d06b      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x5e8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff f8ea 	bl	80010e4 <HAL_GetTick>
 8001f10:	1b00      	subs	r0, r0, r4
 8001f12:	2802      	cmp	r0, #2
 8001f14:	d9e7      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x4ea>
          {
            return HAL_TIMEOUT;
 8001f16:	2003      	movs	r0, #3
 8001f18:	e075      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1a:	4a38      	ldr	r2, [pc, #224]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001f1c:	69d3      	ldr	r3, [r2, #28]
 8001f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f22:	61d3      	str	r3, [r2, #28]
 8001f24:	e7c2      	b.n	8001eac <HAL_RCC_OscConfig+0x4b0>
 8001f26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f2a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f40:	f7ff f8d0 	bl	80010e4 <HAL_GetTick>
 8001f44:	4605      	mov	r5, r0
 8001f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4e:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	2201      	movs	r2, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	4219      	tst	r1, r3
 8001f6a:	d006      	beq.n	8001f7a <HAL_RCC_OscConfig+0x57e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff f8ba 	bl	80010e4 <HAL_GetTick>
 8001f70:	1b40      	subs	r0, r0, r5
 8001f72:	2802      	cmp	r0, #2
 8001f74:	d9e7      	bls.n	8001f46 <HAL_RCC_OscConfig+0x54a>
            return HAL_TIMEOUT;
 8001f76:	2003      	movs	r0, #3
 8001f78:	e045      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7a:	4920      	ldr	r1, [pc, #128]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001f7c:	684b      	ldr	r3, [r1, #4]
 8001f7e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001f82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f84:	6a20      	ldr	r0, [r4, #32]
 8001f86:	4302      	orrs	r2, r0
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
 8001f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f90:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fa6:	f7ff f89d 	bl	80010e4 <HAL_GetTick>
 8001faa:	4604      	mov	r4, r0
 8001fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fb0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_RCC_OscConfig+0x600>)
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	2201      	movs	r2, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	4219      	tst	r1, r3
 8001fd0:	d106      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5e4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff f887 	bl	80010e4 <HAL_GetTick>
 8001fd6:	1b00      	subs	r0, r0, r4
 8001fd8:	2802      	cmp	r0, #2
 8001fda:	d9e7      	bls.n	8001fac <HAL_RCC_OscConfig+0x5b0>
            return HAL_TIMEOUT;
 8001fdc:	2003      	movs	r0, #3
 8001fde:	e012      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e010      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	e00e      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
    return HAL_ERROR;
 8001fe8:	2001      	movs	r0, #1
 8001fea:	4770      	bx	lr
        return HAL_ERROR;
 8001fec:	2001      	movs	r0, #1
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
          return HAL_TIMEOUT;
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
          return HAL_TIMEOUT;
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	e006      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
 8001ff8:	10908120 	.word	0x10908120
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007000 	.word	0x40007000
  return HAL_OK;
 8002004:	2000      	movs	r0, #0
}
 8002006:	b002      	add	sp, #8
 8002008:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800200a:	2001      	movs	r0, #1
 800200c:	e7fb      	b.n	8002006 <HAL_RCC_OscConfig+0x60a>
 800200e:	bf00      	nop

08002010 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCC_GetSysClockFreq+0x5c>)
 8002012:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002014:	f003 020c 	and.w	r2, r3, #12
 8002018:	2a08      	cmp	r2, #8
 800201a:	d124      	bne.n	8002066 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800201c:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002020:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002024:	fa92 f2a2 	rbit	r2, r2
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	fa21 f202 	lsr.w	r2, r1, r2
 8002030:	490f      	ldr	r1, [pc, #60]	; (8002070 <HAL_RCC_GetSysClockFreq+0x60>)
 8002032:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <HAL_RCC_GetSysClockFreq+0x5c>)
 8002036:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002038:	f002 020f 	and.w	r2, r2, #15
 800203c:	210f      	movs	r1, #15
 800203e:	fa91 f1a1 	rbit	r1, r1
 8002042:	fab1 f181 	clz	r1, r1
 8002046:	40ca      	lsrs	r2, r1
 8002048:	490a      	ldr	r1, [pc, #40]	; (8002074 <HAL_RCC_GetSysClockFreq+0x64>)
 800204a:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800204c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002050:	d103      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_GetSysClockFreq+0x68>)
 8002054:	fb03 f000 	mul.w	r0, r3, r0
 8002058:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_RCC_GetSysClockFreq+0x6c>)
 800205c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002060:	fb03 f000 	mul.w	r0, r3, r0
 8002064:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	0800316c 	.word	0x0800316c
 8002074:	0800317c 	.word	0x0800317c
 8002078:	003d0900 	.word	0x003d0900
 800207c:	007a1200 	.word	0x007a1200

08002080 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002080:	2800      	cmp	r0, #0
 8002082:	f000 80c0 	beq.w	8002206 <HAL_RCC_ClockConfig+0x186>
{
 8002086:	b570      	push	{r4, r5, r6, lr}
 8002088:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <HAL_RCC_ClockConfig+0x190>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	428b      	cmp	r3, r1
 8002094:	d20c      	bcs.n	80020b0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4a5e      	ldr	r2, [pc, #376]	; (8002210 <HAL_RCC_ClockConfig+0x190>)
 8002098:	6813      	ldr	r3, [r2, #0]
 800209a:	f023 0307 	bic.w	r3, r3, #7
 800209e:	430b      	orrs	r3, r1
 80020a0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	6813      	ldr	r3, [r2, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4299      	cmp	r1, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80020ac:	2001      	movs	r0, #1
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	f013 0f02 	tst.w	r3, #2
 80020b6:	d006      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4a56      	ldr	r2, [pc, #344]	; (8002214 <HAL_RCC_ClockConfig+0x194>)
 80020ba:	6853      	ldr	r3, [r2, #4]
 80020bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c0:	68a0      	ldr	r0, [r4, #8]
 80020c2:	4303      	orrs	r3, r0
 80020c4:	6053      	str	r3, [r2, #4]
 80020c6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	f013 0f01 	tst.w	r3, #1
 80020ce:	d05a      	beq.n	8002186 <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d0:	6863      	ldr	r3, [r4, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d02d      	beq.n	8002132 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d040      	beq.n	800215c <HAL_RCC_ClockConfig+0xdc>
 80020da:	2202      	movs	r2, #2
 80020dc:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <HAL_RCC_ClockConfig+0x194>)
 80020e2:	6810      	ldr	r0, [r2, #0]
 80020e4:	2202      	movs	r2, #2
 80020e6:	fa92 f2a2 	rbit	r2, r2
 80020ea:	fab2 f282 	clz	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4210      	tst	r0, r2
 80020fa:	f000 8086 	beq.w	800220a <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	4945      	ldr	r1, [pc, #276]	; (8002214 <HAL_RCC_ClockConfig+0x194>)
 8002100:	684a      	ldr	r2, [r1, #4]
 8002102:	f022 0203 	bic.w	r2, r2, #3
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800210a:	f7fe ffeb 	bl	80010e4 <HAL_GetTick>
 800210e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002110:	4b40      	ldr	r3, [pc, #256]	; (8002214 <HAL_RCC_ClockConfig+0x194>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	6862      	ldr	r2, [r4, #4]
 800211a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800211e:	d032      	beq.n	8002186 <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe ffe0 	bl	80010e4 <HAL_GetTick>
 8002124:	1b80      	subs	r0, r0, r6
 8002126:	f241 3388 	movw	r3, #5000	; 0x1388
 800212a:	4298      	cmp	r0, r3
 800212c:	d9f0      	bls.n	8002110 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800212e:	2003      	movs	r0, #3
 8002130:	bd70      	pop	{r4, r5, r6, pc}
 8002132:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002136:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4a36      	ldr	r2, [pc, #216]	; (8002214 <HAL_RCC_ClockConfig+0x194>)
 800213c:	6810      	ldr	r0, [r2, #0]
 800213e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002142:	fa92 f2a2 	rbit	r2, r2
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	f002 021f 	and.w	r2, r2, #31
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f202 	lsl.w	r2, r1, r2
 8002154:	4210      	tst	r0, r2
 8002156:	d1d2      	bne.n	80020fe <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8002158:	2001      	movs	r0, #1
 800215a:	bd70      	pop	{r4, r5, r6, pc}
 800215c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002160:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002164:	4a2b      	ldr	r2, [pc, #172]	; (8002214 <HAL_RCC_ClockConfig+0x194>)
 8002166:	6810      	ldr	r0, [r2, #0]
 8002168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	fab2 f282 	clz	r2, r2
 8002174:	f002 021f 	and.w	r2, r2, #31
 8002178:	2101      	movs	r1, #1
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	4210      	tst	r0, r2
 8002180:	d1bd      	bne.n	80020fe <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
 8002184:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <HAL_RCC_ClockConfig+0x190>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	429d      	cmp	r5, r3
 8002190:	d20c      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_RCC_ClockConfig+0x190>)
 8002194:	6813      	ldr	r3, [r2, #0]
 8002196:	f023 0307 	bic.w	r3, r3, #7
 800219a:	432b      	orrs	r3, r5
 800219c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	429d      	cmp	r5, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
}
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	f013 0f04 	tst.w	r3, #4
 80021b2:	d006      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4a17      	ldr	r2, [pc, #92]	; (8002214 <HAL_RCC_ClockConfig+0x194>)
 80021b6:	6853      	ldr	r3, [r2, #4]
 80021b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021bc:	68e1      	ldr	r1, [r4, #12]
 80021be:	430b      	orrs	r3, r1
 80021c0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	f013 0f08 	tst.w	r3, #8
 80021c8:	d007      	beq.n	80021da <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <HAL_RCC_ClockConfig+0x194>)
 80021cc:	6853      	ldr	r3, [r2, #4]
 80021ce:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021d2:	6921      	ldr	r1, [r4, #16]
 80021d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021d8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021da:	f7ff ff19 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_ClockConfig+0x194>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e6:	22f0      	movs	r2, #240	; 0xf0
 80021e8:	fa92 f2a2 	rbit	r2, r2
 80021ec:	fab2 f282 	clz	r2, r2
 80021f0:	40d3      	lsrs	r3, r2
 80021f2:	4a09      	ldr	r2, [pc, #36]	; (8002218 <HAL_RCC_ClockConfig+0x198>)
 80021f4:	5cd3      	ldrb	r3, [r2, r3]
 80021f6:	40d8      	lsrs	r0, r3
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_RCC_ClockConfig+0x19c>)
 80021fa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7fe ff2d 	bl	800105c <HAL_InitTick>
  return HAL_OK;
 8002202:	2000      	movs	r0, #0
 8002204:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002206:	2001      	movs	r0, #1
 8002208:	4770      	bx	lr
        return HAL_ERROR;
 800220a:	2001      	movs	r0, #1
 800220c:	bd70      	pop	{r4, r5, r6, pc}
 800220e:	bf00      	nop
 8002210:	40022000 	.word	0x40022000
 8002214:	40021000 	.word	0x40021000
 8002218:	0800315c 	.word	0x0800315c
 800221c:	20000008 	.word	0x20000008

08002220 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002220:	4b01      	ldr	r3, [pc, #4]	; (8002228 <HAL_RCC_GetHCLKFreq+0x8>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000008 	.word	0x20000008

0800222c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800222e:	b083      	sub	sp, #12
 8002230:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002232:	6803      	ldr	r3, [r0, #0]
 8002234:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002238:	d048      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002242:	f040 80bf 	bne.w	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800224e:	61da      	str	r2, [r3, #28]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800225a:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b80      	ldr	r3, [pc, #512]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002264:	f000 80b0 	beq.w	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002268:	4b7c      	ldr	r3, [pc, #496]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002270:	d022      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8002272:	6862      	ldr	r2, [r4, #4]
 8002274:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002278:	4293      	cmp	r3, r2
 800227a:	d01d      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800227c:	4877      	ldr	r0, [pc, #476]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800227e:	6a01      	ldr	r1, [r0, #32]
 8002280:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002288:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	4f74      	ldr	r7, [pc, #464]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002292:	443a      	add	r2, r7
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	f04f 0e01 	mov.w	lr, #1
 800229a:	f8c2 e000 	str.w	lr, [r2]
 800229e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	443b      	add	r3, r7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ae:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022b0:	f011 0f01 	tst.w	r1, #1
 80022b4:	f040 809d 	bne.w	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ba:	6a13      	ldr	r3, [r2, #32]
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	6861      	ldr	r1, [r4, #4]
 80022c2:	430b      	orrs	r3, r1
 80022c4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022c6:	2d00      	cmp	r5, #0
 80022c8:	f040 80bf 	bne.w	800244a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	f013 0f01 	tst.w	r3, #1
 80022d2:	d006      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022d4:	4a61      	ldr	r2, [pc, #388]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022d8:	f023 0303 	bic.w	r3, r3, #3
 80022dc:	68a1      	ldr	r1, [r4, #8]
 80022de:	430b      	orrs	r3, r1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f013 0f20 	tst.w	r3, #32
 80022e8:	d006      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ea:	4a5c      	ldr	r2, [pc, #368]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022ee:	f023 0310 	bic.w	r3, r3, #16
 80022f2:	68e1      	ldr	r1, [r4, #12]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022fe:	d006      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002300:	4a56      	ldr	r2, [pc, #344]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002302:	6853      	ldr	r3, [r2, #4]
 8002304:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002308:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800230a:	430b      	orrs	r3, r1
 800230c:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002314:	d006      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002316:	4a51      	ldr	r2, [pc, #324]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002318:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800231a:	f023 0320 	bic.w	r3, r3, #32
 800231e:	6921      	ldr	r1, [r4, #16]
 8002320:	430b      	orrs	r3, r1
 8002322:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800232a:	d006      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800232c:	4a4b      	ldr	r2, [pc, #300]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800232e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002334:	6961      	ldr	r1, [r4, #20]
 8002336:	430b      	orrs	r3, r1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002340:	d006      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002342:	4a46      	ldr	r2, [pc, #280]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002344:	6853      	ldr	r3, [r2, #4]
 8002346:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800234a:	69e1      	ldr	r1, [r4, #28]
 800234c:	430b      	orrs	r3, r1
 800234e:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002356:	d006      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002358:	4a40      	ldr	r2, [pc, #256]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800235a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800235c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002360:	69a1      	ldr	r1, [r4, #24]
 8002362:	430b      	orrs	r3, r1
 8002364:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800236c:	d006      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800236e:	4a3b      	ldr	r2, [pc, #236]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002370:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002376:	6a21      	ldr	r1, [r4, #32]
 8002378:	430b      	orrs	r3, r1
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002382:	d006      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002384:	4a35      	ldr	r2, [pc, #212]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002386:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800238c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800238e:	430b      	orrs	r3, r1
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002398:	d006      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800239a:	4a30      	ldr	r2, [pc, #192]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800239c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800239e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80023ae:	d053      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80023b0:	4a2a      	ldr	r2, [pc, #168]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80023ba:	430b      	orrs	r3, r1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80023be:	2000      	movs	r0, #0
}
 80023c0:	b003      	add	sp, #12
 80023c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 80023c4:	2500      	movs	r5, #0
 80023c6:	e749      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c8:	4a25      	ldr	r2, [pc, #148]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80023ca:	6813      	ldr	r3, [r2, #0]
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80023d2:	f7fe fe87 	bl	80010e4 <HAL_GetTick>
 80023d6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	4b21      	ldr	r3, [pc, #132]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023e0:	f47f af42 	bne.w	8002268 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e4:	f7fe fe7e 	bl	80010e4 <HAL_GetTick>
 80023e8:	1b80      	subs	r0, r0, r6
 80023ea:	2864      	cmp	r0, #100	; 0x64
 80023ec:	d9f4      	bls.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
          return HAL_TIMEOUT;
 80023ee:	2003      	movs	r0, #3
 80023f0:	e7e6      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
        tickstart = HAL_GetTick();
 80023f2:	f7fe fe77 	bl	80010e4 <HAL_GetTick>
 80023f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e015      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023fc:	6a19      	ldr	r1, [r3, #32]
 80023fe:	2302      	movs	r3, #2
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2201      	movs	r2, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	4219      	tst	r1, r3
 8002414:	f47f af50 	bne.w	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7fe fe64 	bl	80010e4 <HAL_GetTick>
 800241c:	1b80      	subs	r0, r0, r6
 800241e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002422:	4298      	cmp	r0, r3
 8002424:	d816      	bhi.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002426:	2302      	movs	r3, #2
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d0dd      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800243e:	2302      	movs	r3, #2
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002446:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002448:	e7d9      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800244a:	69d3      	ldr	r3, [r2, #28]
 800244c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	e73b      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8002454:	2003      	movs	r0, #3
 8002456:	e7b3      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
  return HAL_OK;
 8002458:	2000      	movs	r0, #0
 800245a:	e7b1      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
 8002464:	10908100 	.word	0x10908100

08002468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002468:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800246a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800246c:	6a04      	ldr	r4, [r0, #32]
 800246e:	f024 0401 	bic.w	r4, r4, #1
 8002472:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002474:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002476:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800247a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800247e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002482:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002484:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002486:	6203      	str	r3, [r0, #32]
}
 8002488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800248c:	4770      	bx	lr

0800248e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800248e:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002490:	6a04      	ldr	r4, [r0, #32]
 8002492:	f024 0410 	bic.w	r4, r4, #16
 8002496:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002498:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800249a:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800249c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80024a0:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80024a8:	031b      	lsls	r3, r3, #12
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ae:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80024b2:	0109      	lsls	r1, r1, #4
 80024b4:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 80024b8:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024ba:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024bc:	6205      	str	r5, [r0, #32]
}
 80024be:	bc30      	pop	{r4, r5}
 80024c0:	4770      	bx	lr

080024c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024c2:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024c4:	6a03      	ldr	r3, [r0, #32]
 80024c6:	f023 0310 	bic.w	r3, r3, #16
 80024ca:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024cc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80024ce:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024d0:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024d4:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80024dc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024e0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024e2:	6203      	str	r3, [r0, #32]
}
 80024e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80024ea:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024ec:	6a04      	ldr	r4, [r0, #32]
 80024ee:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80024f2:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024f4:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80024f6:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80024f8:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80024fc:	4322      	orrs	r2, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80024fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	b2db      	uxtb	r3, r3
 8002506:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002508:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800250c:	0209      	lsls	r1, r1, #8
 800250e:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8002512:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002514:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002516:	6205      	str	r5, [r0, #32]
}
 8002518:	bc30      	pop	{r4, r5}
 800251a:	4770      	bx	lr

0800251c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800251c:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800251e:	6a04      	ldr	r4, [r0, #32]
 8002520:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002524:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002526:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8002528:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800252a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800252e:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002532:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002536:	031b      	lsls	r3, r3, #12
 8002538:	b29b      	uxth	r3, r3
 800253a:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800253c:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002540:	0309      	lsls	r1, r1, #12
 8002542:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8002546:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002548:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800254a:	6205      	str	r5, [r0, #32]
}
 800254c:	bc30      	pop	{r4, r5}
 800254e:	4770      	bx	lr

08002550 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002550:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002556:	f041 0107 	orr.w	r1, r1, #7
 800255a:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800255c:	6083      	str	r3, [r0, #8]
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_IC_MspInit>:
{
 8002560:	4770      	bx	lr

08002562 <HAL_TIM_ReadCapturedValue>:
{
 8002562:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002564:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002568:	2a01      	cmp	r2, #1
 800256a:	d01e      	beq.n	80025aa <HAL_TIM_ReadCapturedValue+0x48>
 800256c:	2201      	movs	r2, #1
 800256e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 8002572:	290c      	cmp	r1, #12
 8002574:	d817      	bhi.n	80025a6 <HAL_TIM_ReadCapturedValue+0x44>
 8002576:	e8df f001 	tbb	[pc, r1]
 800257a:	1607      	.short	0x1607
 800257c:	160d1616 	.word	0x160d1616
 8002580:	16101616 	.word	0x16101616
 8002584:	1616      	.short	0x1616
 8002586:	13          	.byte	0x13
 8002587:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8002588:	6802      	ldr	r2, [r0, #0]
 800258a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(htim);  
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return tmpreg;
 8002592:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8002594:	6802      	ldr	r2, [r0, #0]
 8002596:	6b90      	ldr	r0, [r2, #56]	; 0x38
      break;
 8002598:	e7f8      	b.n	800258c <HAL_TIM_ReadCapturedValue+0x2a>
      tmpreg =   htim->Instance->CCR3;
 800259a:	6802      	ldr	r2, [r0, #0]
 800259c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
      break;
 800259e:	e7f5      	b.n	800258c <HAL_TIM_ReadCapturedValue+0x2a>
      tmpreg =   htim->Instance->CCR4;
 80025a0:	6802      	ldr	r2, [r0, #0]
 80025a2:	6c10      	ldr	r0, [r2, #64]	; 0x40
      break;
 80025a4:	e7f2      	b.n	800258c <HAL_TIM_ReadCapturedValue+0x2a>
  uint32_t tmpreg = 0U;
 80025a6:	2000      	movs	r0, #0
 80025a8:	e7f0      	b.n	800258c <HAL_TIM_ReadCapturedValue+0x2a>
  __HAL_LOCK(htim);
 80025aa:	2002      	movs	r0, #2
}
 80025ac:	4770      	bx	lr

080025ae <HAL_TIM_PeriodElapsedCallback>:
{
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIM_OC_DelayElapsedCallback>:
{
 80025b0:	4770      	bx	lr

080025b2 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 80025b2:	4770      	bx	lr

080025b4 <HAL_TIM_TriggerCallback>:
{
 80025b4:	4770      	bx	lr

080025b6 <HAL_TIM_IRQHandler>:
{
 80025b6:	b510      	push	{r4, lr}
 80025b8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025ba:	6803      	ldr	r3, [r0, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	f012 0f02 	tst.w	r2, #2
 80025c2:	d011      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	f012 0f02 	tst.w	r2, #2
 80025ca:	d00d      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025cc:	f06f 0202 	mvn.w	r2, #2
 80025d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d6:	6803      	ldr	r3, [r0, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f013 0f03 	tst.w	r3, #3
 80025de:	d079      	beq.n	80026d4 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80025e0:	f7fd fef8 	bl	80003d4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e4:	2300      	movs	r3, #0
 80025e6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	f012 0f04 	tst.w	r2, #4
 80025f0:	d012      	beq.n	8002618 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	f012 0f04 	tst.w	r2, #4
 80025f8:	d00e      	beq.n	8002618 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025fa:	f06f 0204 	mvn.w	r2, #4
 80025fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002600:	2302      	movs	r3, #2
 8002602:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f413 7f40 	tst.w	r3, #768	; 0x300
 800260c:	d068      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800260e:	4620      	mov	r0, r4
 8002610:	f7fd fee0 	bl	80003d4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002614:	2300      	movs	r3, #0
 8002616:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	f012 0f08 	tst.w	r2, #8
 8002620:	d012      	beq.n	8002648 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	f012 0f08 	tst.w	r2, #8
 8002628:	d00e      	beq.n	8002648 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800262a:	f06f 0208 	mvn.w	r2, #8
 800262e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002630:	2304      	movs	r3, #4
 8002632:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f013 0f03 	tst.w	r3, #3
 800263c:	d057      	beq.n	80026ee <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	4620      	mov	r0, r4
 8002640:	f7fd fec8 	bl	80003d4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002644:	2300      	movs	r3, #0
 8002646:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	f012 0f10 	tst.w	r2, #16
 8002650:	d012      	beq.n	8002678 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	f012 0f10 	tst.w	r2, #16
 8002658:	d00e      	beq.n	8002678 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800265a:	f06f 0210 	mvn.w	r2, #16
 800265e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002660:	2308      	movs	r3, #8
 8002662:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	f413 7f40 	tst.w	r3, #768	; 0x300
 800266c:	d046      	beq.n	80026fc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	4620      	mov	r0, r4
 8002670:	f7fd feb0 	bl	80003d4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002674:	2300      	movs	r3, #0
 8002676:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	f012 0f01 	tst.w	r2, #1
 8002680:	d003      	beq.n	800268a <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	f012 0f01 	tst.w	r2, #1
 8002688:	d13f      	bne.n	800270a <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002692:	d003      	beq.n	800269c <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	f012 0f80 	tst.w	r2, #128	; 0x80
 800269a:	d13d      	bne.n	8002718 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80026a4:	d003      	beq.n	80026ae <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026ac:	d13b      	bne.n	8002726 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026b6:	d003      	beq.n	80026c0 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026be:	d139      	bne.n	8002734 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	f012 0f20 	tst.w	r2, #32
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	f012 0f20 	tst.w	r2, #32
 80026d0:	d137      	bne.n	8002742 <HAL_TIM_IRQHandler+0x18c>
 80026d2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d4:	f7ff ff6c 	bl	80025b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff ff6a 	bl	80025b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80026de:	e781      	b.n	80025e4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7ff ff65 	bl	80025b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7ff ff63 	bl	80025b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80026ec:	e792      	b.n	8002614 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7ff ff5e 	bl	80025b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff ff5c 	bl	80025b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80026fa:	e7a3      	b.n	8002644 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff ff57 	bl	80025b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002702:	4620      	mov	r0, r4
 8002704:	f7ff ff55 	bl	80025b2 <HAL_TIM_PWM_PulseFinishedCallback>
 8002708:	e7b4      	b.n	8002674 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800270a:	f06f 0201 	mvn.w	r2, #1
 800270e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002710:	4620      	mov	r0, r4
 8002712:	f7ff ff4c 	bl	80025ae <HAL_TIM_PeriodElapsedCallback>
 8002716:	e7b8      	b.n	800268a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800271c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800271e:	4620      	mov	r0, r4
 8002720:	f000 fc9d 	bl	800305e <HAL_TIMEx_BreakCallback>
 8002724:	e7ba      	b.n	800269c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800272a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800272c:	4620      	mov	r0, r4
 800272e:	f000 fc97 	bl	8003060 <HAL_TIMEx_Break2Callback>
 8002732:	e7bc      	b.n	80026ae <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002738:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff ff3a 	bl	80025b4 <HAL_TIM_TriggerCallback>
 8002740:	e7be      	b.n	80026c0 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002742:	f06f 0220 	mvn.w	r2, #32
 8002746:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002748:	4620      	mov	r0, r4
 800274a:	f000 fc87 	bl	800305c <HAL_TIMEx_CommutationCallback>
}
 800274e:	e7c0      	b.n	80026d2 <HAL_TIM_IRQHandler+0x11c>

08002750 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002750:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <TIM_Base_SetConfig+0x80>)
 8002754:	4290      	cmp	r0, r2
 8002756:	d035      	beq.n	80027c4 <TIM_Base_SetConfig+0x74>
 8002758:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800275c:	d032      	beq.n	80027c4 <TIM_Base_SetConfig+0x74>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275e:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <TIM_Base_SetConfig+0x80>)
 8002760:	4290      	cmp	r0, r2
 8002762:	d00e      	beq.n	8002782 <TIM_Base_SetConfig+0x32>
 8002764:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002768:	d00b      	beq.n	8002782 <TIM_Base_SetConfig+0x32>
 800276a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800276e:	4290      	cmp	r0, r2
 8002770:	d007      	beq.n	8002782 <TIM_Base_SetConfig+0x32>
 8002772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002776:	4290      	cmp	r0, r2
 8002778:	d003      	beq.n	8002782 <TIM_Base_SetConfig+0x32>
 800277a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800277e:	4290      	cmp	r0, r2
 8002780:	d103      	bne.n	800278a <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	68ca      	ldr	r2, [r1, #12]
 8002788:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800278a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800278e:	694a      	ldr	r2, [r1, #20]
 8002790:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002792:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002794:	688b      	ldr	r3, [r1, #8]
 8002796:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002798:	680b      	ldr	r3, [r1, #0]
 800279a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <TIM_Base_SetConfig+0x80>)
 800279e:	4298      	cmp	r0, r3
 80027a0:	d00b      	beq.n	80027ba <TIM_Base_SetConfig+0x6a>
 80027a2:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80027a6:	4298      	cmp	r0, r3
 80027a8:	d007      	beq.n	80027ba <TIM_Base_SetConfig+0x6a>
 80027aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ae:	4298      	cmp	r0, r3
 80027b0:	d003      	beq.n	80027ba <TIM_Base_SetConfig+0x6a>
 80027b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b6:	4298      	cmp	r0, r3
 80027b8:	d101      	bne.n	80027be <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 80027ba:	690b      	ldr	r3, [r1, #16]
 80027bc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80027be:	2301      	movs	r3, #1
 80027c0:	6143      	str	r3, [r0, #20]
 80027c2:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80027c8:	684a      	ldr	r2, [r1, #4]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	e7c7      	b.n	800275e <TIM_Base_SetConfig+0xe>
 80027ce:	bf00      	nop
 80027d0:	40012c00 	.word	0x40012c00

080027d4 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80027d4:	b1a8      	cbz	r0, 8002802 <HAL_TIM_Base_Init+0x2e>
{ 
 80027d6:	b510      	push	{r4, lr}
 80027d8:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80027da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027de:	b15b      	cbz	r3, 80027f8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80027e0:	2302      	movs	r3, #2
 80027e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80027e6:	1d21      	adds	r1, r4, #4
 80027e8:	6820      	ldr	r0, [r4, #0]
 80027ea:	f7ff ffb1 	bl	8002750 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80027f4:	2000      	movs	r0, #0
 80027f6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80027f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80027fc:	f7fe f8e0 	bl	80009c0 <HAL_TIM_Base_MspInit>
 8002800:	e7ee      	b.n	80027e0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002802:	2001      	movs	r0, #1
 8002804:	4770      	bx	lr

08002806 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8002806:	b1a8      	cbz	r0, 8002834 <HAL_TIM_PWM_Init+0x2e>
{
 8002808:	b510      	push	{r4, lr}
 800280a:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800280c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002810:	b15b      	cbz	r3, 800282a <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002812:	2302      	movs	r3, #2
 8002814:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002818:	1d21      	adds	r1, r4, #4
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	f7ff ff98 	bl	8002750 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002820:	2301      	movs	r3, #1
 8002822:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002826:	2000      	movs	r0, #0
 8002828:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800282a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800282e:	f7fe f95f 	bl	8000af0 <HAL_TIM_PWM_MspInit>
 8002832:	e7ee      	b.n	8002812 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002834:	2001      	movs	r0, #1
 8002836:	4770      	bx	lr

08002838 <HAL_TIM_IC_Init>:
  if(htim == NULL)
 8002838:	b1a8      	cbz	r0, 8002866 <HAL_TIM_IC_Init+0x2e>
{
 800283a:	b510      	push	{r4, lr}
 800283c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800283e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002842:	b15b      	cbz	r3, 800285c <HAL_TIM_IC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY; 
 8002844:	2302      	movs	r3, #2
 8002846:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800284a:	1d21      	adds	r1, r4, #4
 800284c:	6820      	ldr	r0, [r4, #0]
 800284e:	f7ff ff7f 	bl	8002750 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002852:	2301      	movs	r3, #1
 8002854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002858:	2000      	movs	r0, #0
 800285a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800285c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002860:	f7ff fe7e 	bl	8002560 <HAL_TIM_IC_MspInit>
 8002864:	e7ee      	b.n	8002844 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8002866:	2001      	movs	r0, #1
 8002868:	4770      	bx	lr
	...

0800286c <TIM_OC1_SetConfig>:
{
 800286c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286e:	6a03      	ldr	r3, [r0, #32]
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002876:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8002878:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800287a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800287c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002880:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002884:	680d      	ldr	r5, [r1, #0]
 8002886:	432a      	orrs	r2, r5
  tmpccer &= ~TIM_CCER_CC1P;
 8002888:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800288c:	688d      	ldr	r5, [r1, #8]
 800288e:	432b      	orrs	r3, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002890:	4d18      	ldr	r5, [pc, #96]	; (80028f4 <TIM_OC1_SetConfig+0x88>)
 8002892:	42a8      	cmp	r0, r5
 8002894:	d027      	beq.n	80028e6 <TIM_OC1_SetConfig+0x7a>
 8002896:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800289a:	42a8      	cmp	r0, r5
 800289c:	d023      	beq.n	80028e6 <TIM_OC1_SetConfig+0x7a>
 800289e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028a2:	42a8      	cmp	r0, r5
 80028a4:	d01f      	beq.n	80028e6 <TIM_OC1_SetConfig+0x7a>
 80028a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028aa:	42a8      	cmp	r0, r5
 80028ac:	d01b      	beq.n	80028e6 <TIM_OC1_SetConfig+0x7a>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80028ae:	4d11      	ldr	r5, [pc, #68]	; (80028f4 <TIM_OC1_SetConfig+0x88>)
 80028b0:	42a8      	cmp	r0, r5
 80028b2:	d00b      	beq.n	80028cc <TIM_OC1_SetConfig+0x60>
 80028b4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80028b8:	42a8      	cmp	r0, r5
 80028ba:	d007      	beq.n	80028cc <TIM_OC1_SetConfig+0x60>
 80028bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028c0:	42a8      	cmp	r0, r5
 80028c2:	d003      	beq.n	80028cc <TIM_OC1_SetConfig+0x60>
 80028c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028c8:	42a8      	cmp	r0, r5
 80028ca:	d105      	bne.n	80028d8 <TIM_OC1_SetConfig+0x6c>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028cc:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80028d0:	694d      	ldr	r5, [r1, #20]
 80028d2:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80028d4:	698d      	ldr	r5, [r1, #24]
 80028d6:	432c      	orrs	r4, r5
  TIMx->CR2 = tmpcr2;
 80028d8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80028da:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80028dc:	684a      	ldr	r2, [r1, #4]
 80028de:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 80028e0:	6203      	str	r3, [r0, #32]
} 
 80028e2:	bc30      	pop	{r4, r5}
 80028e4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80028e6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80028ea:	68cd      	ldr	r5, [r1, #12]
 80028ec:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ee:	f023 0304 	bic.w	r3, r3, #4
 80028f2:	e7dc      	b.n	80028ae <TIM_OC1_SetConfig+0x42>
 80028f4:	40012c00 	.word	0x40012c00

080028f8 <TIM_OC2_SetConfig>:
{
 80028f8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028fa:	6a03      	ldr	r3, [r0, #32]
 80028fc:	f023 0310 	bic.w	r3, r3, #16
 8002900:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002902:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8002904:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002906:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002908:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800290c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002910:	680d      	ldr	r5, [r1, #0]
 8002912:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002916:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800291a:	688d      	ldr	r5, [r1, #8]
 800291c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002920:	4d14      	ldr	r5, [pc, #80]	; (8002974 <TIM_OC2_SetConfig+0x7c>)
 8002922:	42a8      	cmp	r0, r5
 8002924:	d01d      	beq.n	8002962 <TIM_OC2_SetConfig+0x6a>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002926:	4d13      	ldr	r5, [pc, #76]	; (8002974 <TIM_OC2_SetConfig+0x7c>)
 8002928:	42a8      	cmp	r0, r5
 800292a:	d00b      	beq.n	8002944 <TIM_OC2_SetConfig+0x4c>
 800292c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002930:	42a8      	cmp	r0, r5
 8002932:	d007      	beq.n	8002944 <TIM_OC2_SetConfig+0x4c>
 8002934:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002938:	42a8      	cmp	r0, r5
 800293a:	d003      	beq.n	8002944 <TIM_OC2_SetConfig+0x4c>
 800293c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002940:	42a8      	cmp	r0, r5
 8002942:	d107      	bne.n	8002954 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002944:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002948:	694d      	ldr	r5, [r1, #20]
 800294a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800294e:	698d      	ldr	r5, [r1, #24]
 8002950:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002954:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002956:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002958:	684a      	ldr	r2, [r1, #4]
 800295a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 800295c:	6203      	str	r3, [r0, #32]
}
 800295e:	bc30      	pop	{r4, r5}
 8002960:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002966:	68cd      	ldr	r5, [r1, #12]
 8002968:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800296c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002970:	e7d9      	b.n	8002926 <TIM_OC2_SetConfig+0x2e>
 8002972:	bf00      	nop
 8002974:	40012c00 	.word	0x40012c00

08002978 <TIM_OC3_SetConfig>:
{
 8002978:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800297a:	6a03      	ldr	r3, [r0, #32]
 800297c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002980:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002982:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8002984:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002986:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002988:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800298c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002990:	680d      	ldr	r5, [r1, #0]
 8002992:	432a      	orrs	r2, r5
  tmpccer &= ~TIM_CCER_CC3P;
 8002994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002998:	688d      	ldr	r5, [r1, #8]
 800299a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800299e:	4d14      	ldr	r5, [pc, #80]	; (80029f0 <TIM_OC3_SetConfig+0x78>)
 80029a0:	42a8      	cmp	r0, r5
 80029a2:	d01d      	beq.n	80029e0 <TIM_OC3_SetConfig+0x68>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80029a4:	4d12      	ldr	r5, [pc, #72]	; (80029f0 <TIM_OC3_SetConfig+0x78>)
 80029a6:	42a8      	cmp	r0, r5
 80029a8:	d00b      	beq.n	80029c2 <TIM_OC3_SetConfig+0x4a>
 80029aa:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80029ae:	42a8      	cmp	r0, r5
 80029b0:	d007      	beq.n	80029c2 <TIM_OC3_SetConfig+0x4a>
 80029b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029b6:	42a8      	cmp	r0, r5
 80029b8:	d003      	beq.n	80029c2 <TIM_OC3_SetConfig+0x4a>
 80029ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029be:	42a8      	cmp	r0, r5
 80029c0:	d107      	bne.n	80029d2 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029c2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029c6:	694d      	ldr	r5, [r1, #20]
 80029c8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029cc:	698d      	ldr	r5, [r1, #24]
 80029ce:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  TIMx->CR2 = tmpcr2;
 80029d2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80029d4:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80029d6:	684a      	ldr	r2, [r1, #4]
 80029d8:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 80029da:	6203      	str	r3, [r0, #32]
}
 80029dc:	bc30      	pop	{r4, r5}
 80029de:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80029e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029e4:	68cd      	ldr	r5, [r1, #12]
 80029e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80029ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ee:	e7d9      	b.n	80029a4 <TIM_OC3_SetConfig+0x2c>
 80029f0:	40012c00 	.word	0x40012c00

080029f4 <TIM_OC4_SetConfig>:
{
 80029f4:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029f6:	6a03      	ldr	r3, [r0, #32]
 80029f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029fc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80029fe:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8002a00:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002a02:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a08:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a0c:	680d      	ldr	r5, [r1, #0]
 8002a0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
 8002a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a16:	688d      	ldr	r5, [r1, #8]
 8002a18:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1c:	4d0d      	ldr	r5, [pc, #52]	; (8002a54 <TIM_OC4_SetConfig+0x60>)
 8002a1e:	42a8      	cmp	r0, r5
 8002a20:	d00b      	beq.n	8002a3a <TIM_OC4_SetConfig+0x46>
 8002a22:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002a26:	42a8      	cmp	r0, r5
 8002a28:	d007      	beq.n	8002a3a <TIM_OC4_SetConfig+0x46>
 8002a2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a2e:	42a8      	cmp	r0, r5
 8002a30:	d003      	beq.n	8002a3a <TIM_OC4_SetConfig+0x46>
 8002a32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a36:	42a8      	cmp	r0, r5
 8002a38:	d104      	bne.n	8002a44 <TIM_OC4_SetConfig+0x50>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a3a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a3e:	694d      	ldr	r5, [r1, #20]
 8002a40:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CR2 = tmpcr2;
 8002a44:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002a46:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002a48:	684b      	ldr	r3, [r1, #4]
 8002a4a:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 8002a4c:	6202      	str	r2, [r0, #32]
}
 8002a4e:	bc30      	pop	{r4, r5}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40012c00 	.word	0x40012c00

08002a58 <TIM_TI1_SetConfig>:
{
 8002a58:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a5a:	6a04      	ldr	r4, [r0, #32]
 8002a5c:	f024 0401 	bic.w	r4, r4, #1
 8002a60:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a62:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002a64:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a66:	4e13      	ldr	r6, [pc, #76]	; (8002ab4 <TIM_TI1_SetConfig+0x5c>)
 8002a68:	42b0      	cmp	r0, r6
 8002a6a:	d01a      	beq.n	8002aa2 <TIM_TI1_SetConfig+0x4a>
 8002a6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a70:	d019      	beq.n	8002aa6 <TIM_TI1_SetConfig+0x4e>
 8002a72:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 8002a76:	42b0      	cmp	r0, r6
 8002a78:	d011      	beq.n	8002a9e <TIM_TI1_SetConfig+0x46>
 8002a7a:	2600      	movs	r6, #0
 8002a7c:	b9ae      	cbnz	r6, 8002aaa <TIM_TI1_SetConfig+0x52>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a7e:	f044 0201 	orr.w	r2, r4, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8c:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a90:	f001 010a 	and.w	r1, r1, #10
 8002a94:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8002a96:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a98:	6201      	str	r1, [r0, #32]
}
 8002a9a:	bc70      	pop	{r4, r5, r6}
 8002a9c:	4770      	bx	lr
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a9e:	2601      	movs	r6, #1
 8002aa0:	e7ec      	b.n	8002a7c <TIM_TI1_SetConfig+0x24>
 8002aa2:	2601      	movs	r6, #1
 8002aa4:	e7ea      	b.n	8002a7c <TIM_TI1_SetConfig+0x24>
 8002aa6:	2601      	movs	r6, #1
 8002aa8:	e7e8      	b.n	8002a7c <TIM_TI1_SetConfig+0x24>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002aaa:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002aae:	4322      	orrs	r2, r4
 8002ab0:	e7e7      	b.n	8002a82 <TIM_TI1_SetConfig+0x2a>
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00

08002ab8 <HAL_TIM_IC_ConfigChannel>:
{
 8002ab8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002aba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d058      	beq.n	8002b74 <HAL_TIM_IC_ConfigChannel+0xbc>
 8002ac2:	460d      	mov	r5, r1
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8002ad2:	b1da      	cbz	r2, 8002b0c <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 8002ad4:	2a04      	cmp	r2, #4
 8002ad6:	d02a      	beq.n	8002b2e <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 8002ad8:	2a08      	cmp	r2, #8
 8002ada:	d03a      	beq.n	8002b52 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance, 
 8002adc:	68cb      	ldr	r3, [r1, #12]
 8002ade:	684a      	ldr	r2, [r1, #4]
 8002ae0:	6809      	ldr	r1, [r1, #0]
 8002ae2:	6800      	ldr	r0, [r0, #0]
 8002ae4:	f7ff fd1a 	bl	800251c <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ae8:	6822      	ldr	r2, [r4, #0]
 8002aea:	69d3      	ldr	r3, [r2, #28]
 8002aec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002af0:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002af2:	6822      	ldr	r2, [r4, #0]
 8002af4:	69d3      	ldr	r3, [r2, #28]
 8002af6:	68a9      	ldr	r1, [r5, #8]
 8002af8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002afc:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK; 
 8002b0a:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8002b0c:	68cb      	ldr	r3, [r1, #12]
 8002b0e:	684a      	ldr	r2, [r1, #4]
 8002b10:	6809      	ldr	r1, [r1, #0]
 8002b12:	6800      	ldr	r0, [r0, #0]
 8002b14:	f7ff ffa0 	bl	8002a58 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b18:	6822      	ldr	r2, [r4, #0]
 8002b1a:	6993      	ldr	r3, [r2, #24]
 8002b1c:	f023 030c 	bic.w	r3, r3, #12
 8002b20:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	6993      	ldr	r3, [r2, #24]
 8002b26:	68a9      	ldr	r1, [r5, #8]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6193      	str	r3, [r2, #24]
 8002b2c:	e7e7      	b.n	8002afe <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance, 
 8002b2e:	68cb      	ldr	r3, [r1, #12]
 8002b30:	684a      	ldr	r2, [r1, #4]
 8002b32:	6809      	ldr	r1, [r1, #0]
 8002b34:	6800      	ldr	r0, [r0, #0]
 8002b36:	f7ff fcaa 	bl	800248e <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b3a:	6822      	ldr	r2, [r4, #0]
 8002b3c:	6993      	ldr	r3, [r2, #24]
 8002b3e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b42:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b44:	6822      	ldr	r2, [r4, #0]
 8002b46:	6993      	ldr	r3, [r2, #24]
 8002b48:	68a9      	ldr	r1, [r5, #8]
 8002b4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b4e:	6193      	str	r3, [r2, #24]
 8002b50:	e7d5      	b.n	8002afe <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,  
 8002b52:	68cb      	ldr	r3, [r1, #12]
 8002b54:	684a      	ldr	r2, [r1, #4]
 8002b56:	6809      	ldr	r1, [r1, #0]
 8002b58:	6800      	ldr	r0, [r0, #0]
 8002b5a:	f7ff fcc6 	bl	80024ea <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b5e:	6822      	ldr	r2, [r4, #0]
 8002b60:	69d3      	ldr	r3, [r2, #28]
 8002b62:	f023 030c 	bic.w	r3, r3, #12
 8002b66:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b68:	6822      	ldr	r2, [r4, #0]
 8002b6a:	69d3      	ldr	r3, [r2, #28]
 8002b6c:	68a9      	ldr	r1, [r5, #8]
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	61d3      	str	r3, [r2, #28]
 8002b72:	e7c4      	b.n	8002afe <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 8002b74:	2002      	movs	r0, #2
}
 8002b76:	bd38      	pop	{r3, r4, r5, pc}

08002b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b78:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002b7a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b7c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b80:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002b84:	4319      	orrs	r1, r3
 8002b86:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b88:	6084      	str	r4, [r0, #8]
} 
 8002b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002b90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	f000 8082 	beq.w	8002c9e <HAL_TIM_ConfigClockSource+0x10e>
{
 8002b9a:	b510      	push	{r4, lr}
 8002b9c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002baa:	6802      	ldr	r2, [r0, #0]
 8002bac:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_TIM_ConfigClockSource+0x114>)
 8002bb0:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002bb2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002bb4:	680b      	ldr	r3, [r1, #0]
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d05d      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0xe6>
 8002bba:	d910      	bls.n	8002bde <HAL_TIM_ConfigClockSource+0x4e>
 8002bbc:	2b70      	cmp	r3, #112	; 0x70
 8002bbe:	d040      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0xb2>
 8002bc0:	d81f      	bhi.n	8002c02 <HAL_TIM_ConfigClockSource+0x72>
 8002bc2:	2b50      	cmp	r3, #80	; 0x50
 8002bc4:	d04d      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0xd2>
 8002bc6:	2b60      	cmp	r3, #96	; 0x60
 8002bc8:	d134      	bne.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002bca:	68ca      	ldr	r2, [r1, #12]
 8002bcc:	6849      	ldr	r1, [r1, #4]
 8002bce:	6820      	ldr	r0, [r4, #0]
 8002bd0:	f7ff fc77 	bl	80024c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd4:	2160      	movs	r1, #96	; 0x60
 8002bd6:	6820      	ldr	r0, [r4, #0]
 8002bd8:	f7ff fcba 	bl	8002550 <TIM_ITRx_SetConfig>
    break;
 8002bdc:	e02a      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d053      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0xfa>
 8002be2:	d908      	bls.n	8002bf6 <HAL_TIM_ConfigClockSource+0x66>
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d055      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0x104>
 8002be8:	2b30      	cmp	r3, #48	; 0x30
 8002bea:	d123      	bne.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002bec:	2130      	movs	r1, #48	; 0x30
 8002bee:	6820      	ldr	r0, [r4, #0]
 8002bf0:	f7ff fcae 	bl	8002550 <TIM_ITRx_SetConfig>
    break;
 8002bf4:	e01e      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002bf6:	b9eb      	cbnz	r3, 8002c34 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	6820      	ldr	r0, [r4, #0]
 8002bfc:	f7ff fca8 	bl	8002550 <TIM_ITRx_SetConfig>
    break;
 8002c00:	e018      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c06:	d00e      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x96>
 8002c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0c:	d112      	bne.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 8002c0e:	68cb      	ldr	r3, [r1, #12]
 8002c10:	684a      	ldr	r2, [r1, #4]
 8002c12:	6889      	ldr	r1, [r1, #8]
 8002c14:	6820      	ldr	r0, [r4, #0]
 8002c16:	f7ff ffaf 	bl	8002b78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c1a:	6822      	ldr	r2, [r4, #0]
 8002c1c:	6893      	ldr	r3, [r2, #8]
 8002c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c22:	6093      	str	r3, [r2, #8]
    break;
 8002c24:	e006      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	6893      	ldr	r3, [r2, #8]
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	f023 0307 	bic.w	r3, r3, #7
 8002c32:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002c40:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8002c42:	68cb      	ldr	r3, [r1, #12]
 8002c44:	684a      	ldr	r2, [r1, #4]
 8002c46:	6889      	ldr	r1, [r1, #8]
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	f7ff ff95 	bl	8002b78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002c5e:	6093      	str	r3, [r2, #8]
    break;
 8002c60:	e7e8      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002c62:	68ca      	ldr	r2, [r1, #12]
 8002c64:	6849      	ldr	r1, [r1, #4]
 8002c66:	6820      	ldr	r0, [r4, #0]
 8002c68:	f7ff fbfe 	bl	8002468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c6c:	2150      	movs	r1, #80	; 0x50
 8002c6e:	6820      	ldr	r0, [r4, #0]
 8002c70:	f7ff fc6e 	bl	8002550 <TIM_ITRx_SetConfig>
    break;
 8002c74:	e7de      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002c76:	68ca      	ldr	r2, [r1, #12]
 8002c78:	6849      	ldr	r1, [r1, #4]
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	f7ff fbf4 	bl	8002468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	6820      	ldr	r0, [r4, #0]
 8002c84:	f7ff fc64 	bl	8002550 <TIM_ITRx_SetConfig>
    break;
 8002c88:	e7d4      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002c8a:	2110      	movs	r1, #16
 8002c8c:	6820      	ldr	r0, [r4, #0]
 8002c8e:	f7ff fc5f 	bl	8002550 <TIM_ITRx_SetConfig>
    break;
 8002c92:	e7cf      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002c94:	2120      	movs	r1, #32
 8002c96:	6820      	ldr	r0, [r4, #0]
 8002c98:	f7ff fc5a 	bl	8002550 <TIM_ITRx_SetConfig>
    break;
 8002c9c:	e7ca      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 8002c9e:	2002      	movs	r0, #2
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	fffe0088 	.word	0xfffe0088

08002ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ca8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002caa:	2301      	movs	r3, #1
 8002cac:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cb0:	6a03      	ldr	r3, [r0, #32]
 8002cb2:	ea23 0304 	bic.w	r3, r3, r4
 8002cb6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002cb8:	6a03      	ldr	r3, [r0, #32]
 8002cba:	408a      	lsls	r2, r1
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	6203      	str	r3, [r0, #32]
}
 8002cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_TIM_PWM_Start>:
{
 8002cc8:	b510      	push	{r4, lr}
 8002cca:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	6800      	ldr	r0, [r0, #0]
 8002cd0:	f7ff ffea 	bl	8002ca8 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_TIM_PWM_Start+0x58>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d01a      	beq.n	8002d12 <HAL_TIM_PWM_Start+0x4a>
 8002cdc:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d018      	beq.n	8002d16 <HAL_TIM_PWM_Start+0x4e>
 8002ce4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d016      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x52>
 8002cec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00c      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x46>
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	b11a      	cbz	r2, 8002d00 <HAL_TIM_PWM_Start+0x38>
    __HAL_TIM_MOE_ENABLE(htim);
 8002cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cfe:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002d00:	6822      	ldr	r2, [r4, #0]
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6013      	str	r3, [r2, #0]
} 
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	bd10      	pop	{r4, pc}
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8002d0e:	2201      	movs	r2, #1
 8002d10:	e7f1      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x2e>
 8002d12:	2201      	movs	r2, #1
 8002d14:	e7ef      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x2e>
 8002d16:	2201      	movs	r2, #1
 8002d18:	e7ed      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x2e>
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	e7eb      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x2e>
 8002d1e:	bf00      	nop
 8002d20:	40012c00 	.word	0x40012c00

08002d24 <HAL_TIM_IC_Start_IT>:
{
 8002d24:	b510      	push	{r4, lr}
 8002d26:	4604      	mov	r4, r0
  switch (Channel)
 8002d28:	290c      	cmp	r1, #12
 8002d2a:	d80d      	bhi.n	8002d48 <HAL_TIM_IC_Start_IT+0x24>
 8002d2c:	e8df f001 	tbb	[pc, r1]
 8002d30:	0c0c0c07 	.word	0x0c0c0c07
 8002d34:	0c0c0c17 	.word	0x0c0c0c17
 8002d38:	0c0c0c1d 	.word	0x0c0c0c1d
 8002d3c:	23          	.byte	0x23
 8002d3d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d3e:	6802      	ldr	r2, [r0, #0]
 8002d40:	68d3      	ldr	r3, [r2, #12]
 8002d42:	f043 0302 	orr.w	r3, r3, #2
 8002d46:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d48:	2201      	movs	r2, #1
 8002d4a:	6820      	ldr	r0, [r4, #0]
 8002d4c:	f7ff ffac 	bl	8002ca8 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8002d50:	6822      	ldr	r2, [r4, #0]
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6013      	str	r3, [r2, #0]
} 
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d5e:	6802      	ldr	r2, [r0, #0]
 8002d60:	68d3      	ldr	r3, [r2, #12]
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	60d3      	str	r3, [r2, #12]
    break;
 8002d68:	e7ee      	b.n	8002d48 <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d6a:	6802      	ldr	r2, [r0, #0]
 8002d6c:	68d3      	ldr	r3, [r2, #12]
 8002d6e:	f043 0308 	orr.w	r3, r3, #8
 8002d72:	60d3      	str	r3, [r2, #12]
    break;
 8002d74:	e7e8      	b.n	8002d48 <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d76:	6802      	ldr	r2, [r0, #0]
 8002d78:	68d3      	ldr	r3, [r2, #12]
 8002d7a:	f043 0310 	orr.w	r3, r3, #16
 8002d7e:	60d3      	str	r3, [r2, #12]
    break;
 8002d80:	e7e2      	b.n	8002d48 <HAL_TIM_IC_Start_IT+0x24>
	...

08002d84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002d84:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d86:	6a03      	ldr	r3, [r0, #32]
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002d90:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d92:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d9c:	680d      	ldr	r5, [r1, #0]
 8002d9e:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002da0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002da4:	688d      	ldr	r5, [r1, #8]
 8002da6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002daa:	4d0d      	ldr	r5, [pc, #52]	; (8002de0 <TIM_OC5_SetConfig+0x5c>)
 8002dac:	42a8      	cmp	r0, r5
 8002dae:	d00b      	beq.n	8002dc8 <TIM_OC5_SetConfig+0x44>
 8002db0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002db4:	42a8      	cmp	r0, r5
 8002db6:	d007      	beq.n	8002dc8 <TIM_OC5_SetConfig+0x44>
 8002db8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002dbc:	42a8      	cmp	r0, r5
 8002dbe:	d003      	beq.n	8002dc8 <TIM_OC5_SetConfig+0x44>
 8002dc0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002dc4:	42a8      	cmp	r0, r5
 8002dc6:	d104      	bne.n	8002dd2 <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002dc8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002dcc:	694d      	ldr	r5, [r1, #20]
 8002dce:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dd4:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002dd6:	684b      	ldr	r3, [r1, #4]
 8002dd8:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002dda:	6202      	str	r2, [r0, #32]
}
 8002ddc:	bc30      	pop	{r4, r5}
 8002dde:	4770      	bx	lr
 8002de0:	40012c00 	.word	0x40012c00

08002de4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002de6:	6a03      	ldr	r3, [r0, #32]
 8002de8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002dec:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002df0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002df2:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dfc:	680d      	ldr	r5, [r1, #0]
 8002dfe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e02:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e06:	688d      	ldr	r5, [r1, #8]
 8002e08:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0c:	4d0d      	ldr	r5, [pc, #52]	; (8002e44 <TIM_OC6_SetConfig+0x60>)
 8002e0e:	42a8      	cmp	r0, r5
 8002e10:	d00b      	beq.n	8002e2a <TIM_OC6_SetConfig+0x46>
 8002e12:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002e16:	42a8      	cmp	r0, r5
 8002e18:	d007      	beq.n	8002e2a <TIM_OC6_SetConfig+0x46>
 8002e1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e1e:	42a8      	cmp	r0, r5
 8002e20:	d003      	beq.n	8002e2a <TIM_OC6_SetConfig+0x46>
 8002e22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e26:	42a8      	cmp	r0, r5
 8002e28:	d104      	bne.n	8002e34 <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e2a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e2e:	694d      	ldr	r5, [r1, #20]
 8002e30:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e34:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e36:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e38:	684b      	ldr	r3, [r1, #4]
 8002e3a:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002e3c:	6202      	str	r2, [r0, #32]
} 
 8002e3e:	bc30      	pop	{r4, r5}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40012c00 	.word	0x40012c00

08002e48 <HAL_TIM_PWM_ConfigChannel>:
{
 8002e48:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002e4a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	f000 8092 	beq.w	8002f78 <HAL_TIM_PWM_ConfigChannel+0x130>
 8002e54:	460d      	mov	r5, r1
 8002e56:	4604      	mov	r4, r0
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002e64:	2a14      	cmp	r2, #20
 8002e66:	d81e      	bhi.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8002e68:	e8df f002 	tbb	[pc, r2]
 8002e6c:	1d1d1d0b 	.word	0x1d1d1d0b
 8002e70:	1d1d1d24 	.word	0x1d1d1d24
 8002e74:	1d1d1d38 	.word	0x1d1d1d38
 8002e78:	1d1d1d4b 	.word	0x1d1d1d4b
 8002e7c:	1d1d1d5f 	.word	0x1d1d1d5f
 8002e80:	72          	.byte	0x72
 8002e81:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e82:	6800      	ldr	r0, [r0, #0]
 8002e84:	f7ff fcf2 	bl	800286c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e88:	6822      	ldr	r2, [r4, #0]
 8002e8a:	6993      	ldr	r3, [r2, #24]
 8002e8c:	f043 0308 	orr.w	r3, r3, #8
 8002e90:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	6993      	ldr	r3, [r2, #24]
 8002e96:	f023 0304 	bic.w	r3, r3, #4
 8002e9a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e9c:	6822      	ldr	r2, [r4, #0]
 8002e9e:	6993      	ldr	r3, [r2, #24]
 8002ea0:	6929      	ldr	r1, [r5, #16]
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb4:	6800      	ldr	r0, [r0, #0]
 8002eb6:	f7ff fd1f 	bl	80028f8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eba:	6822      	ldr	r2, [r4, #0]
 8002ebc:	6993      	ldr	r3, [r2, #24]
 8002ebe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ec2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ec4:	6822      	ldr	r2, [r4, #0]
 8002ec6:	6993      	ldr	r3, [r2, #24]
 8002ec8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ecc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	6993      	ldr	r3, [r2, #24]
 8002ed2:	6929      	ldr	r1, [r5, #16]
 8002ed4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ed8:	6193      	str	r3, [r2, #24]
    break;
 8002eda:	e7e4      	b.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002edc:	6800      	ldr	r0, [r0, #0]
 8002ede:	f7ff fd4b 	bl	8002978 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ee2:	6822      	ldr	r2, [r4, #0]
 8002ee4:	69d3      	ldr	r3, [r2, #28]
 8002ee6:	f043 0308 	orr.w	r3, r3, #8
 8002eea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	69d3      	ldr	r3, [r2, #28]
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002ef6:	6822      	ldr	r2, [r4, #0]
 8002ef8:	69d3      	ldr	r3, [r2, #28]
 8002efa:	6929      	ldr	r1, [r5, #16]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	61d3      	str	r3, [r2, #28]
    break;
 8002f00:	e7d1      	b.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f02:	6800      	ldr	r0, [r0, #0]
 8002f04:	f7ff fd76 	bl	80029f4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f08:	6822      	ldr	r2, [r4, #0]
 8002f0a:	69d3      	ldr	r3, [r2, #28]
 8002f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f10:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f12:	6822      	ldr	r2, [r4, #0]
 8002f14:	69d3      	ldr	r3, [r2, #28]
 8002f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f1a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	69d3      	ldr	r3, [r2, #28]
 8002f20:	6929      	ldr	r1, [r5, #16]
 8002f22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f26:	61d3      	str	r3, [r2, #28]
    break;
 8002f28:	e7bd      	b.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f2a:	6800      	ldr	r0, [r0, #0]
 8002f2c:	f7ff ff2a 	bl	8002d84 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f30:	6822      	ldr	r2, [r4, #0]
 8002f32:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f34:	f043 0308 	orr.w	r3, r3, #8
 8002f38:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f3a:	6822      	ldr	r2, [r4, #0]
 8002f3c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f3e:	f023 0304 	bic.w	r3, r3, #4
 8002f42:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f48:	6929      	ldr	r1, [r5, #16]
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	6553      	str	r3, [r2, #84]	; 0x54
    break;
 8002f4e:	e7aa      	b.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f50:	6800      	ldr	r0, [r0, #0]
 8002f52:	f7ff ff47 	bl	8002de4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f56:	6822      	ldr	r2, [r4, #0]
 8002f58:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f5e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f68:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002f6a:	6822      	ldr	r2, [r4, #0]
 8002f6c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f6e:	6929      	ldr	r1, [r5, #16]
 8002f70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f74:	6553      	str	r3, [r2, #84]	; 0x54
    break;
 8002f76:	e796      	b.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8002f78:	2002      	movs	r0, #2
}
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}

08002f7c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002f7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d01f      	beq.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 8002f84:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002f86:	2301      	movs	r3, #1
 8002f88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	6804      	ldr	r4, [r0, #0]
 8002f8e:	6863      	ldr	r3, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002f90:	68a2      	ldr	r2, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f92:	4d0d      	ldr	r5, [pc, #52]	; (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8002f94:	42ac      	cmp	r4, r5
 8002f96:	d010      	beq.n	8002fba <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f9c:	680d      	ldr	r5, [r1, #0]
 8002f9e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fa4:	6889      	ldr	r1, [r1, #8]
 8002fa6:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 8002fa8:	6063      	str	r3, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002faa:	6803      	ldr	r3, [r0, #0]
 8002fac:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002fb4:	4618      	mov	r0, r3
} 
 8002fb6:	bc30      	pop	{r4, r5}
 8002fb8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fbe:	684d      	ldr	r5, [r1, #4]
 8002fc0:	432b      	orrs	r3, r5
 8002fc2:	e7e9      	b.n	8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8002fc4:	2002      	movs	r0, #2
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00

08002fcc <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8002fcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d03e      	beq.n	8003052 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8002fd4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fdc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe2:	688a      	ldr	r2, [r1, #8]
 8002fe4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fea:	684a      	ldr	r2, [r1, #4]
 8002fec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ff2:	680a      	ldr	r2, [r1, #0]
 8002ff4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ffa:	690a      	ldr	r2, [r1, #16]
 8002ffc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003002:	694a      	ldr	r2, [r1, #20]
 8003004:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800300a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800300c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800300e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003012:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8003014:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003018:	698a      	ldr	r2, [r1, #24]
 800301a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800301e:	6802      	ldr	r2, [r0, #0]
 8003020:	4c0d      	ldr	r4, [pc, #52]	; (8003058 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8003022:	42a2      	cmp	r2, r4
 8003024:	d007      	beq.n	8003036 <HAL_TIMEx_ConfigBreakDeadTime+0x6a>
  htim->Instance->BDTR = tmpbdtr;
 8003026:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003028:	2300      	movs	r3, #0
 800302a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800302e:	4618      	mov	r0, r3
}
 8003030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003034:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8003036:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800303a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800303c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003044:	69cc      	ldr	r4, [r1, #28]
 8003046:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003048:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800304c:	6a09      	ldr	r1, [r1, #32]
 800304e:	430b      	orrs	r3, r1
 8003050:	e7e9      	b.n	8003026 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 8003052:	2002      	movs	r0, #2
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40012c00 	.word	0x40012c00

0800305c <HAL_TIMEx_CommutationCallback>:
{
 800305c:	4770      	bx	lr

0800305e <HAL_TIMEx_BreakCallback>:
{
 800305e:	4770      	bx	lr

08003060 <HAL_TIMEx_Break2Callback>:
{
 8003060:	4770      	bx	lr
	...

08003064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800309c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003068:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800306a:	e003      	b.n	8003074 <LoopCopyDataInit>

0800306c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800306e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003070:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003072:	3104      	adds	r1, #4

08003074 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003074:	480b      	ldr	r0, [pc, #44]	; (80030a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003078:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800307a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800307c:	d3f6      	bcc.n	800306c <CopyDataInit>
	ldr	r2, =_sbss
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8003080:	e002      	b.n	8003088 <LoopFillZerobss>

08003082 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003082:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003084:	f842 3b04 	str.w	r3, [r2], #4

08003088 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <LoopForever+0x16>)
	cmp	r2, r3
 800308a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800308c:	d3f9      	bcc.n	8003082 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800308e:	f7fd ffb1 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003092:	f000 f811 	bl	80030b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003096:	f7fd feff 	bl	8000e98 <main>

0800309a <LoopForever>:

LoopForever:
    b LoopForever
 800309a:	e7fe      	b.n	800309a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800309c:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80030a0:	08003194 	.word	0x08003194
	ldr	r0, =_sdata
 80030a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80030a8:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80030ac:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80030b0:	200009f8 	.word	0x200009f8

080030b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030b4:	e7fe      	b.n	80030b4 <ADC1_IRQHandler>
	...

080030b8 <__libc_init_array>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4e0d      	ldr	r6, [pc, #52]	; (80030f0 <__libc_init_array+0x38>)
 80030bc:	4c0d      	ldr	r4, [pc, #52]	; (80030f4 <__libc_init_array+0x3c>)
 80030be:	1ba4      	subs	r4, r4, r6
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	2500      	movs	r5, #0
 80030c4:	42a5      	cmp	r5, r4
 80030c6:	d109      	bne.n	80030dc <__libc_init_array+0x24>
 80030c8:	4e0b      	ldr	r6, [pc, #44]	; (80030f8 <__libc_init_array+0x40>)
 80030ca:	4c0c      	ldr	r4, [pc, #48]	; (80030fc <__libc_init_array+0x44>)
 80030cc:	f000 f818 	bl	8003100 <_init>
 80030d0:	1ba4      	subs	r4, r4, r6
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	2500      	movs	r5, #0
 80030d6:	42a5      	cmp	r5, r4
 80030d8:	d105      	bne.n	80030e6 <__libc_init_array+0x2e>
 80030da:	bd70      	pop	{r4, r5, r6, pc}
 80030dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030e0:	4798      	blx	r3
 80030e2:	3501      	adds	r5, #1
 80030e4:	e7ee      	b.n	80030c4 <__libc_init_array+0xc>
 80030e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030ea:	4798      	blx	r3
 80030ec:	3501      	adds	r5, #1
 80030ee:	e7f2      	b.n	80030d6 <__libc_init_array+0x1e>
 80030f0:	0800318c 	.word	0x0800318c
 80030f4:	0800318c 	.word	0x0800318c
 80030f8:	0800318c 	.word	0x0800318c
 80030fc:	08003190 	.word	0x08003190

08003100 <_init>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	bf00      	nop
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr

0800310c <_fini>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	bf00      	nop
 8003110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003112:	bc08      	pop	{r3}
 8003114:	469e      	mov	lr, r3
 8003116:	4770      	bx	lr
