
Crawler_Motor_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001c20  08001c20  00011c20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c50  08001c50  00011c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c54  08001c54  00011c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c8  2000000c  08001c64  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000d4  08001c64  000200d4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c5d4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c77  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006371  00000000  00000000  0002e287  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007f8  00000000  00000000  000345f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b48  00000000  00000000  00034df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000041ba  00000000  00000000  00035938  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003591  00000000  00000000  00039af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003d083  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001818  00000000  00000000  0003d100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c08 	.word	0x08001c08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001c08 	.word	0x08001c08

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 fa14 	bl	800060c <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 f9c8 	bl	8000588 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f9a1 	bl	8000564 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 fba2 	bl	8001970 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025a:	4604      	mov	r4, r0
 800025c:	2800      	cmp	r0, #0
 800025e:	d06e      	beq.n	800033e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000260:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000264:	b90b      	cbnz	r3, 800026a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000266:	f001 fb9b 	bl	80019a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800026a:	6822      	ldr	r2, [r4, #0]
 800026c:	6813      	ldr	r3, [r2, #0]
 800026e:	f023 0302 	bic.w	r3, r3, #2
 8000272:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000274:	f7ff ffea 	bl	800024c <HAL_GetTick>
 8000278:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800027a:	6823      	ldr	r3, [r4, #0]
 800027c:	685a      	ldr	r2, [r3, #4]
 800027e:	0791      	lsls	r1, r2, #30
 8000280:	d451      	bmi.n	8000326 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	f042 0201 	orr.w	r2, r2, #1
 8000288:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800028a:	f7ff ffdf 	bl	800024c <HAL_GetTick>
 800028e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000290:	6823      	ldr	r3, [r4, #0]
 8000292:	685a      	ldr	r2, [r3, #4]
 8000294:	07d2      	lsls	r2, r2, #31
 8000296:	d554      	bpl.n	8000342 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000298:	7e22      	ldrb	r2, [r4, #24]
 800029a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	bf0c      	ite	eq
 80002a0:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80002a4:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80002a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80002aa:	7e62      	ldrb	r2, [r4, #25]
 80002ac:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	bf0c      	ite	eq
 80002b2:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002b6:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80002ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002bc:	7ea2      	ldrb	r2, [r4, #26]
 80002be:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	bf0c      	ite	eq
 80002c4:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002c8:	f022 0220 	bicne.w	r2, r2, #32
 80002cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80002ce:	7ee2      	ldrb	r2, [r4, #27]
 80002d0:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	bf0c      	ite	eq
 80002d6:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002da:	f042 0210 	orrne.w	r2, r2, #16
 80002de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80002e0:	7f22      	ldrb	r2, [r4, #28]
 80002e2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	bf0c      	ite	eq
 80002e8:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002ec:	f022 0208 	bicne.w	r2, r2, #8
 80002f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80002f2:	7f62      	ldrb	r2, [r4, #29]
 80002f4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	bf0c      	ite	eq
 80002fa:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002fe:	f022 0204 	bicne.w	r2, r2, #4
 8000302:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000304:	68e1      	ldr	r1, [r4, #12]
 8000306:	68a2      	ldr	r2, [r4, #8]
 8000308:	430a      	orrs	r2, r1
 800030a:	6921      	ldr	r1, [r4, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	6961      	ldr	r1, [r4, #20]
 8000310:	430a      	orrs	r2, r1
 8000312:	6861      	ldr	r1, [r4, #4]
 8000314:	3901      	subs	r1, #1
 8000316:	430a      	orrs	r2, r1
 8000318:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800031a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800031c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800031e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000320:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000324:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000326:	f7ff ff91 	bl	800024c <HAL_GetTick>
 800032a:	1b40      	subs	r0, r0, r5
 800032c:	280a      	cmp	r0, #10
 800032e:	d9a4      	bls.n	800027a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000336:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000338:	2305      	movs	r3, #5
 800033a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800033e:	2001      	movs	r0, #1
}
 8000340:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000342:	f7ff ff83 	bl	800024c <HAL_GetTick>
 8000346:	1b40      	subs	r0, r0, r5
 8000348:	280a      	cmp	r0, #10
 800034a:	d9a1      	bls.n	8000290 <HAL_CAN_Init+0x38>
 800034c:	e7f0      	b.n	8000330 <HAL_CAN_Init+0xd8>

0800034e <HAL_CAN_TxMailbox0CompleteCallback>:
 800034e:	4770      	bx	lr

08000350 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000350:	4770      	bx	lr

08000352 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000352:	4770      	bx	lr

08000354 <HAL_CAN_TxMailbox0AbortCallback>:
 8000354:	4770      	bx	lr

08000356 <HAL_CAN_TxMailbox1AbortCallback>:
 8000356:	4770      	bx	lr

08000358 <HAL_CAN_TxMailbox2AbortCallback>:
 8000358:	4770      	bx	lr

0800035a <HAL_CAN_RxFifo0MsgPendingCallback>:
 800035a:	4770      	bx	lr

0800035c <HAL_CAN_RxFifo0FullCallback>:
 800035c:	4770      	bx	lr

0800035e <HAL_CAN_RxFifo1MsgPendingCallback>:
 800035e:	4770      	bx	lr

08000360 <HAL_CAN_RxFifo1FullCallback>:
 8000360:	4770      	bx	lr

08000362 <HAL_CAN_SleepCallback>:
 8000362:	4770      	bx	lr

08000364 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000364:	4770      	bx	lr

08000366 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000366:	4770      	bx	lr

08000368 <HAL_CAN_IRQHandler>:
{
 8000368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800036c:	6803      	ldr	r3, [r0, #0]
 800036e:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000370:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000374:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000376:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800037a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800037e:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000382:	f016 0401 	ands.w	r4, r6, #1
{
 8000386:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000388:	d022      	beq.n	80003d0 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800038a:	f017 0401 	ands.w	r4, r7, #1
 800038e:	d007      	beq.n	80003a0 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000390:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000392:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000394:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000396:	f140 80a3 	bpl.w	80004e0 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800039a:	f7ff ffd8 	bl	800034e <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800039e:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80003a0:	05fb      	lsls	r3, r7, #23
 80003a2:	d509      	bpl.n	80003b8 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80003a4:	682b      	ldr	r3, [r5, #0]
 80003a6:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80003aa:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80003ac:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80003ae:	f140 80a5 	bpl.w	80004fc <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80003b2:	4628      	mov	r0, r5
 80003b4:	f7ff ffcc 	bl	8000350 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80003b8:	03fb      	lsls	r3, r7, #15
 80003ba:	d509      	bpl.n	80003d0 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80003bc:	682b      	ldr	r3, [r5, #0]
 80003be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80003c2:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80003c4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80003c6:	f140 80a7 	bpl.w	8000518 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80003ca:	4628      	mov	r0, r5
 80003cc:	f7ff ffc1 	bl	8000352 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80003d0:	0733      	lsls	r3, r6, #28
 80003d2:	d507      	bpl.n	80003e4 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80003d4:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80003d8:	bf1f      	itttt	ne
 80003da:	682b      	ldrne	r3, [r5, #0]
 80003dc:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80003de:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80003e2:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80003e4:	0777      	lsls	r7, r6, #29
 80003e6:	d508      	bpl.n	80003fa <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80003e8:	f01b 0f08 	tst.w	fp, #8
 80003ec:	d005      	beq.n	80003fa <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80003ee:	682b      	ldr	r3, [r5, #0]
 80003f0:	2208      	movs	r2, #8
 80003f2:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80003f4:	4628      	mov	r0, r5
 80003f6:	f7ff ffb1 	bl	800035c <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80003fa:	07b0      	lsls	r0, r6, #30
 80003fc:	d506      	bpl.n	800040c <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80003fe:	682b      	ldr	r3, [r5, #0]
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	0799      	lsls	r1, r3, #30
 8000404:	d002      	beq.n	800040c <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000406:	4628      	mov	r0, r5
 8000408:	f7ff ffa7 	bl	800035a <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800040c:	0672      	lsls	r2, r6, #25
 800040e:	d507      	bpl.n	8000420 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000410:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000414:	bf1f      	itttt	ne
 8000416:	682b      	ldrne	r3, [r5, #0]
 8000418:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800041a:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800041e:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000420:	06b3      	lsls	r3, r6, #26
 8000422:	d508      	bpl.n	8000436 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000424:	f01a 0f08 	tst.w	sl, #8
 8000428:	d005      	beq.n	8000436 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800042a:	682b      	ldr	r3, [r5, #0]
 800042c:	2208      	movs	r2, #8
 800042e:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000430:	4628      	mov	r0, r5
 8000432:	f7ff ff95 	bl	8000360 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000436:	06f7      	lsls	r7, r6, #27
 8000438:	d506      	bpl.n	8000448 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800043a:	682b      	ldr	r3, [r5, #0]
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	0798      	lsls	r0, r3, #30
 8000440:	d002      	beq.n	8000448 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000442:	4628      	mov	r0, r5
 8000444:	f7ff ff8b 	bl	800035e <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000448:	03b1      	lsls	r1, r6, #14
 800044a:	d508      	bpl.n	800045e <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800044c:	f019 0f10 	tst.w	r9, #16
 8000450:	d005      	beq.n	800045e <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000452:	682b      	ldr	r3, [r5, #0]
 8000454:	2210      	movs	r2, #16
 8000456:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000458:	4628      	mov	r0, r5
 800045a:	f7ff ff82 	bl	8000362 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800045e:	03f2      	lsls	r2, r6, #15
 8000460:	d508      	bpl.n	8000474 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000462:	f019 0f08 	tst.w	r9, #8
 8000466:	d005      	beq.n	8000474 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000468:	682b      	ldr	r3, [r5, #0]
 800046a:	2208      	movs	r2, #8
 800046c:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800046e:	4628      	mov	r0, r5
 8000470:	f7ff ff78 	bl	8000364 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000474:	0433      	lsls	r3, r6, #16
 8000476:	d52a      	bpl.n	80004ce <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000478:	f019 0f04 	tst.w	r9, #4
 800047c:	682a      	ldr	r2, [r5, #0]
 800047e:	d024      	beq.n	80004ca <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000480:	05f7      	lsls	r7, r6, #23
 8000482:	d504      	bpl.n	800048e <HAL_CAN_IRQHandler+0x126>
 8000484:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000488:	bf18      	it	ne
 800048a:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800048e:	05b0      	lsls	r0, r6, #22
 8000490:	d504      	bpl.n	800049c <HAL_CAN_IRQHandler+0x134>
 8000492:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000496:	bf18      	it	ne
 8000498:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800049c:	0571      	lsls	r1, r6, #21
 800049e:	d504      	bpl.n	80004aa <HAL_CAN_IRQHandler+0x142>
 80004a0:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80004a4:	bf18      	it	ne
 80004a6:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80004aa:	0533      	lsls	r3, r6, #20
 80004ac:	d50d      	bpl.n	80004ca <HAL_CAN_IRQHandler+0x162>
 80004ae:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80004b2:	d00a      	beq.n	80004ca <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 80004b4:	2b30      	cmp	r3, #48	; 0x30
 80004b6:	d04c      	beq.n	8000552 <HAL_CAN_IRQHandler+0x1ea>
 80004b8:	d83c      	bhi.n	8000534 <HAL_CAN_IRQHandler+0x1cc>
 80004ba:	2b10      	cmp	r3, #16
 80004bc:	d043      	beq.n	8000546 <HAL_CAN_IRQHandler+0x1de>
 80004be:	2b20      	cmp	r3, #32
 80004c0:	d044      	beq.n	800054c <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80004c2:	6993      	ldr	r3, [r2, #24]
 80004c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004c8:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80004ca:	2304      	movs	r3, #4
 80004cc:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80004ce:	b12c      	cbz	r4, 80004dc <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 80004d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80004d2:	431c      	orrs	r4, r3
 80004d4:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80004d6:	4628      	mov	r0, r5
 80004d8:	f7ff ff45 	bl	8000366 <HAL_CAN_ErrorCallback>
 80004dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80004e0:	077a      	lsls	r2, r7, #29
 80004e2:	d405      	bmi.n	80004f0 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80004e4:	f017 0408 	ands.w	r4, r7, #8
 80004e8:	d105      	bne.n	80004f6 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80004ea:	f7ff ff33 	bl	8000354 <HAL_CAN_TxMailbox0AbortCallback>
 80004ee:	e757      	b.n	80003a0 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80004f0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80004f4:	e754      	b.n	80003a0 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80004f6:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80004fa:	e751      	b.n	80003a0 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80004fc:	0579      	lsls	r1, r7, #21
 80004fe:	d502      	bpl.n	8000506 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000500:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000504:	e758      	b.n	80003b8 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000506:	053a      	lsls	r2, r7, #20
 8000508:	d502      	bpl.n	8000510 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800050a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800050e:	e753      	b.n	80003b8 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000510:	4628      	mov	r0, r5
 8000512:	f7ff ff20 	bl	8000356 <HAL_CAN_TxMailbox1AbortCallback>
 8000516:	e74f      	b.n	80003b8 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000518:	0379      	lsls	r1, r7, #13
 800051a:	d502      	bpl.n	8000522 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800051c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000520:	e756      	b.n	80003d0 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000522:	033a      	lsls	r2, r7, #12
 8000524:	d502      	bpl.n	800052c <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000526:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800052a:	e751      	b.n	80003d0 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800052c:	4628      	mov	r0, r5
 800052e:	f7ff ff13 	bl	8000358 <HAL_CAN_TxMailbox2AbortCallback>
 8000532:	e74d      	b.n	80003d0 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000534:	2b50      	cmp	r3, #80	; 0x50
 8000536:	d00f      	beq.n	8000558 <HAL_CAN_IRQHandler+0x1f0>
 8000538:	2b60      	cmp	r3, #96	; 0x60
 800053a:	d010      	beq.n	800055e <HAL_CAN_IRQHandler+0x1f6>
 800053c:	2b40      	cmp	r3, #64	; 0x40
 800053e:	d1c0      	bne.n	80004c2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000540:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000544:	e7bd      	b.n	80004c2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000546:	f044 0408 	orr.w	r4, r4, #8
            break;
 800054a:	e7ba      	b.n	80004c2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800054c:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000550:	e7b7      	b.n	80004c2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000552:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000556:	e7b4      	b.n	80004c2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000558:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800055c:	e7b1      	b.n	80004c2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800055e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000562:	e7ae      	b.n	80004c2 <HAL_CAN_IRQHandler+0x15a>

08000564 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000566:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000568:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800056c:	041b      	lsls	r3, r3, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000574:	0200      	lsls	r0, r0, #8
 8000576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800057e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000580:	60d3      	str	r3, [r2, #12]
 8000582:	4770      	bx	lr
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	68dc      	ldr	r4, [r3, #12]
 800058e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000592:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000596:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000598:	2b04      	cmp	r3, #4
 800059a:	bf28      	it	cs
 800059c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	f04f 0501 	mov.w	r5, #1
 80005a4:	fa05 f303 	lsl.w	r3, r5, r3
 80005a8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ac:	bf8c      	ite	hi
 80005ae:	3c03      	subhi	r4, #3
 80005b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b2:	4019      	ands	r1, r3
 80005b4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b6:	fa05 f404 	lsl.w	r4, r5, r4
 80005ba:	3c01      	subs	r4, #1
 80005bc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c0:	ea42 0201 	orr.w	r2, r2, r1
 80005c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	bfad      	iteet	ge
 80005ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	f000 000f 	andlt.w	r0, r0, #15
 80005d2:	4b06      	ldrlt	r3, [pc, #24]	; (80005ec <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	bfb5      	itete	lt
 80005da:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00
 80005ec:	e000ed14 	.word	0xe000ed14

080005f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005f0:	2800      	cmp	r0, #0
 80005f2:	db08      	blt.n	8000606 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f4:	0942      	lsrs	r2, r0, #5
 80005f6:	2301      	movs	r3, #1
 80005f8:	f000 001f 	and.w	r0, r0, #31
 80005fc:	fa03 f000 	lsl.w	r0, r3, r0
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <HAL_NVIC_EnableIRQ+0x18>)
 8000602:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000606:	4770      	bx	lr
 8000608:	e000e100 	.word	0xe000e100

0800060c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800060c:	3801      	subs	r0, #1
 800060e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000612:	d20a      	bcs.n	800062a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000618:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	21f0      	movs	r1, #240	; 0xf0
 800061c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000620:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000622:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800062a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e010 	.word	0xe000e010
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800063c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800063e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000640:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80007a8 <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000644:	4a56      	ldr	r2, [pc, #344]	; (80007a0 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000646:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000648:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 800064c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800064e:	9c01      	ldr	r4, [sp, #4]
 8000650:	40dc      	lsrs	r4, r3
 8000652:	d102      	bne.n	800065a <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8000654:	b005      	add	sp, #20
 8000656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800065a:	2401      	movs	r4, #1
 800065c:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000660:	9c01      	ldr	r4, [sp, #4]
 8000662:	ea14 050a 	ands.w	r5, r4, sl
 8000666:	f000 8093 	beq.w	8000790 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800066a:	684c      	ldr	r4, [r1, #4]
 800066c:	f024 0b10 	bic.w	fp, r4, #16
 8000670:	f1bb 0f02 	cmp.w	fp, #2
 8000674:	d111      	bne.n	800069a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 8000676:	08df      	lsrs	r7, r3, #3
 8000678:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800067c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000680:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000682:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000686:	fa09 fc0e 	lsl.w	ip, r9, lr
 800068a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800068e:	690e      	ldr	r6, [r1, #16]
 8000690:	fa06 f60e 	lsl.w	r6, r6, lr
 8000694:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000698:	623e      	str	r6, [r7, #32]
 800069a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800069e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80006a0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80006a2:	fa07 f70c 	lsl.w	r7, r7, ip
 80006a6:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006a8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80006ac:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006ae:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006b6:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ba:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80006be:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c0:	d811      	bhi.n	80006e6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80006c2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80006c4:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006c8:	68ce      	ldr	r6, [r1, #12]
 80006ca:	fa06 fe0c 	lsl.w	lr, r6, ip
 80006ce:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80006d2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006d4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006d6:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80006da:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80006de:	409e      	lsls	r6, r3
 80006e0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80006e4:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80006e6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80006e8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006ea:	688e      	ldr	r6, [r1, #8]
 80006ec:	fa06 f60c 	lsl.w	r6, r6, ip
 80006f0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006f2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80006f4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006f6:	d54b      	bpl.n	8000790 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80006fc:	f046 0601 	orr.w	r6, r6, #1
 8000700:	f8c8 6018 	str.w	r6, [r8, #24]
 8000704:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000708:	f023 0703 	bic.w	r7, r3, #3
 800070c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000710:	f006 0601 	and.w	r6, r6, #1
 8000714:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000718:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800071a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000720:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000722:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000726:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800072a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800072e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000732:	d02f      	beq.n	8000794 <HAL_GPIO_Init+0x15c>
 8000734:	4e1b      	ldr	r6, [pc, #108]	; (80007a4 <HAL_GPIO_Init+0x16c>)
 8000736:	42b0      	cmp	r0, r6
 8000738:	d02e      	beq.n	8000798 <HAL_GPIO_Init+0x160>
 800073a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800073e:	42b0      	cmp	r0, r6
 8000740:	d02c      	beq.n	800079c <HAL_GPIO_Init+0x164>
 8000742:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000746:	42b0      	cmp	r0, r6
 8000748:	bf14      	ite	ne
 800074a:	2605      	movne	r6, #5
 800074c:	2603      	moveq	r6, #3
 800074e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000752:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000756:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000758:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 800075a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800075c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000760:	bf0c      	ite	eq
 8000762:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000764:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000766:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000768:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800076e:	bf0c      	ite	eq
 8000770:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000772:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000774:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000776:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000778:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800077c:	bf0c      	ite	eq
 800077e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000780:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000782:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000784:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000786:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000788:	bf54      	ite	pl
 800078a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800078c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 800078e:	60d6      	str	r6, [r2, #12]
    position++;
 8000790:	3301      	adds	r3, #1
 8000792:	e75c      	b.n	800064e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000794:	2600      	movs	r6, #0
 8000796:	e7da      	b.n	800074e <HAL_GPIO_Init+0x116>
 8000798:	2601      	movs	r6, #1
 800079a:	e7d8      	b.n	800074e <HAL_GPIO_Init+0x116>
 800079c:	2602      	movs	r6, #2
 800079e:	e7d6      	b.n	800074e <HAL_GPIO_Init+0x116>
 80007a0:	40010400 	.word	0x40010400
 80007a4:	48000400 	.word	0x48000400
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007ac:	b10a      	cbz	r2, 80007b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007ae:	6181      	str	r1, [r0, #24]
 80007b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007b2:	6281      	str	r1, [r0, #40]	; 0x28
 80007b4:	4770      	bx	lr
	...

080007b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007bc:	4605      	mov	r5, r0
 80007be:	b908      	cbnz	r0, 80007c4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80007c0:	2001      	movs	r0, #1
 80007c2:	e05f      	b.n	8000884 <HAL_RCC_OscConfig+0xcc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007c4:	6803      	ldr	r3, [r0, #0]
 80007c6:	07da      	lsls	r2, r3, #31
 80007c8:	d411      	bmi.n	80007ee <HAL_RCC_OscConfig+0x36>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007ca:	682b      	ldr	r3, [r5, #0]
 80007cc:	079b      	lsls	r3, r3, #30
 80007ce:	f100 8087 	bmi.w	80008e0 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007d2:	682b      	ldr	r3, [r5, #0]
 80007d4:	071c      	lsls	r4, r3, #28
 80007d6:	f100 80f8 	bmi.w	80009ca <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007da:	682b      	ldr	r3, [r5, #0]
 80007dc:	0758      	lsls	r0, r3, #29
 80007de:	f100 8141 	bmi.w	8000a64 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007e2:	69e8      	ldr	r0, [r5, #28]
 80007e4:	2800      	cmp	r0, #0
 80007e6:	f040 81d8 	bne.w	8000b9a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }

  return HAL_OK;
 80007ea:	2000      	movs	r0, #0
 80007ec:	e04a      	b.n	8000884 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007ee:	4cbb      	ldr	r4, [pc, #748]	; (8000adc <HAL_RCC_OscConfig+0x324>)
 80007f0:	6863      	ldr	r3, [r4, #4]
 80007f2:	f003 030c 	and.w	r3, r3, #12
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	d007      	beq.n	800080a <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007fa:	6863      	ldr	r3, [r4, #4]
 80007fc:	f003 030c 	and.w	r3, r3, #12
 8000800:	2b08      	cmp	r3, #8
 8000802:	d116      	bne.n	8000832 <HAL_RCC_OscConfig+0x7a>
 8000804:	6863      	ldr	r3, [r4, #4]
 8000806:	03df      	lsls	r7, r3, #15
 8000808:	d513      	bpl.n	8000832 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800080a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800080e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000812:	6821      	ldr	r1, [r4, #0]
 8000814:	fa93 f3a3 	rbit	r3, r3
 8000818:	fab3 f383 	clz	r3, r3
 800081c:	f003 031f 	and.w	r3, r3, #31
 8000820:	2201      	movs	r2, #1
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	420b      	tst	r3, r1
 8000828:	d0cf      	beq.n	80007ca <HAL_RCC_OscConfig+0x12>
 800082a:	686b      	ldr	r3, [r5, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1cc      	bne.n	80007ca <HAL_RCC_OscConfig+0x12>
 8000830:	e7c6      	b.n	80007c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000832:	686a      	ldr	r2, [r5, #4]
 8000834:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000838:	d127      	bne.n	800088a <HAL_RCC_OscConfig+0xd2>
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000840:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000844:	68a9      	ldr	r1, [r5, #8]
 8000846:	f023 030f 	bic.w	r3, r3, #15
 800084a:	430b      	orrs	r3, r1
 800084c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800084e:	b362      	cbz	r2, 80008aa <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000850:	f7ff fcfc 	bl	800024c <HAL_GetTick>
 8000854:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000858:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800085a:	2701      	movs	r7, #1
 800085c:	fa96 f3a6 	rbit	r3, r6
 8000860:	6822      	ldr	r2, [r4, #0]
 8000862:	fa96 f3a6 	rbit	r3, r6
 8000866:	fab3 f383 	clz	r3, r3
 800086a:	f003 031f 	and.w	r3, r3, #31
 800086e:	fa07 f303 	lsl.w	r3, r7, r3
 8000872:	4213      	tst	r3, r2
 8000874:	d1a9      	bne.n	80007ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000876:	f7ff fce9 	bl	800024c <HAL_GetTick>
 800087a:	eba0 0008 	sub.w	r0, r0, r8
 800087e:	2864      	cmp	r0, #100	; 0x64
 8000880:	d9ec      	bls.n	800085c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000882:	2003      	movs	r0, #3
}
 8000884:	b002      	add	sp, #8
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088a:	6823      	ldr	r3, [r4, #0]
 800088c:	b932      	cbnz	r2, 800089c <HAL_RCC_OscConfig+0xe4>
 800088e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000892:	6023      	str	r3, [r4, #0]
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800089a:	e7d1      	b.n	8000840 <HAL_RCC_OscConfig+0x88>
 800089c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80008a0:	d1f5      	bne.n	800088e <HAL_RCC_OscConfig+0xd6>
 80008a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a6:	6023      	str	r3, [r4, #0]
 80008a8:	e7c7      	b.n	800083a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80008aa:	f7ff fccf 	bl	800024c <HAL_GetTick>
 80008ae:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80008b2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b4:	2701      	movs	r7, #1
 80008b6:	fa96 f3a6 	rbit	r3, r6
 80008ba:	6822      	ldr	r2, [r4, #0]
 80008bc:	fa96 f3a6 	rbit	r3, r6
 80008c0:	fab3 f383 	clz	r3, r3
 80008c4:	f003 031f 	and.w	r3, r3, #31
 80008c8:	fa07 f303 	lsl.w	r3, r7, r3
 80008cc:	4213      	tst	r3, r2
 80008ce:	f43f af7c 	beq.w	80007ca <HAL_RCC_OscConfig+0x12>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d2:	f7ff fcbb 	bl	800024c <HAL_GetTick>
 80008d6:	eba0 0008 	sub.w	r0, r0, r8
 80008da:	2864      	cmp	r0, #100	; 0x64
 80008dc:	d9eb      	bls.n	80008b6 <HAL_RCC_OscConfig+0xfe>
 80008de:	e7d0      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008e0:	4c7e      	ldr	r4, [pc, #504]	; (8000adc <HAL_RCC_OscConfig+0x324>)
 80008e2:	6863      	ldr	r3, [r4, #4]
 80008e4:	f013 0f0c 	tst.w	r3, #12
 80008e8:	d007      	beq.n	80008fa <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008ea:	6863      	ldr	r3, [r4, #4]
 80008ec:	f003 030c 	and.w	r3, r3, #12
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d122      	bne.n	800093a <HAL_RCC_OscConfig+0x182>
 80008f4:	6863      	ldr	r3, [r4, #4]
 80008f6:	03de      	lsls	r6, r3, #15
 80008f8:	d41f      	bmi.n	800093a <HAL_RCC_OscConfig+0x182>
 80008fa:	2302      	movs	r3, #2
 80008fc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000900:	6821      	ldr	r1, [r4, #0]
 8000902:	fa93 f3a3 	rbit	r3, r3
 8000906:	fab3 f383 	clz	r3, r3
 800090a:	f003 031f 	and.w	r3, r3, #31
 800090e:	2201      	movs	r2, #1
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	420b      	tst	r3, r1
 8000916:	d003      	beq.n	8000920 <HAL_RCC_OscConfig+0x168>
 8000918:	692b      	ldr	r3, [r5, #16]
 800091a:	4293      	cmp	r3, r2
 800091c:	f47f af50 	bne.w	80007c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000920:	6821      	ldr	r1, [r4, #0]
 8000922:	23f8      	movs	r3, #248	; 0xf8
 8000924:	fa93 f3a3 	rbit	r3, r3
 8000928:	fab3 f283 	clz	r2, r3
 800092c:	696b      	ldr	r3, [r5, #20]
 800092e:	4093      	lsls	r3, r2
 8000930:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000934:	4313      	orrs	r3, r2
 8000936:	6023      	str	r3, [r4, #0]
 8000938:	e74b      	b.n	80007d2 <HAL_RCC_OscConfig+0x1a>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800093a:	692a      	ldr	r2, [r5, #16]
 800093c:	2601      	movs	r6, #1
 800093e:	b30a      	cbz	r2, 8000984 <HAL_RCC_OscConfig+0x1cc>
 8000940:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000944:	fab3 f383 	clz	r3, r3
 8000948:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800094c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	2702      	movs	r7, #2
 8000954:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000956:	f7ff fc79 	bl	800024c <HAL_GetTick>
 800095a:	4680      	mov	r8, r0
 800095c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000960:	6822      	ldr	r2, [r4, #0]
 8000962:	fa97 f3a7 	rbit	r3, r7
 8000966:	fab3 f383 	clz	r3, r3
 800096a:	f003 031f 	and.w	r3, r3, #31
 800096e:	fa06 f303 	lsl.w	r3, r6, r3
 8000972:	4213      	tst	r3, r2
 8000974:	d1d4      	bne.n	8000920 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000976:	f7ff fc69 	bl	800024c <HAL_GetTick>
 800097a:	eba0 0008 	sub.w	r0, r0, r8
 800097e:	2802      	cmp	r0, #2
 8000980:	d9ec      	bls.n	800095c <HAL_RCC_OscConfig+0x1a4>
 8000982:	e77e      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
 8000984:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000988:	fab3 f383 	clz	r3, r3
 800098c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000990:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	2702      	movs	r7, #2
 8000998:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800099a:	f7ff fc57 	bl	800024c <HAL_GetTick>
 800099e:	4680      	mov	r8, r0
 80009a0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a4:	6822      	ldr	r2, [r4, #0]
 80009a6:	fa97 f3a7 	rbit	r3, r7
 80009aa:	fab3 f383 	clz	r3, r3
 80009ae:	f003 031f 	and.w	r3, r3, #31
 80009b2:	fa06 f303 	lsl.w	r3, r6, r3
 80009b6:	4213      	tst	r3, r2
 80009b8:	f43f af0b 	beq.w	80007d2 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009bc:	f7ff fc46 	bl	800024c <HAL_GetTick>
 80009c0:	eba0 0008 	sub.w	r0, r0, r8
 80009c4:	2802      	cmp	r0, #2
 80009c6:	d9eb      	bls.n	80009a0 <HAL_RCC_OscConfig+0x1e8>
 80009c8:	e75b      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009ca:	69aa      	ldr	r2, [r5, #24]
 80009cc:	4e43      	ldr	r6, [pc, #268]	; (8000adc <HAL_RCC_OscConfig+0x324>)
 80009ce:	4944      	ldr	r1, [pc, #272]	; (8000ae0 <HAL_RCC_OscConfig+0x328>)
 80009d0:	2401      	movs	r4, #1
 80009d2:	b31a      	cbz	r2, 8000a1c <HAL_RCC_OscConfig+0x264>
 80009d4:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80009d8:	fab3 f383 	clz	r3, r3
 80009dc:	440b      	add	r3, r1
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	2702      	movs	r7, #2
 80009e2:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80009e4:	f7ff fc32 	bl	800024c <HAL_GetTick>
 80009e8:	4680      	mov	r8, r0
 80009ea:	fa97 f3a7 	rbit	r3, r7
 80009ee:	fa97 f3a7 	rbit	r3, r7
 80009f2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009f6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80009f8:	fa97 f3a7 	rbit	r3, r7
 80009fc:	fab3 f383 	clz	r3, r3
 8000a00:	f003 031f 	and.w	r3, r3, #31
 8000a04:	fa04 f303 	lsl.w	r3, r4, r3
 8000a08:	4213      	tst	r3, r2
 8000a0a:	f47f aee6 	bne.w	80007da <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a0e:	f7ff fc1d 	bl	800024c <HAL_GetTick>
 8000a12:	eba0 0008 	sub.w	r0, r0, r8
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d9e7      	bls.n	80009ea <HAL_RCC_OscConfig+0x232>
 8000a1a:	e732      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
 8000a1c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000a20:	fab3 f383 	clz	r3, r3
 8000a24:	440b      	add	r3, r1
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	2702      	movs	r7, #2
 8000a2a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a2c:	f7ff fc0e 	bl	800024c <HAL_GetTick>
 8000a30:	4680      	mov	r8, r0
 8000a32:	fa97 f3a7 	rbit	r3, r7
 8000a36:	fa97 f3a7 	rbit	r3, r7
 8000a3a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a3e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000a40:	fa97 f3a7 	rbit	r3, r7
 8000a44:	fab3 f383 	clz	r3, r3
 8000a48:	f003 031f 	and.w	r3, r3, #31
 8000a4c:	fa04 f303 	lsl.w	r3, r4, r3
 8000a50:	4213      	tst	r3, r2
 8000a52:	f43f aec2 	beq.w	80007da <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a56:	f7ff fbf9 	bl	800024c <HAL_GetTick>
 8000a5a:	eba0 0008 	sub.w	r0, r0, r8
 8000a5e:	2802      	cmp	r0, #2
 8000a60:	d9e7      	bls.n	8000a32 <HAL_RCC_OscConfig+0x27a>
 8000a62:	e70e      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a64:	4c1d      	ldr	r4, [pc, #116]	; (8000adc <HAL_RCC_OscConfig+0x324>)
 8000a66:	69e3      	ldr	r3, [r4, #28]
 8000a68:	00d9      	lsls	r1, r3, #3
 8000a6a:	d434      	bmi.n	8000ad6 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	69e3      	ldr	r3, [r4, #28]
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	61e3      	str	r3, [r4, #28]
 8000a74:	69e3      	ldr	r3, [r4, #28]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a7e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a80:	4f18      	ldr	r7, [pc, #96]	; (8000ae4 <HAL_RCC_OscConfig+0x32c>)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	05da      	lsls	r2, r3, #23
 8000a86:	d52f      	bpl.n	8000ae8 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a88:	68eb      	ldr	r3, [r5, #12]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d13d      	bne.n	8000b0a <HAL_RCC_OscConfig+0x352>
 8000a8e:	6a23      	ldr	r3, [r4, #32]
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a96:	f7ff fbd9 	bl	800024c <HAL_GetTick>
 8000a9a:	2702      	movs	r7, #2
 8000a9c:	4682      	mov	sl, r0
 8000a9e:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa0:	f04f 0801 	mov.w	r8, #1
 8000aa4:	fa97 f3a7 	rbit	r3, r7
 8000aa8:	fa97 f3a7 	rbit	r3, r7
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d06c      	beq.n	8000b8a <HAL_RCC_OscConfig+0x3d2>
 8000ab0:	6a22      	ldr	r2, [r4, #32]
 8000ab2:	fa99 f3a9 	rbit	r3, r9
 8000ab6:	fab3 f383 	clz	r3, r3
 8000aba:	f003 031f 	and.w	r3, r3, #31
 8000abe:	fa08 f303 	lsl.w	r3, r8, r3
 8000ac2:	4213      	tst	r3, r2
 8000ac4:	d058      	beq.n	8000b78 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	f43f ae8b 	beq.w	80007e2 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000acc:	69e3      	ldr	r3, [r4, #28]
 8000ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	61e3      	str	r3, [r4, #28]
 8000ad4:	e685      	b.n	80007e2 <HAL_RCC_OscConfig+0x2a>
    FlagStatus       pwrclkchanged = RESET;
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	e7d2      	b.n	8000a80 <HAL_RCC_OscConfig+0x2c8>
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	10908120 	.word	0x10908120
 8000ae4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000af0:	f7ff fbac 	bl	800024c <HAL_GetTick>
 8000af4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	d4c5      	bmi.n	8000a88 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000afc:	f7ff fba6 	bl	800024c <HAL_GetTick>
 8000b00:	eba0 0008 	sub.w	r0, r0, r8
 8000b04:	2864      	cmp	r0, #100	; 0x64
 8000b06:	d9f6      	bls.n	8000af6 <HAL_RCC_OscConfig+0x33e>
 8000b08:	e6bb      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0a:	bb3b      	cbnz	r3, 8000b5c <HAL_RCC_OscConfig+0x3a4>
 8000b0c:	6a23      	ldr	r3, [r4, #32]
 8000b0e:	f023 0301 	bic.w	r3, r3, #1
 8000b12:	6223      	str	r3, [r4, #32]
 8000b14:	6a23      	ldr	r3, [r4, #32]
 8000b16:	f023 0304 	bic.w	r3, r3, #4
 8000b1a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b1c:	f7ff fb96 	bl	800024c <HAL_GetTick>
 8000b20:	2702      	movs	r7, #2
 8000b22:	4682      	mov	sl, r0
 8000b24:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b26:	f04f 0801 	mov.w	r8, #1
 8000b2a:	fa97 f3a7 	rbit	r3, r7
 8000b2e:	fa97 f3a7 	rbit	r3, r7
 8000b32:	b373      	cbz	r3, 8000b92 <HAL_RCC_OscConfig+0x3da>
 8000b34:	6a22      	ldr	r2, [r4, #32]
 8000b36:	fa99 f3a9 	rbit	r3, r9
 8000b3a:	fab3 f383 	clz	r3, r3
 8000b3e:	f003 031f 	and.w	r3, r3, #31
 8000b42:	fa08 f303 	lsl.w	r3, r8, r3
 8000b46:	4213      	tst	r3, r2
 8000b48:	d0bd      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4a:	f7ff fb7f 	bl	800024c <HAL_GetTick>
 8000b4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b52:	eba0 000a 	sub.w	r0, r0, sl
 8000b56:	4298      	cmp	r0, r3
 8000b58:	d9e7      	bls.n	8000b2a <HAL_RCC_OscConfig+0x372>
 8000b5a:	e692      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b5c:	2b05      	cmp	r3, #5
 8000b5e:	6a23      	ldr	r3, [r4, #32]
 8000b60:	d103      	bne.n	8000b6a <HAL_RCC_OscConfig+0x3b2>
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6223      	str	r3, [r4, #32]
 8000b68:	e791      	b.n	8000a8e <HAL_RCC_OscConfig+0x2d6>
 8000b6a:	f023 0301 	bic.w	r3, r3, #1
 8000b6e:	6223      	str	r3, [r4, #32]
 8000b70:	6a23      	ldr	r3, [r4, #32]
 8000b72:	f023 0304 	bic.w	r3, r3, #4
 8000b76:	e78d      	b.n	8000a94 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b78:	f7ff fb68 	bl	800024c <HAL_GetTick>
 8000b7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b80:	eba0 000a 	sub.w	r0, r0, sl
 8000b84:	4298      	cmp	r0, r3
 8000b86:	d98d      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x2ec>
 8000b88:	e67b      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
 8000b8a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b90:	e78f      	b.n	8000ab2 <HAL_RCC_OscConfig+0x2fa>
 8000b92:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b98:	e7cd      	b.n	8000b36 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b9a:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <HAL_RCC_OscConfig+0x50c>)
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	f002 020c 	and.w	r2, r2, #12
 8000ba2:	2a08      	cmp	r2, #8
 8000ba4:	461c      	mov	r4, r3
 8000ba6:	d07b      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x4e8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ba8:	2802      	cmp	r0, #2
 8000baa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bae:	d152      	bne.n	8000c56 <HAL_RCC_OscConfig+0x49e>
 8000bb0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000bb4:	fab3 f383 	clz	r3, r3
 8000bb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bc6:	f7ff fb41 	bl	800024c <HAL_GetTick>
 8000bca:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000bce:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	fa97 f3a7 	rbit	r3, r7
 8000bd6:	6822      	ldr	r2, [r4, #0]
 8000bd8:	fa97 f3a7 	rbit	r3, r7
 8000bdc:	fab3 f383 	clz	r3, r3
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	fa06 f303 	lsl.w	r3, r6, r3
 8000be8:	4213      	tst	r3, r2
 8000bea:	d12d      	bne.n	8000c48 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bec:	6862      	ldr	r2, [r4, #4]
 8000bee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000bf0:	6a29      	ldr	r1, [r5, #32]
 8000bf2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	6063      	str	r3, [r4, #4]
 8000bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c00:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000c04:	fab3 f383 	clz	r3, r3
 8000c08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000c16:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000c18:	f7ff fb18 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c1c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000c1e:	4607      	mov	r7, r0
 8000c20:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c24:	6822      	ldr	r2, [r4, #0]
 8000c26:	fa95 f3a5 	rbit	r3, r5
 8000c2a:	fab3 f383 	clz	r3, r3
 8000c2e:	f003 031f 	and.w	r3, r3, #31
 8000c32:	fa06 f303 	lsl.w	r3, r6, r3
 8000c36:	4213      	tst	r3, r2
 8000c38:	f47f add7 	bne.w	80007ea <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c3c:	f7ff fb06 	bl	800024c <HAL_GetTick>
 8000c40:	1bc0      	subs	r0, r0, r7
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d9ec      	bls.n	8000c20 <HAL_RCC_OscConfig+0x468>
 8000c46:	e61c      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c48:	f7ff fb00 	bl	800024c <HAL_GetTick>
 8000c4c:	eba0 0008 	sub.w	r0, r0, r8
 8000c50:	2802      	cmp	r0, #2
 8000c52:	d9be      	bls.n	8000bd2 <HAL_RCC_OscConfig+0x41a>
 8000c54:	e615      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
 8000c56:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000c5a:	fab3 f383 	clz	r3, r3
 8000c5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c6c:	f7ff faee 	bl	800024c <HAL_GetTick>
 8000c70:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000c74:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c76:	2601      	movs	r6, #1
 8000c78:	fa95 f3a5 	rbit	r3, r5
 8000c7c:	6822      	ldr	r2, [r4, #0]
 8000c7e:	fa95 f3a5 	rbit	r3, r5
 8000c82:	fab3 f383 	clz	r3, r3
 8000c86:	f003 031f 	and.w	r3, r3, #31
 8000c8a:	fa06 f303 	lsl.w	r3, r6, r3
 8000c8e:	4213      	tst	r3, r2
 8000c90:	f43f adab 	beq.w	80007ea <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c94:	f7ff fada 	bl	800024c <HAL_GetTick>
 8000c98:	1bc0      	subs	r0, r0, r7
 8000c9a:	2802      	cmp	r0, #2
 8000c9c:	d9ec      	bls.n	8000c78 <HAL_RCC_OscConfig+0x4c0>
 8000c9e:	e5f0      	b.n	8000882 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ca0:	2801      	cmp	r0, #1
 8000ca2:	f43f adef 	beq.w	8000884 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 8000ca6:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000ca8:	6a2b      	ldr	r3, [r5, #32]
 8000caa:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	f47f ad86 	bne.w	80007c0 <HAL_RCC_OscConfig+0x8>
 8000cb4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8000cb6:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000cba:	1ac0      	subs	r0, r0, r3
 8000cbc:	bf18      	it	ne
 8000cbe:	2001      	movne	r0, #1
 8000cc0:	e5e0      	b.n	8000884 <HAL_RCC_OscConfig+0xcc>
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cc8:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000cca:	4c13      	ldr	r4, [pc, #76]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x50>)
 8000ccc:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000cce:	f001 030c 	and.w	r3, r1, #12
 8000cd2:	2b08      	cmp	r3, #8
 8000cd4:	d11e      	bne.n	8000d14 <HAL_RCC_GetSysClockFreq+0x4c>
 8000cd6:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000cda:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000cde:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000ce2:	fab3 f383 	clz	r3, r3
 8000ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cea:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <HAL_RCC_GetSysClockFreq+0x54>)
 8000cec:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000cee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	fa92 f2a2 	rbit	r2, r2
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	40d3      	lsrs	r3, r2
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d02:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000d04:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000d06:	bf4a      	itet	mi
 8000d08:	4b06      	ldrmi	r3, [pc, #24]	; (8000d24 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000d0a:	4b07      	ldrpl	r3, [pc, #28]	; (8000d28 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000d0c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000d10:	4358      	muls	r0, r3
 8000d12:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d16:	bd10      	pop	{r4, pc}
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	08001c20 	.word	0x08001c20
 8000d20:	08001c30 	.word	0x08001c30
 8000d24:	007a1200 	.word	0x007a1200
 8000d28:	003d0900 	.word	0x003d0900

08000d2c <HAL_RCC_ClockConfig>:
{
 8000d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d30:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d32:	4604      	mov	r4, r0
 8000d34:	b910      	cbnz	r0, 8000d3c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d36:	2001      	movs	r0, #1
 8000d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d3c:	4a4d      	ldr	r2, [pc, #308]	; (8000e74 <HAL_RCC_ClockConfig+0x148>)
 8000d3e:	6813      	ldr	r3, [r2, #0]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d32f      	bcc.n	8000da8 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d48:	6822      	ldr	r2, [r4, #0]
 8000d4a:	0791      	lsls	r1, r2, #30
 8000d4c:	d437      	bmi.n	8000dbe <HAL_RCC_ClockConfig+0x92>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d4e:	07d2      	lsls	r2, r2, #31
 8000d50:	d43d      	bmi.n	8000dce <HAL_RCC_ClockConfig+0xa2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d52:	4a48      	ldr	r2, [pc, #288]	; (8000e74 <HAL_RCC_ClockConfig+0x148>)
 8000d54:	6813      	ldr	r3, [r2, #0]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	429d      	cmp	r5, r3
 8000d5c:	d376      	bcc.n	8000e4c <HAL_RCC_ClockConfig+0x120>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d5e:	6822      	ldr	r2, [r4, #0]
 8000d60:	4d45      	ldr	r5, [pc, #276]	; (8000e78 <HAL_RCC_ClockConfig+0x14c>)
 8000d62:	f012 0f04 	tst.w	r2, #4
 8000d66:	d17d      	bne.n	8000e64 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d68:	0713      	lsls	r3, r2, #28
 8000d6a:	d506      	bpl.n	8000d7a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d6c:	686b      	ldr	r3, [r5, #4]
 8000d6e:	6922      	ldr	r2, [r4, #16]
 8000d70:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d78:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d7a:	f7ff ffa5 	bl	8000cc8 <HAL_RCC_GetSysClockFreq>
 8000d7e:	686b      	ldr	r3, [r5, #4]
 8000d80:	22f0      	movs	r2, #240	; 0xf0
 8000d82:	fa92 f2a2 	rbit	r2, r2
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d8e:	40d3      	lsrs	r3, r2
 8000d90:	4a3a      	ldr	r2, [pc, #232]	; (8000e7c <HAL_RCC_ClockConfig+0x150>)
 8000d92:	5cd3      	ldrb	r3, [r2, r3]
 8000d94:	40d8      	lsrs	r0, r3
 8000d96:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <HAL_RCC_ClockConfig+0x154>)
 8000d98:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000d9a:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <HAL_RCC_ClockConfig+0x158>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f7ff fa13 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000da2:	2000      	movs	r0, #0
 8000da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da8:	6813      	ldr	r3, [r2, #0]
 8000daa:	f023 0307 	bic.w	r3, r3, #7
 8000dae:	430b      	orrs	r3, r1
 8000db0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d1bc      	bne.n	8000d36 <HAL_RCC_ClockConfig+0xa>
 8000dbc:	e7c4      	b.n	8000d48 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dbe:	492e      	ldr	r1, [pc, #184]	; (8000e78 <HAL_RCC_ClockConfig+0x14c>)
 8000dc0:	68a0      	ldr	r0, [r4, #8]
 8000dc2:	684b      	ldr	r3, [r1, #4]
 8000dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dc8:	4303      	orrs	r3, r0
 8000dca:	604b      	str	r3, [r1, #4]
 8000dcc:	e7bf      	b.n	8000d4e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dce:	6862      	ldr	r2, [r4, #4]
 8000dd0:	4e29      	ldr	r6, [pc, #164]	; (8000e78 <HAL_RCC_ClockConfig+0x14c>)
 8000dd2:	2a01      	cmp	r2, #1
 8000dd4:	d127      	bne.n	8000e26 <HAL_RCC_ClockConfig+0xfa>
 8000dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dda:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	6831      	ldr	r1, [r6, #0]
 8000de0:	fa93 f3a3 	rbit	r3, r3
 8000de4:	fab3 f383 	clz	r3, r3
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df2:	d0a0      	beq.n	8000d36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000df4:	6873      	ldr	r3, [r6, #4]
 8000df6:	f023 0303 	bic.w	r3, r3, #3
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000dfe:	f7ff fa25 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e02:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e06:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e08:	6873      	ldr	r3, [r6, #4]
 8000e0a:	6862      	ldr	r2, [r4, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e14:	d09d      	beq.n	8000d52 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e16:	f7ff fa19 	bl	800024c <HAL_GetTick>
 8000e1a:	1bc0      	subs	r0, r0, r7
 8000e1c:	4540      	cmp	r0, r8
 8000e1e:	d9f3      	bls.n	8000e08 <HAL_RCC_ClockConfig+0xdc>
        return HAL_TIMEOUT;
 8000e20:	2003      	movs	r0, #3
}
 8000e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e26:	2a02      	cmp	r2, #2
 8000e28:	bf0c      	ite	eq
 8000e2a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000e2e:	2302      	movne	r3, #2
 8000e30:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e34:	6830      	ldr	r0, [r6, #0]
 8000e36:	fa93 f3a3 	rbit	r3, r3
 8000e3a:	fab3 f383 	clz	r3, r3
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	4203      	tst	r3, r0
 8000e4a:	e7d2      	b.n	8000df2 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e4c:	6813      	ldr	r3, [r2, #0]
 8000e4e:	f023 0307 	bic.w	r3, r3, #7
 8000e52:	432b      	orrs	r3, r5
 8000e54:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e56:	6813      	ldr	r3, [r2, #0]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	429d      	cmp	r5, r3
 8000e5e:	f47f af6a 	bne.w	8000d36 <HAL_RCC_ClockConfig+0xa>
 8000e62:	e77c      	b.n	8000d5e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e64:	686b      	ldr	r3, [r5, #4]
 8000e66:	68e1      	ldr	r1, [r4, #12]
 8000e68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	606b      	str	r3, [r5, #4]
 8000e70:	e77a      	b.n	8000d68 <HAL_RCC_ClockConfig+0x3c>
 8000e72:	bf00      	nop
 8000e74:	40022000 	.word	0x40022000
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	08001c40 	.word	0x08001c40
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e88:	6803      	ldr	r3, [r0, #0]
{
 8000e8a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e8e:	03dd      	lsls	r5, r3, #15
{
 8000e90:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e92:	d522      	bpl.n	8000eda <HAL_RCCEx_PeriphCLKConfig+0x52>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e94:	4d72      	ldr	r5, [pc, #456]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000e96:	69eb      	ldr	r3, [r5, #28]
 8000e98:	00d8      	lsls	r0, r3, #3
 8000e9a:	f100 8085 	bmi.w	8000fa8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	69eb      	ldr	r3, [r5, #28]
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61eb      	str	r3, [r5, #28]
 8000ea6:	69eb      	ldr	r3, [r5, #28]
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000eb0:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb2:	4f6c      	ldr	r7, [pc, #432]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	05d9      	lsls	r1, r3, #23
 8000eb8:	d578      	bpl.n	8000fac <HAL_RCCEx_PeriphCLKConfig+0x124>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000eba:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ebc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000ec0:	f040 8089 	bne.w	8000fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000ec4:	6a2b      	ldr	r3, [r5, #32]
 8000ec6:	6862      	ldr	r2, [r4, #4]
 8000ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ed0:	b11e      	cbz	r6, 8000eda <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed2:	69eb      	ldr	r3, [r5, #28]
 8000ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000eda:	6820      	ldr	r0, [r4, #0]
 8000edc:	07c5      	lsls	r5, r0, #31
 8000ede:	d506      	bpl.n	8000eee <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000ee0:	4a5f      	ldr	r2, [pc, #380]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000ee2:	68a1      	ldr	r1, [r4, #8]
 8000ee4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ee6:	f023 0303 	bic.w	r3, r3, #3
 8000eea:	430b      	orrs	r3, r1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000eee:	0681      	lsls	r1, r0, #26
 8000ef0:	d506      	bpl.n	8000f00 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000ef2:	4a5b      	ldr	r2, [pc, #364]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000ef4:	68e1      	ldr	r1, [r4, #12]
 8000ef6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ef8:	f023 0310 	bic.w	r3, r3, #16
 8000efc:	430b      	orrs	r3, r1
 8000efe:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000f00:	0382      	lsls	r2, r0, #14
 8000f02:	d506      	bpl.n	8000f12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000f04:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000f06:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000f08:	6853      	ldr	r3, [r2, #4]
 8000f0a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000f12:	0643      	lsls	r3, r0, #25
 8000f14:	d506      	bpl.n	8000f24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000f16:	4a52      	ldr	r2, [pc, #328]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000f18:	6921      	ldr	r1, [r4, #16]
 8000f1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f1c:	f023 0320 	bic.w	r3, r3, #32
 8000f20:	430b      	orrs	r3, r1
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f24:	0407      	lsls	r7, r0, #16
 8000f26:	d506      	bpl.n	8000f36 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f28:	4a4d      	ldr	r2, [pc, #308]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000f2a:	6961      	ldr	r1, [r4, #20]
 8000f2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f32:	430b      	orrs	r3, r1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000f36:	0586      	lsls	r6, r0, #22
 8000f38:	d506      	bpl.n	8000f48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000f3a:	4a49      	ldr	r2, [pc, #292]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000f3c:	69e1      	ldr	r1, [r4, #28]
 8000f3e:	6853      	ldr	r3, [r2, #4]
 8000f40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f44:	430b      	orrs	r3, r1
 8000f46:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8000f48:	0605      	lsls	r5, r0, #24
 8000f4a:	d506      	bpl.n	8000f5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8000f4c:	4a44      	ldr	r2, [pc, #272]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000f4e:	69a1      	ldr	r1, [r4, #24]
 8000f50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000f52:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000f56:	430b      	orrs	r3, r1
 8000f58:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000f5a:	04c1      	lsls	r1, r0, #19
 8000f5c:	d506      	bpl.n	8000f6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000f5e:	4a40      	ldr	r2, [pc, #256]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000f60:	6a21      	ldr	r1, [r4, #32]
 8000f62:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000f6c:	0342      	lsls	r2, r0, #13
 8000f6e:	d506      	bpl.n	8000f7e <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000f70:	4a3b      	ldr	r2, [pc, #236]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000f72:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000f7e:	0303      	lsls	r3, r0, #12
 8000f80:	d506      	bpl.n	8000f90 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000f82:	4a37      	ldr	r2, [pc, #220]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000f84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000f86:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000f90:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8000f94:	d01c      	beq.n	8000fd0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000f96:	4a32      	ldr	r2, [pc, #200]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000f98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	e013      	b.n	8000fd0 <HAL_RCCEx_PeriphCLKConfig+0x148>
    FlagStatus       pwrclkchanged = RESET;
 8000fa8:	2600      	movs	r6, #0
 8000faa:	e782      	b.n	8000eb2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000fb4:	f7ff f94a 	bl	800024c <HAL_GetTick>
 8000fb8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	05da      	lsls	r2, r3, #23
 8000fbe:	f53f af7c 	bmi.w	8000eba <HAL_RCCEx_PeriphCLKConfig+0x32>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc2:	f7ff f943 	bl	800024c <HAL_GetTick>
 8000fc6:	eba0 0008 	sub.w	r0, r0, r8
 8000fca:	2864      	cmp	r0, #100	; 0x64
 8000fcc:	d9f5      	bls.n	8000fba <HAL_RCCEx_PeriphCLKConfig+0x132>
          return HAL_TIMEOUT;
 8000fce:	2003      	movs	r0, #3
}
 8000fd0:	b002      	add	sp, #8
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fd6:	6862      	ldr	r2, [r4, #4]
 8000fd8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	f43f af71 	beq.w	8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000fe2:	6a29      	ldr	r1, [r5, #32]
 8000fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000fec:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ff0:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001068 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	4472      	add	r2, lr
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	2701      	movs	r7, #1
 8000ffe:	6017      	str	r7, [r2, #0]
 8001000:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	4473      	add	r3, lr
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001010:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8001012:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001014:	f57f af56 	bpl.w	8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 8001018:	f7ff f918 	bl	800024c <HAL_GetTick>
 800101c:	f04f 0802 	mov.w	r8, #2
 8001020:	4682      	mov	sl, r0
 8001022:	46c1      	mov	r9, r8
 8001024:	fa98 f3a8 	rbit	r3, r8
 8001028:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800102c:	b1a3      	cbz	r3, 8001058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800102e:	6a2a      	ldr	r2, [r5, #32]
 8001030:	fa99 f3a9 	rbit	r3, r9
 8001034:	fab3 f383 	clz	r3, r3
 8001038:	f003 031f 	and.w	r3, r3, #31
 800103c:	fa07 f303 	lsl.w	r3, r7, r3
 8001040:	4213      	tst	r3, r2
 8001042:	f47f af3f 	bne.w	8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001046:	f7ff f901 	bl	800024c <HAL_GetTick>
 800104a:	f241 3388 	movw	r3, #5000	; 0x1388
 800104e:	eba0 000a 	sub.w	r0, r0, sl
 8001052:	4298      	cmp	r0, r3
 8001054:	d9e6      	bls.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001056:	e7ba      	b.n	8000fce <HAL_RCCEx_PeriphCLKConfig+0x146>
 8001058:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800105e:	e7e7      	b.n	8001030 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8001060:	40021000 	.word	0x40021000
 8001064:	40007000 	.word	0x40007000
 8001068:	10908100 	.word	0x10908100

0800106c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800106c:	6a03      	ldr	r3, [r0, #32]
 800106e:	f023 0301 	bic.w	r3, r3, #1
 8001072:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001074:	6a03      	ldr	r3, [r0, #32]
{
 8001076:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001078:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800107a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800107c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800107e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001082:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001086:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001088:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800108a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800108e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001090:	4d17      	ldr	r5, [pc, #92]	; (80010f0 <TIM_OC1_SetConfig+0x84>)
 8001092:	42a8      	cmp	r0, r5
 8001094:	d00b      	beq.n	80010ae <TIM_OC1_SetConfig+0x42>
 8001096:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800109a:	42a8      	cmp	r0, r5
 800109c:	d007      	beq.n	80010ae <TIM_OC1_SetConfig+0x42>
 800109e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a2:	42a8      	cmp	r0, r5
 80010a4:	d003      	beq.n	80010ae <TIM_OC1_SetConfig+0x42>
 80010a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010aa:	42a8      	cmp	r0, r5
 80010ac:	d11a      	bne.n	80010e4 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80010ae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80010b0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80010b4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010b6:	4d0e      	ldr	r5, [pc, #56]	; (80010f0 <TIM_OC1_SetConfig+0x84>)
 80010b8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80010ba:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010be:	d00b      	beq.n	80010d8 <TIM_OC1_SetConfig+0x6c>
 80010c0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80010c4:	42a8      	cmp	r0, r5
 80010c6:	d007      	beq.n	80010d8 <TIM_OC1_SetConfig+0x6c>
 80010c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010cc:	42a8      	cmp	r0, r5
 80010ce:	d003      	beq.n	80010d8 <TIM_OC1_SetConfig+0x6c>
 80010d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010d4:	42a8      	cmp	r0, r5
 80010d6:	d105      	bne.n	80010e4 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80010d8:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80010dc:	698e      	ldr	r6, [r1, #24]
 80010de:	694c      	ldr	r4, [r1, #20]
 80010e0:	4334      	orrs	r4, r6
 80010e2:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010e4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80010e6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80010e8:	684a      	ldr	r2, [r1, #4]
 80010ea:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80010ec:	6203      	str	r3, [r0, #32]
 80010ee:	bd70      	pop	{r4, r5, r6, pc}
 80010f0:	40012c00 	.word	0x40012c00

080010f4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80010f4:	6a03      	ldr	r3, [r0, #32]
 80010f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010fa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010fc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010fe:	6842      	ldr	r2, [r0, #4]
{
 8001100:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001102:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001104:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001106:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800110a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800110e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001110:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001112:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001116:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800111a:	4d11      	ldr	r5, [pc, #68]	; (8001160 <TIM_OC3_SetConfig+0x6c>)
 800111c:	42a8      	cmp	r0, r5
 800111e:	d10e      	bne.n	800113e <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001120:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001126:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800112a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800112e:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001130:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001132:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001136:	4335      	orrs	r5, r6
 8001138:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800113c:	e009      	b.n	8001152 <TIM_OC3_SetConfig+0x5e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800113e:	4d09      	ldr	r5, [pc, #36]	; (8001164 <TIM_OC3_SetConfig+0x70>)
 8001140:	42a8      	cmp	r0, r5
 8001142:	d0f4      	beq.n	800112e <TIM_OC3_SetConfig+0x3a>
 8001144:	4d08      	ldr	r5, [pc, #32]	; (8001168 <TIM_OC3_SetConfig+0x74>)
 8001146:	42a8      	cmp	r0, r5
 8001148:	d0f1      	beq.n	800112e <TIM_OC3_SetConfig+0x3a>
 800114a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800114e:	42a8      	cmp	r0, r5
 8001150:	d0ed      	beq.n	800112e <TIM_OC3_SetConfig+0x3a>
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001152:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001154:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001156:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001158:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800115a:	6203      	str	r3, [r0, #32]
}
 800115c:	bd70      	pop	{r4, r5, r6, pc}
 800115e:	bf00      	nop
 8001160:	40012c00 	.word	0x40012c00
 8001164:	40014000 	.word	0x40014000
 8001168:	40014400 	.word	0x40014400

0800116c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800116c:	6a03      	ldr	r3, [r0, #32]
 800116e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001172:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001174:	6a02      	ldr	r2, [r0, #32]
{
 8001176:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001178:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800117a:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800117c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800117e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001182:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001186:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800118a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800118c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001190:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001194:	4d0c      	ldr	r5, [pc, #48]	; (80011c8 <TIM_OC4_SetConfig+0x5c>)
 8001196:	42a8      	cmp	r0, r5
 8001198:	d00b      	beq.n	80011b2 <TIM_OC4_SetConfig+0x46>
 800119a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800119e:	42a8      	cmp	r0, r5
 80011a0:	d007      	beq.n	80011b2 <TIM_OC4_SetConfig+0x46>
 80011a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011a6:	42a8      	cmp	r0, r5
 80011a8:	d003      	beq.n	80011b2 <TIM_OC4_SetConfig+0x46>
 80011aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ae:	42a8      	cmp	r0, r5
 80011b0:	d104      	bne.n	80011bc <TIM_OC4_SetConfig+0x50>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80011b2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80011b4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80011b8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80011be:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80011c0:	684b      	ldr	r3, [r1, #4]
 80011c2:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011c4:	6202      	str	r2, [r0, #32]
 80011c6:	bd30      	pop	{r4, r5, pc}
 80011c8:	40012c00 	.word	0x40012c00

080011cc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80011cc:	6a03      	ldr	r3, [r0, #32]
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011d4:	6a02      	ldr	r2, [r0, #32]
{
 80011d6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011d8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80011da:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80011e6:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80011e8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80011ea:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80011ee:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011f2:	4d0d      	ldr	r5, [pc, #52]	; (8001228 <TIM_OC5_SetConfig+0x5c>)
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	d00b      	beq.n	8001210 <TIM_OC5_SetConfig+0x44>
 80011f8:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80011fc:	42a8      	cmp	r0, r5
 80011fe:	d007      	beq.n	8001210 <TIM_OC5_SetConfig+0x44>
 8001200:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001204:	42a8      	cmp	r0, r5
 8001206:	d003      	beq.n	8001210 <TIM_OC5_SetConfig+0x44>
 8001208:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800120c:	42a8      	cmp	r0, r5
 800120e:	d104      	bne.n	800121a <TIM_OC5_SetConfig+0x4e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001210:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001212:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001216:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800121a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800121c:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800121e:	684b      	ldr	r3, [r1, #4]
 8001220:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001222:	6202      	str	r2, [r0, #32]
 8001224:	bd30      	pop	{r4, r5, pc}
 8001226:	bf00      	nop
 8001228:	40012c00 	.word	0x40012c00

0800122c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800122c:	6a03      	ldr	r3, [r0, #32]
 800122e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001232:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001234:	6a02      	ldr	r2, [r0, #32]
{
 8001236:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001238:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800123a:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800123c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800123e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001246:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800124a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800124c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001250:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001254:	4d0c      	ldr	r5, [pc, #48]	; (8001288 <TIM_OC6_SetConfig+0x5c>)
 8001256:	42a8      	cmp	r0, r5
 8001258:	d00b      	beq.n	8001272 <TIM_OC6_SetConfig+0x46>
 800125a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800125e:	42a8      	cmp	r0, r5
 8001260:	d007      	beq.n	8001272 <TIM_OC6_SetConfig+0x46>
 8001262:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001266:	42a8      	cmp	r0, r5
 8001268:	d003      	beq.n	8001272 <TIM_OC6_SetConfig+0x46>
 800126a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800126e:	42a8      	cmp	r0, r5
 8001270:	d104      	bne.n	800127c <TIM_OC6_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001272:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001274:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001278:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800127c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800127e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001280:	684b      	ldr	r3, [r1, #4]
 8001282:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001284:	6202      	str	r2, [r0, #32]
 8001286:	bd30      	pop	{r4, r5, pc}
 8001288:	40012c00 	.word	0x40012c00

0800128c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800128c:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 800128e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001290:	4290      	cmp	r0, r2
{
 8001292:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001294:	d002      	beq.n	800129c <TIM_Base_SetConfig+0x10>
 8001296:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800129a:	d109      	bne.n	80012b0 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 800129c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800129e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012a2:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80012a4:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012a8:	d00d      	beq.n	80012c6 <TIM_Base_SetConfig+0x3a>
 80012aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012ae:	d00a      	beq.n	80012c6 <TIM_Base_SetConfig+0x3a>
 80012b0:	4a16      	ldr	r2, [pc, #88]	; (800130c <TIM_Base_SetConfig+0x80>)
 80012b2:	4290      	cmp	r0, r2
 80012b4:	d007      	beq.n	80012c6 <TIM_Base_SetConfig+0x3a>
 80012b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ba:	4290      	cmp	r0, r2
 80012bc:	d003      	beq.n	80012c6 <TIM_Base_SetConfig+0x3a>
 80012be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c2:	4290      	cmp	r0, r2
 80012c4:	d103      	bne.n	80012ce <TIM_Base_SetConfig+0x42>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012c6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80012c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012ce:	694a      	ldr	r2, [r1, #20]
 80012d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80012d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012d8:	688b      	ldr	r3, [r1, #8]
 80012da:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80012dc:	680b      	ldr	r3, [r1, #0]
 80012de:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <TIM_Base_SetConfig+0x7c>)
 80012e2:	4298      	cmp	r0, r3
 80012e4:	d00b      	beq.n	80012fe <TIM_Base_SetConfig+0x72>
 80012e6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80012ea:	4298      	cmp	r0, r3
 80012ec:	d007      	beq.n	80012fe <TIM_Base_SetConfig+0x72>
 80012ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012f2:	4298      	cmp	r0, r3
 80012f4:	d003      	beq.n	80012fe <TIM_Base_SetConfig+0x72>
 80012f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012fa:	4298      	cmp	r0, r3
 80012fc:	d101      	bne.n	8001302 <TIM_Base_SetConfig+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 80012fe:	690b      	ldr	r3, [r1, #16]
 8001300:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001302:	2301      	movs	r3, #1
 8001304:	6143      	str	r3, [r0, #20]
 8001306:	bd10      	pop	{r4, pc}
 8001308:	40012c00 	.word	0x40012c00
 800130c:	40014000 	.word	0x40014000

08001310 <HAL_TIM_PWM_Init>:
{
 8001310:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001312:	4604      	mov	r4, r0
 8001314:	b1a0      	cbz	r0, 8001340 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001316:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800131a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800131e:	b91b      	cbnz	r3, 8001328 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001320:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001324:	f000 fb7e 	bl	8001a24 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001328:	2302      	movs	r3, #2
 800132a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800132e:	6820      	ldr	r0, [r4, #0]
 8001330:	1d21      	adds	r1, r4, #4
 8001332:	f7ff ffab 	bl	800128c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001336:	2301      	movs	r3, #1
 8001338:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800133c:	2000      	movs	r0, #0
 800133e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
}
 8001342:	bd10      	pop	{r4, pc}

08001344 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001344:	6a03      	ldr	r3, [r0, #32]
 8001346:	f023 0310 	bic.w	r3, r3, #16
 800134a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800134c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800134e:	6842      	ldr	r2, [r0, #4]
{
 8001350:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8001352:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001354:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001356:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800135a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800135e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001362:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001364:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001368:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800136c:	4d10      	ldr	r5, [pc, #64]	; (80013b0 <TIM_OC2_SetConfig+0x6c>)
 800136e:	42a8      	cmp	r0, r5
 8001370:	d10e      	bne.n	8001390 <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001372:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001378:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800137c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001380:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001382:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001384:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001388:	4335      	orrs	r5, r6
 800138a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800138e:	e009      	b.n	80013a4 <TIM_OC2_SetConfig+0x60>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001390:	4d08      	ldr	r5, [pc, #32]	; (80013b4 <TIM_OC2_SetConfig+0x70>)
 8001392:	42a8      	cmp	r0, r5
 8001394:	d0f4      	beq.n	8001380 <TIM_OC2_SetConfig+0x3c>
 8001396:	4d08      	ldr	r5, [pc, #32]	; (80013b8 <TIM_OC2_SetConfig+0x74>)
 8001398:	42a8      	cmp	r0, r5
 800139a:	d0f1      	beq.n	8001380 <TIM_OC2_SetConfig+0x3c>
 800139c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013a0:	42a8      	cmp	r0, r5
 80013a2:	d0ed      	beq.n	8001380 <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 80013a4:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80013a6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80013a8:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80013aa:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80013ac:	6203      	str	r3, [r0, #32]
}
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
 80013b0:	40012c00 	.word	0x40012c00
 80013b4:	40014000 	.word	0x40014000
 80013b8:	40014400 	.word	0x40014400

080013bc <HAL_TIM_PWM_ConfigChannel>:
{
 80013bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80013be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013c2:	2b01      	cmp	r3, #1
{
 80013c4:	4604      	mov	r4, r0
 80013c6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80013ca:	d010      	beq.n	80013ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80013cc:	2301      	movs	r3, #1
  switch (Channel)
 80013ce:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80013d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80013d4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80013d8:	d043      	beq.n	8001462 <HAL_TIM_PWM_ConfigChannel+0xa6>
 80013da:	d809      	bhi.n	80013f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80013dc:	b1fa      	cbz	r2, 800141e <HAL_TIM_PWM_ConfigChannel+0x62>
 80013de:	2a04      	cmp	r2, #4
 80013e0:	d02e      	beq.n	8001440 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 80013e2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80013e4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013ea:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80013ee:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80013f0:	2a10      	cmp	r2, #16
 80013f2:	d047      	beq.n	8001484 <HAL_TIM_PWM_ConfigChannel+0xc8>
 80013f4:	2a14      	cmp	r2, #20
 80013f6:	d056      	beq.n	80014a6 <HAL_TIM_PWM_ConfigChannel+0xea>
 80013f8:	2a0c      	cmp	r2, #12
 80013fa:	d1f2      	bne.n	80013e2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80013fc:	6820      	ldr	r0, [r4, #0]
 80013fe:	f7ff feb5 	bl	800116c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001402:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001404:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800140c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001416:	69da      	ldr	r2, [r3, #28]
 8001418:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800141c:	e030      	b.n	8001480 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800141e:	6820      	ldr	r0, [r4, #0]
 8001420:	f7ff fe24 	bl	800106c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001424:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001426:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	f042 0208 	orr.w	r2, r2, #8
 800142e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001430:	699a      	ldr	r2, [r3, #24]
 8001432:	f022 0204 	bic.w	r2, r2, #4
 8001436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800143c:	619a      	str	r2, [r3, #24]
      break;
 800143e:	e7d0      	b.n	80013e2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001440:	6820      	ldr	r0, [r4, #0]
 8001442:	f7ff ff7f 	bl	8001344 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001446:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001448:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800144a:	699a      	ldr	r2, [r3, #24]
 800144c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001450:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001458:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001460:	e7ec      	b.n	800143c <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001462:	6820      	ldr	r0, [r4, #0]
 8001464:	f7ff fe46 	bl	80010f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001468:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800146a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800146c:	69da      	ldr	r2, [r3, #28]
 800146e:	f042 0208 	orr.w	r2, r2, #8
 8001472:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001474:	69da      	ldr	r2, [r3, #28]
 8001476:	f022 0204 	bic.w	r2, r2, #4
 800147a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001480:	61da      	str	r2, [r3, #28]
      break;
 8001482:	e7ae      	b.n	80013e2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001484:	6820      	ldr	r0, [r4, #0]
 8001486:	f7ff fea1 	bl	80011cc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800148a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800148c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800148e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001490:	f042 0208 	orr.w	r2, r2, #8
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001496:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001498:	f022 0204 	bic.w	r2, r2, #4
 800149c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800149e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014a0:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80014a4:	e79d      	b.n	80013e2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80014a6:	6820      	ldr	r0, [r4, #0]
 80014a8:	f7ff fec0 	bl	800122c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80014ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80014ae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80014b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80014b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80014c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014c6:	e7ec      	b.n	80014a2 <HAL_TIM_PWM_ConfigChannel+0xe6>

080014c8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80014c8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80014ca:	f001 011f 	and.w	r1, r1, #31
{
 80014ce:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80014d0:	2401      	movs	r4, #1
 80014d2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80014d4:	ea23 0304 	bic.w	r3, r3, r4
 80014d8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80014da:	6a03      	ldr	r3, [r0, #32]
 80014dc:	408a      	lsls	r2, r1
 80014de:	431a      	orrs	r2, r3
 80014e0:	6202      	str	r2, [r0, #32]
 80014e2:	bd10      	pop	{r4, pc}

080014e4 <HAL_TIM_PWM_Start>:
{
 80014e4:	b510      	push	{r4, lr}
 80014e6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014e8:	2201      	movs	r2, #1
 80014ea:	6800      	ldr	r0, [r0, #0]
 80014ec:	f7ff ffec 	bl	80014c8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_TIM_PWM_Start+0x54>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d019      	beq.n	800152c <HAL_TIM_PWM_Start+0x48>
 80014f8:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d015      	beq.n	800152c <HAL_TIM_PWM_Start+0x48>
 8001500:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001504:	4293      	cmp	r3, r2
 8001506:	d011      	beq.n	800152c <HAL_TIM_PWM_Start+0x48>
 8001508:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800150c:	4293      	cmp	r3, r2
 800150e:	d00d      	beq.n	800152c <HAL_TIM_PWM_Start+0x48>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001510:	6899      	ldr	r1, [r3, #8]
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_TIM_PWM_Start+0x58>)
 8001514:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001516:	2a06      	cmp	r2, #6
 8001518:	d006      	beq.n	8001528 <HAL_TIM_PWM_Start+0x44>
 800151a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800151e:	d003      	beq.n	8001528 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_ENABLE(htim);
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
}
 8001528:	2000      	movs	r0, #0
 800152a:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800152c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800152e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001532:	645a      	str	r2, [r3, #68]	; 0x44
 8001534:	e7ec      	b.n	8001510 <HAL_TIM_PWM_Start+0x2c>
 8001536:	bf00      	nop
 8001538:	40012c00 	.word	0x40012c00
 800153c:	00010007 	.word	0x00010007

08001540 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001540:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001544:	2b01      	cmp	r3, #1
{
 8001546:	b570      	push	{r4, r5, r6, lr}
 8001548:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800154c:	d026      	beq.n	800159c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800154e:	2201      	movs	r2, #1
 8001550:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001554:	4d12      	ldr	r5, [pc, #72]	; (80015a0 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  tmpcr2 = htim->Instance->CR2;
 8001556:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001558:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800155c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800155e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001560:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001562:	bf02      	ittt	eq
 8001564:	684e      	ldreq	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001566:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800156a:	4333      	orreq	r3, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800156c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800156e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001572:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001574:	42aa      	cmp	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8001576:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001578:	d005      	beq.n	8001586 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800157a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800157e:	d002      	beq.n	8001586 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001582:	429a      	cmp	r2, r3
 8001584:	d104      	bne.n	8001590 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001586:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001588:	f024 0380 	bic.w	r3, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800158c:	430b      	orrs	r3, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800158e:	6093      	str	r3, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001590:	2301      	movs	r3, #1
 8001592:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001596:	2300      	movs	r3, #0
 8001598:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800159c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800159e:	bd70      	pop	{r4, r5, r6, pc}
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	40014000 	.word	0x40014000

080015a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80015a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80015ac:	2b01      	cmp	r3, #1
{
 80015ae:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80015b0:	d034      	beq.n	800161c <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80015b2:	68cb      	ldr	r3, [r1, #12]
 80015b4:	688a      	ldr	r2, [r1, #8]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80015b6:	4c1a      	ldr	r4, [pc, #104]	; (8001620 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80015b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80015be:	684a      	ldr	r2, [r1, #4]
 80015c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80015c6:	680a      	ldr	r2, [r1, #0]
 80015c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80015ce:	690a      	ldr	r2, [r1, #16]
 80015d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80015d6:	694a      	ldr	r2, [r1, #20]
 80015d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80015de:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80015e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80015e6:	698a      	ldr	r2, [r1, #24]
 80015e8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80015ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80015f0:	6802      	ldr	r2, [r0, #0]
 80015f2:	42a2      	cmp	r2, r4
 80015f4:	d10c      	bne.n	8001610 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80015f6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80015f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80015fc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001600:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001602:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001608:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800160a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800160e:	430b      	orrs	r3, r1
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001610:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001612:	2300      	movs	r3, #0
 8001614:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001618:	4618      	mov	r0, r3
 800161a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800161c:	2002      	movs	r0, #2
}
 800161e:	bd10      	pop	{r4, pc}
 8001620:	40012c00 	.word	0x40012c00

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b530      	push	{r4, r5, lr}
 8001626:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001628:	2228      	movs	r2, #40	; 0x28
 800162a:	2100      	movs	r1, #0
 800162c:	a805      	add	r0, sp, #20
 800162e:	f000 fae3 	bl	8001bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001632:	2214      	movs	r2, #20
 8001634:	2100      	movs	r1, #0
 8001636:	4668      	mov	r0, sp
 8001638:	f000 fade 	bl	8001bf8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800163c:	2100      	movs	r1, #0
 800163e:	2234      	movs	r2, #52	; 0x34
 8001640:	a80f      	add	r0, sp, #60	; 0x3c
 8001642:	f000 fad9 	bl	8001bf8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800164a:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164c:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800164e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001650:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001654:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001658:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800165c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165e:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001660:	f7ff f8aa 	bl	80007b8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001664:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001668:	e88d 0028 	stmia.w	sp, {r3, r5}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166c:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001672:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001674:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001676:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001678:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800167a:	f7ff fb57 	bl	8000d2c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001682:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001684:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001686:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001688:	f7ff fbfe 	bl	8000e88 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800168c:	b01d      	add	sp, #116	; 0x74
 800168e:	bd30      	pop	{r4, r5, pc}

08001690 <main>:
{
 8001690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001694:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 8001696:	f7fe fdbb 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 800169a:	f7ff ffc3 	bl	8001624 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	2214      	movs	r2, #20
 80016a0:	2100      	movs	r1, #0
 80016a2:	a80f      	add	r0, sp, #60	; 0x3c
 80016a4:	f000 faa8 	bl	8001bf8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a8:	4ba9      	ldr	r3, [pc, #676]	; (8001950 <main+0x2c0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR3_D1_Pin|MOTOR3_EN_Pin|MOTOR2_D1_Pin|MOTOR2_EN_Pin, GPIO_PIN_RESET);
 80016aa:	48aa      	ldr	r0, [pc, #680]	; (8001954 <main+0x2c4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	695a      	ldr	r2, [r3, #20]
  htim2.Instance = TIM2;
 80016ae:	4eaa      	ldr	r6, [pc, #680]	; (8001958 <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80016b4:	615a      	str	r2, [r3, #20]
 80016b6:	695a      	ldr	r2, [r3, #20]
 80016b8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80016bc:	9201      	str	r2, [sp, #4]
 80016be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80016c6:	615a      	str	r2, [r3, #20]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80016ce:	9202      	str	r2, [sp, #8]
 80016d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016d8:	615a      	str	r2, [r3, #20]
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80016e0:	9203      	str	r2, [sp, #12]
 80016e2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, MOTOR3_D1_Pin|MOTOR3_EN_Pin|MOTOR2_D1_Pin|MOTOR2_EN_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f24c 01c0 	movw	r1, #49344	; 0xc0c0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, MOTOR3_D1_Pin|MOTOR3_EN_Pin|MOTOR2_D1_Pin|MOTOR2_EN_Pin, GPIO_PIN_RESET);
 80016fc:	f7ff f856 	bl	80007ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR1_D1_Pin|MOTOR1_EN_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001706:	4895      	ldr	r0, [pc, #596]	; (800195c <main+0x2cc>)

  /*Configure GPIO pins : MOTOR3_D1_Pin MOTOR3_EN_Pin MOTOR2_D1_Pin MOTOR2_EN_Pin */
  GPIO_InitStruct.Pin = MOTOR3_D1_Pin|MOTOR3_EN_Pin|MOTOR2_D1_Pin|MOTOR2_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, MOTOR1_D1_Pin|MOTOR1_EN_Pin, GPIO_PIN_RESET);
 800170a:	f7ff f84f 	bl	80007ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = MOTOR3_D1_Pin|MOTOR3_EN_Pin|MOTOR2_D1_Pin|MOTOR2_EN_Pin;
 8001710:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001714:	a90f      	add	r1, sp, #60	; 0x3c
 8001716:	488f      	ldr	r0, [pc, #572]	; (8001954 <main+0x2c4>)
  GPIO_InitStruct.Pin = MOTOR3_D1_Pin|MOTOR3_EN_Pin|MOTOR2_D1_Pin|MOTOR2_EN_Pin;
 8001718:	930f      	str	r3, [sp, #60]	; 0x3c

  /*Configure GPIO pin : MOTOR3_FB_Pin */
  GPIO_InitStruct.Pin = MOTOR3_FB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171a:	2503      	movs	r5, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001722:	f7fe ff89 	bl	8000638 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	a90f      	add	r1, sp, #60	; 0x3c
 8001728:	488a      	ldr	r0, [pc, #552]	; (8001954 <main+0x2c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172a:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = MOTOR3_FB_Pin;
 800172c:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f7fe ff82 	bl	8000638 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR3_SF_Pin */
  GPIO_InitStruct.Pin = MOTOR3_SF_Pin;
 8001734:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MOTOR3_SF_GPIO_Port, &GPIO_InitStruct);
 8001736:	a90f      	add	r1, sp, #60	; 0x3c
 8001738:	4886      	ldr	r0, [pc, #536]	; (8001954 <main+0x2c4>)
  GPIO_InitStruct.Pin = MOTOR3_SF_Pin;
 800173a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(MOTOR3_SF_GPIO_Port, &GPIO_InitStruct);
 8001740:	f7fe ff7a 	bl	8000638 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR1_FB_Pin MOTOR1_TEMP_Pin */
  GPIO_InitStruct.Pin = MOTOR1_FB_Pin|MOTOR1_TEMP_Pin;
 8001744:	2350      	movs	r3, #80	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	a90f      	add	r1, sp, #60	; 0x3c
 8001748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = MOTOR1_FB_Pin|MOTOR1_TEMP_Pin;
 800174c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174e:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f7fe ff71 	bl	8000638 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR1_SF_Pin MOTOR2_SF_Pin */
  GPIO_InitStruct.Pin = MOTOR1_SF_Pin|MOTOR2_SF_Pin;
 8001756:	f44f 6384 	mov.w	r3, #1056	; 0x420
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	a90f      	add	r1, sp, #60	; 0x3c
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = MOTOR1_SF_Pin|MOTOR2_SF_Pin;
 8001760:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001762:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f7fe ff67 	bl	8000638 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR2_TEMP_Pin MOTOR3_TEMP_Pin MOTOR2_FB_Pin */
  GPIO_InitStruct.Pin = MOTOR2_TEMP_Pin|MOTOR3_TEMP_Pin|MOTOR2_FB_Pin;
 800176a:	f242 0303 	movw	r3, #8195	; 0x2003
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	a90f      	add	r1, sp, #60	; 0x3c
 8001770:	487a      	ldr	r0, [pc, #488]	; (800195c <main+0x2cc>)
  GPIO_InitStruct.Pin = MOTOR2_TEMP_Pin|MOTOR3_TEMP_Pin|MOTOR2_FB_Pin;
 8001772:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001774:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f7fe ff5e 	bl	8000638 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR1_D1_Pin MOTOR1_EN_Pin */
  GPIO_InitStruct.Pin = MOTOR1_D1_Pin|MOTOR1_EN_Pin;
 800177c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	a90f      	add	r1, sp, #60	; 0x3c
 8001782:	4876      	ldr	r0, [pc, #472]	; (800195c <main+0x2cc>)
  GPIO_InitStruct.Pin = MOTOR1_D1_Pin|MOTOR1_EN_Pin;
 8001784:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f7fe ff54 	bl	8000638 <HAL_GPIO_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001790:	221c      	movs	r2, #28
 8001792:	4621      	mov	r1, r4
 8001794:	a80f      	add	r0, sp, #60	; 0x3c
  htim2.Init.Prescaler = 7200-1;
 8001796:	f641 4b1f 	movw	fp, #7199	; 0x1c1f
  htim2.Init.Period = 100-1;
 800179a:	f04f 0a63 	mov.w	sl, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179e:	9408      	str	r4, [sp, #32]
 80017a0:	9409      	str	r4, [sp, #36]	; 0x24
 80017a2:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a4:	f000 fa28 	bl	8001bf8 <memset>
  htim2.Init.Prescaler = 7200-1;
 80017a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017ac:	4630      	mov	r0, r6
  htim2.Init.Prescaler = 7200-1;
 80017ae:	e886 0808 	stmia.w	r6, {r3, fp}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	60b4      	str	r4, [r6, #8]
  htim2.Init.Period = 100-1;
 80017b4:	f8c6 a00c 	str.w	sl, [r6, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ba:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017bc:	f7ff fda8 	bl	8001310 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c0:	a908      	add	r1, sp, #32
 80017c2:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c4:	f04f 0960 	mov.w	r9, #96	; 0x60
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c8:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017cc:	f7ff feb8 	bl	8001540 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017d0:	2208      	movs	r2, #8
 80017d2:	a90f      	add	r1, sp, #60	; 0x3c
 80017d4:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 80017da:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017dc:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017de:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017e0:	f7ff fdec 	bl	80013bc <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017e4:	220c      	movs	r2, #12
 80017e6:	a90f      	add	r1, sp, #60	; 0x3c
 80017e8:	4630      	mov	r0, r6
 80017ea:	f7ff fde7 	bl	80013bc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80017ee:	4630      	mov	r0, r6
 80017f0:	f000 f93c 	bl	8001a6c <HAL_TIM_MspPostInit>
  hcan.Instance = CAN;
 80017f4:	485a      	ldr	r0, [pc, #360]	; (8001960 <main+0x2d0>)
  hcan.Init.Prescaler = 4;
 80017f6:	4b5b      	ldr	r3, [pc, #364]	; (8001964 <main+0x2d4>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80017f8:	6084      	str	r4, [r0, #8]
  hcan.Init.Prescaler = 4;
 80017fa:	f04f 0804 	mov.w	r8, #4
 80017fe:	e880 0108 	stmia.w	r0, {r3, r8}
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001802:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001806:	6103      	str	r3, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001808:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800180c:	6143      	str	r3, [r0, #20]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800180e:	60c4      	str	r4, [r0, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001810:	7604      	strb	r4, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001812:	7644      	strb	r4, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001814:	7684      	strb	r4, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001816:	76c4      	strb	r4, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001818:	7704      	strb	r4, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800181a:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800181c:	f7fe fd1c 	bl	8000258 <HAL_CAN_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001820:	221c      	movs	r2, #28
 8001822:	4621      	mov	r1, r4
 8001824:	a808      	add	r0, sp, #32
  htim1.Instance = TIM1;
 8001826:	4d50      	ldr	r5, [pc, #320]	; (8001968 <main+0x2d8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001828:	9405      	str	r4, [sp, #20]
 800182a:	9406      	str	r4, [sp, #24]
 800182c:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182e:	f000 f9e3 	bl	8001bf8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001832:	222c      	movs	r2, #44	; 0x2c
 8001834:	4621      	mov	r1, r4
 8001836:	a80f      	add	r0, sp, #60	; 0x3c
 8001838:	f000 f9de 	bl	8001bf8 <memset>
  htim1.Instance = TIM1;
 800183c:	4b4b      	ldr	r3, [pc, #300]	; (800196c <main+0x2dc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183e:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001840:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 7200-1;
 8001842:	e885 0808 	stmia.w	r5, {r3, fp}
  htim1.Init.Period = 100-1;
 8001846:	f8c5 a00c 	str.w	sl, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800184c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001850:	f7ff fd5e 	bl	8001310 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001854:	a905      	add	r1, sp, #20
 8001856:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001858:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800185a:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185c:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800185e:	f7ff fe6f 	bl	8001540 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001862:	4622      	mov	r2, r4
 8001864:	a908      	add	r1, sp, #32
 8001866:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001868:	f8cd 9020 	str.w	r9, [sp, #32]
  sConfigOC.Pulse = 0;
 800186c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186e:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001870:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001872:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001874:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001876:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001878:	f7ff fda0 	bl	80013bc <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800187c:	4642      	mov	r2, r8
 800187e:	a908      	add	r1, sp, #32
 8001880:	4628      	mov	r0, r5
 8001882:	f7ff fd9b 	bl	80013bc <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001886:	2208      	movs	r2, #8
 8001888:	a908      	add	r1, sp, #32
 800188a:	4628      	mov	r0, r5
 800188c:	f7ff fd96 	bl	80013bc <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001890:	220c      	movs	r2, #12
 8001892:	a908      	add	r1, sp, #32
 8001894:	4628      	mov	r0, r5
 8001896:	f7ff fd91 	bl	80013bc <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800189a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800189e:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018a0:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a2:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a8:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018aa:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ac:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ae:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 80018b0:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018b2:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018b4:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018b6:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018b8:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ba:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018bc:	f7ff fe74 	bl	80015a8 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80018c0:	4628      	mov	r0, r5
 80018c2:	f000 f8d3 	bl	8001a6c <HAL_TIM_MspPostInit>
	HAL_GPIO_WritePin(MOTOR1_D1_GPIO_Port,MOTOR1_D1_Pin,GPIO_PIN_RESET);
 80018c6:	4622      	mov	r2, r4
 80018c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018cc:	4823      	ldr	r0, [pc, #140]	; (800195c <main+0x2cc>)
 80018ce:	f7fe ff6d 	bl	80007ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_EN_GPIO_Port, MOTOR1_EN_Pin, GPIO_PIN_SET);
 80018d2:	463a      	mov	r2, r7
 80018d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d8:	4820      	ldr	r0, [pc, #128]	; (800195c <main+0x2cc>)
 80018da:	f7fe ff67 	bl	80007ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_D1_GPIO_Port,MOTOR3_D1_Pin,GPIO_PIN_RESET);
 80018de:	4622      	mov	r2, r4
 80018e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e4:	481b      	ldr	r0, [pc, #108]	; (8001954 <main+0x2c4>)
 80018e6:	f7fe ff61 	bl	80007ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_EN_GPIO_Port, MOTOR2_EN_Pin, GPIO_PIN_SET);
 80018ea:	463a      	mov	r2, r7
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	4819      	ldr	r0, [pc, #100]	; (8001954 <main+0x2c4>)
 80018f0:	f7fe ff5c 	bl	80007ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR3_D1_GPIO_Port,MOTOR3_D1_Pin,GPIO_PIN_RESET);
 80018f4:	4622      	mov	r2, r4
 80018f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fa:	4816      	ldr	r0, [pc, #88]	; (8001954 <main+0x2c4>)
 80018fc:	f7fe ff56 	bl	80007ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR3_EN_GPIO_Port, MOTOR3_EN_Pin, GPIO_PIN_SET);
 8001900:	463a      	mov	r2, r7
 8001902:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001906:	4813      	ldr	r0, [pc, #76]	; (8001954 <main+0x2c4>)
 8001908:	f7fe ff50 	bl	80007ac <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800190c:	4621      	mov	r1, r4
 800190e:	4628      	mov	r0, r5
 8001910:	f7ff fde8 	bl	80014e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001914:	4641      	mov	r1, r8
 8001916:	4628      	mov	r0, r5
 8001918:	f7ff fde4 	bl	80014e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800191c:	2108      	movs	r1, #8
 800191e:	4628      	mov	r0, r5
 8001920:	f7ff fde0 	bl	80014e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001924:	210c      	movs	r1, #12
 8001926:	4628      	mov	r0, r5
 8001928:	f7ff fddc 	bl	80014e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800192c:	2108      	movs	r1, #8
 800192e:	4630      	mov	r0, r6
 8001930:	f7ff fdd8 	bl	80014e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001934:	210c      	movs	r1, #12
 8001936:	4630      	mov	r0, r6
 8001938:	f7ff fdd4 	bl	80014e4 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800193c:	682b      	ldr	r3, [r5, #0]
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,Duty);
 800193e:	6831      	ldr	r1, [r6, #0]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,Duty);
 8001940:	2232      	movs	r2, #50	; 0x32
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001942:	635c      	str	r4, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,Duty);
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8001946:	63dc      	str	r4, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,Duty);
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,Duty);
 800194a:	63ca      	str	r2, [r1, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 800194c:	640c      	str	r4, [r1, #64]	; 0x40
 800194e:	e7f8      	b.n	8001942 <main+0x2b2>
 8001950:	40021000 	.word	0x40021000
 8001954:	48000800 	.word	0x48000800
 8001958:	20000094 	.word	0x20000094
 800195c:	48000400 	.word	0x48000400
 8001960:	2000002c 	.word	0x2000002c
 8001964:	40006400 	.word	0x40006400
 8001968:	20000054 	.word	0x20000054
 800196c:	40012c00 	.word	0x40012c00

08001970 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_MspInit+0x2c>)
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	f042 0201 	orr.w	r2, r2, #1
 8001978:	619a      	str	r2, [r3, #24]
 800197a:	699a      	ldr	r2, [r3, #24]
{
 800197c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	f002 0201 	and.w	r2, r2, #1
 8001982:	9200      	str	r2, [sp, #0]
 8001984:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	69da      	ldr	r2, [r3, #28]
 8001988:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800198c:	61da      	str	r2, [r3, #28]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001998:	b002      	add	sp, #8
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019a0:	b510      	push	{r4, lr}
 80019a2:	4604      	mov	r4, r0
 80019a4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	2214      	movs	r2, #20
 80019a8:	2100      	movs	r1, #0
 80019aa:	a803      	add	r0, sp, #12
 80019ac:	f000 f924 	bl	8001bf8 <memset>
  if(hcan->Instance==CAN)
 80019b0:	6822      	ldr	r2, [r4, #0]
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_CAN_MspInit+0x80>)
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d131      	bne.n	8001a1c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019b8:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	a903      	add	r1, sp, #12
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019be:	69da      	ldr	r2, [r3, #28]
 80019c0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80019c4:	61da      	str	r2, [r3, #28]
 80019c6:	69da      	ldr	r2, [r3, #28]
 80019c8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80019cc:	9201      	str	r2, [sp, #4]
 80019ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019d6:	615a      	str	r2, [r3, #20]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80019f4:	2309      	movs	r3, #9
 80019f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f7fe fe1e 	bl	8000638 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	4611      	mov	r1, r2
 8001a00:	2014      	movs	r0, #20
 8001a02:	f7fe fdc1 	bl	8000588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001a06:	2014      	movs	r0, #20
 8001a08:	f7fe fdf2 	bl	80005f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2015      	movs	r0, #21
 8001a10:	4611      	mov	r1, r2
 8001a12:	f7fe fdb9 	bl	8000588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001a16:	2015      	movs	r0, #21
 8001a18:	f7fe fdea 	bl	80005f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001a1c:	b008      	add	sp, #32
 8001a1e:	bd10      	pop	{r4, pc}
 8001a20:	40006400 	.word	0x40006400

08001a24 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001a24:	6803      	ldr	r3, [r0, #0]
 8001a26:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_TIM_PWM_MspInit+0x40>)
 8001a28:	4293      	cmp	r3, r2
{
 8001a2a:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8001a2c:	d10b      	bne.n	8001a46 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_TIM_PWM_MspInit+0x44>)
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a36:	619a      	str	r2, [r3, #24]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a42:	b002      	add	sp, #8
 8001a44:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM2)
 8001a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4a:	d1fa      	bne.n	8001a42 <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	61da      	str	r2, [r3, #28]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	9b01      	ldr	r3, [sp, #4]
}
 8001a62:	e7ee      	b.n	8001a42 <HAL_TIM_PWM_MspInit+0x1e>
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a6c:	b530      	push	{r4, r5, lr}
 8001a6e:	4604      	mov	r4, r0
 8001a70:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	2214      	movs	r2, #20
 8001a74:	2100      	movs	r1, #0
 8001a76:	a803      	add	r0, sp, #12
 8001a78:	f000 f8be 	bl	8001bf8 <memset>
  if(htim->Instance==TIM1)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <HAL_TIM_MspPostInit+0xa4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d12e      	bne.n	8001ae2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_TIM_MspPostInit+0xa8>)
    GPIO_InitStruct.Pin = MOTOR3_IN1_Pin|MOTOR3_IN2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	4824      	ldr	r0, [pc, #144]	; (8001b18 <HAL_TIM_MspPostInit+0xac>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a8e:	615a      	str	r2, [r3, #20]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001a96:	9200      	str	r2, [sp, #0]
 8001a98:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001aa0:	615a      	str	r2, [r3, #20]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MOTOR3_IN1_Pin|MOTOR3_IN2_Pin;
 8001aac:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab0:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab2:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = MOTOR3_IN1_Pin|MOTOR3_IN2_Pin;
 8001ab6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aba:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001abc:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	f7fe fdbb 	bl	8000638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR2_IN2_Pin|MOTOR2_IN1_Pin;
 8001ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ace:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ad0:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = MOTOR1_IN2_Pin|MOTOR1_IN1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	a903      	add	r1, sp, #12
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ad8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f7fe fdad 	bl	8000638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ade:	b009      	add	sp, #36	; 0x24
 8001ae0:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM2)
 8001ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae6:	d1fa      	bne.n	8001ade <HAL_TIM_MspPostInit+0x72>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MOTOR1_IN2_Pin|MOTOR1_IN1_Pin;
 8001afe:	230c      	movs	r3, #12
 8001b00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b06:	2303      	movs	r3, #3
 8001b08:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e7e1      	b.n	8001ad2 <HAL_TIM_MspPostInit+0x66>
 8001b0e:	bf00      	nop
 8001b10:	40012c00 	.word	0x40012c00
 8001b14:	40021000 	.word	0x40021000
 8001b18:	48000800 	.word	0x48000800

08001b1c <NMI_Handler>:
 8001b1c:	4770      	bx	lr

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler>

08001b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b22:	e7fe      	b.n	8001b22 <BusFault_Handler>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler>

08001b26 <SVC_Handler>:
 8001b26:	4770      	bx	lr

08001b28 <DebugMon_Handler>:
 8001b28:	4770      	bx	lr

08001b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2c:	f7fe bb82 	b.w	8000234 <HAL_IncTick>

08001b30 <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001b30:	4801      	ldr	r0, [pc, #4]	; (8001b38 <CAN_RX1_IRQHandler+0x8>)
 8001b32:	f7fe bc19 	b.w	8000368 <HAL_CAN_IRQHandler>
 8001b36:	bf00      	nop
 8001b38:	2000002c 	.word	0x2000002c

08001b3c <USB_LP_CAN_RX0_IRQHandler>:
 8001b3c:	f7ff bff8 	b.w	8001b30 <CAN_RX1_IRQHandler>

08001b40 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SystemInit+0x18>)
 8001b42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b46:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b62:	e003      	b.n	8001b6c <LoopCopyDataInit>

08001b64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b6a:	3104      	adds	r1, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b74:	d3f6      	bcc.n	8001b64 <CopyDataInit>
	ldr	r2, =_sbss
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b78:	e002      	b.n	8001b80 <LoopFillZerobss>

08001b7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b7c:	f842 3b04 	str.w	r3, [r2], #4

08001b80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <LoopForever+0x16>)
	cmp	r2, r3
 8001b82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b84:	d3f9      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b86:	f7ff ffdb 	bl	8001b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f000 f811 	bl	8001bb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8e:	f7ff fd7f 	bl	8001690 <main>

08001b92 <LoopForever>:

LoopForever:
    b LoopForever
 8001b92:	e7fe      	b.n	8001b92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b94:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8001b98:	08001c58 	.word	0x08001c58
	ldr	r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ba0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001ba4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001ba8:	200000d4 	.word	0x200000d4

08001bac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC1_IRQHandler>
	...

08001bb0 <__libc_init_array>:
 8001bb0:	b570      	push	{r4, r5, r6, lr}
 8001bb2:	4e0d      	ldr	r6, [pc, #52]	; (8001be8 <__libc_init_array+0x38>)
 8001bb4:	4c0d      	ldr	r4, [pc, #52]	; (8001bec <__libc_init_array+0x3c>)
 8001bb6:	1ba4      	subs	r4, r4, r6
 8001bb8:	10a4      	asrs	r4, r4, #2
 8001bba:	2500      	movs	r5, #0
 8001bbc:	42a5      	cmp	r5, r4
 8001bbe:	d109      	bne.n	8001bd4 <__libc_init_array+0x24>
 8001bc0:	4e0b      	ldr	r6, [pc, #44]	; (8001bf0 <__libc_init_array+0x40>)
 8001bc2:	4c0c      	ldr	r4, [pc, #48]	; (8001bf4 <__libc_init_array+0x44>)
 8001bc4:	f000 f820 	bl	8001c08 <_init>
 8001bc8:	1ba4      	subs	r4, r4, r6
 8001bca:	10a4      	asrs	r4, r4, #2
 8001bcc:	2500      	movs	r5, #0
 8001bce:	42a5      	cmp	r5, r4
 8001bd0:	d105      	bne.n	8001bde <__libc_init_array+0x2e>
 8001bd2:	bd70      	pop	{r4, r5, r6, pc}
 8001bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bd8:	4798      	blx	r3
 8001bda:	3501      	adds	r5, #1
 8001bdc:	e7ee      	b.n	8001bbc <__libc_init_array+0xc>
 8001bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001be2:	4798      	blx	r3
 8001be4:	3501      	adds	r5, #1
 8001be6:	e7f2      	b.n	8001bce <__libc_init_array+0x1e>
 8001be8:	08001c50 	.word	0x08001c50
 8001bec:	08001c50 	.word	0x08001c50
 8001bf0:	08001c50 	.word	0x08001c50
 8001bf4:	08001c54 	.word	0x08001c54

08001bf8 <memset>:
 8001bf8:	4402      	add	r2, r0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <memset+0xa>
 8001c00:	4770      	bx	lr
 8001c02:	f803 1b01 	strb.w	r1, [r3], #1
 8001c06:	e7f9      	b.n	8001bfc <memset+0x4>

08001c08 <_init>:
 8001c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0a:	bf00      	nop
 8001c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c0e:	bc08      	pop	{r3}
 8001c10:	469e      	mov	lr, r3
 8001c12:	4770      	bx	lr

08001c14 <_fini>:
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	bf00      	nop
 8001c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1a:	bc08      	pop	{r3}
 8001c1c:	469e      	mov	lr, r3
 8001c1e:	4770      	bx	lr
