
Crawler_Main_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b40  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001d04  08001d04  00011d04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001d1c  08001d1c  00011d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001d24  08001d24  00011d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001d28  08001d28  00011d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000164  2000000c  08001d38  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000170  08001d38  00020170  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000daea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000201d  00000000  00000000  0002db26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006de1  00000000  00000000  0002fb43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008b8  00000000  00000000  00036928  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c00  00000000  00000000  000371e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000055aa  00000000  00000000  00037de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003a53  00000000  00000000  0003d38a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00040ddd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001a60  00000000  00000000  00040e5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001cec 	.word	0x08001cec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001cec 	.word	0x08001cec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 fb64 	bl	8000bf8 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000540:	f000 fb18 	bl	8000b74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 fae9 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f001 f9f2 	bl	800196c <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005b6:	4604      	mov	r4, r0
 80005b8:	2800      	cmp	r0, #0
 80005ba:	f000 809b 	beq.w	80006f4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005be:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005c0:	b925      	cbnz	r5, 80005cc <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005c2:	f001 f9ef 	bl	80019a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005c6:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005c8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ce:	06db      	lsls	r3, r3, #27
 80005d0:	f100 808e 	bmi.w	80006f0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005da:	f023 0302 	bic.w	r3, r3, #2
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005e4:	4b44      	ldr	r3, [pc, #272]	; (80006f8 <HAL_ADC_Init+0x144>)
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005ec:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	6861      	ldr	r1, [r4, #4]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005f6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005f8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800060a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800060c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800060e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000612:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000614:	685a      	ldr	r2, [r3, #4]
 8000616:	430a      	orrs	r2, r1
 8000618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800061a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800061c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800061e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	430a      	orrs	r2, r1
 8000628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800062a:	4934      	ldr	r1, [pc, #208]	; (80006fc <HAL_ADC_Init+0x148>)
 800062c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800062e:	428a      	cmp	r2, r1
 8000630:	d052      	beq.n	80006d8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000632:	6899      	ldr	r1, [r3, #8]
 8000634:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000638:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800063a:	6899      	ldr	r1, [r3, #8]
 800063c:	430a      	orrs	r2, r1
 800063e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000640:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000642:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800064e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000650:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000652:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000654:	f022 0202 	bic.w	r2, r2, #2
 8000658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000660:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000662:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000666:	2a00      	cmp	r2, #0
 8000668:	d03e      	beq.n	80006e8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800066a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800066c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800066e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800067a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	3901      	subs	r1, #1
 8000680:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000684:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000688:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800068a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000692:	3901      	subs	r1, #1
 8000694:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800069a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800069c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006a6:	689a      	ldr	r2, [r3, #8]
 80006a8:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80006ac:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006ae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006b0:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006b8:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006ba:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006bc:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006c0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006c2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006d0:	2300      	movs	r3, #0
 80006d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006d6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006e6:	e7b2      	b.n	800064e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006ee:	e7c9      	b.n	8000684 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006f0:	2001      	movs	r0, #1
 80006f2:	e7ed      	b.n	80006d0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006f4:	2001      	movs	r0, #1
}
 80006f6:	bd38      	pop	{r3, r4, r5, pc}
 80006f8:	40012300 	.word	0x40012300
 80006fc:	0f000001 	.word	0x0f000001

08000700 <HAL_ADC_ConfigChannel>:
{
 8000700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000702:	2300      	movs	r3, #0
 8000704:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000706:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800070a:	2b01      	cmp	r3, #1
 800070c:	d06e      	beq.n	80007ec <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800070e:	680d      	ldr	r5, [r1, #0]
 8000710:	6804      	ldr	r4, [r0, #0]
 8000712:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000714:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000716:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000718:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800071c:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800071e:	d92a      	bls.n	8000776 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000720:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000724:	68e7      	ldr	r7, [r4, #12]
 8000726:	3b1e      	subs	r3, #30
 8000728:	f04f 0e07 	mov.w	lr, #7
 800072c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000730:	ea27 070e 	bic.w	r7, r7, lr
 8000734:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000736:	68e7      	ldr	r7, [r4, #12]
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	433b      	orrs	r3, r7
 800073e:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000740:	684a      	ldr	r2, [r1, #4]
 8000742:	2a06      	cmp	r2, #6
 8000744:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000748:	d825      	bhi.n	8000796 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800074a:	4413      	add	r3, r2
 800074c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800074e:	1f59      	subs	r1, r3, #5
 8000750:	231f      	movs	r3, #31
 8000752:	408b      	lsls	r3, r1
 8000754:	ea27 0303 	bic.w	r3, r7, r3
 8000758:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800075a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800075c:	fa06 f101 	lsl.w	r1, r6, r1
 8000760:	4311      	orrs	r1, r2
 8000762:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000764:	4b32      	ldr	r3, [pc, #200]	; (8000830 <HAL_ADC_ConfigChannel+0x130>)
 8000766:	429c      	cmp	r4, r3
 8000768:	d034      	beq.n	80007d4 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 800076a:	2300      	movs	r3, #0
 800076c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000770:	4618      	mov	r0, r3
}
 8000772:	b003      	add	sp, #12
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000776:	6927      	ldr	r7, [r4, #16]
 8000778:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800077c:	f04f 0e07 	mov.w	lr, #7
 8000780:	fa0e fe03 	lsl.w	lr, lr, r3
 8000784:	ea27 070e 	bic.w	r7, r7, lr
 8000788:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800078a:	6927      	ldr	r7, [r4, #16]
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	433b      	orrs	r3, r7
 8000792:	6123      	str	r3, [r4, #16]
 8000794:	e7d4      	b.n	8000740 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000796:	2a0c      	cmp	r2, #12
 8000798:	d80e      	bhi.n	80007b8 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800079a:	4413      	add	r3, r2
 800079c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800079e:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80007a2:	231f      	movs	r3, #31
 80007a4:	4093      	lsls	r3, r2
 80007a6:	ea21 0303 	bic.w	r3, r1, r3
 80007aa:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007ae:	fa06 f202 	lsl.w	r2, r6, r2
 80007b2:	431a      	orrs	r2, r3
 80007b4:	6322      	str	r2, [r4, #48]	; 0x30
 80007b6:	e7d5      	b.n	8000764 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007b8:	4413      	add	r3, r2
 80007ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007bc:	3b41      	subs	r3, #65	; 0x41
 80007be:	221f      	movs	r2, #31
 80007c0:	409a      	lsls	r2, r3
 80007c2:	ea21 0202 	bic.w	r2, r1, r2
 80007c6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007ca:	fa06 f103 	lsl.w	r1, r6, r3
 80007ce:	4311      	orrs	r1, r2
 80007d0:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007d2:	e7c7      	b.n	8000764 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007d4:	2d12      	cmp	r5, #18
 80007d6:	d10b      	bne.n	80007f0 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_ADC_ConfigChannel+0x134>)
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80007e0:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	e7be      	b.n	800076a <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80007ec:	2002      	movs	r0, #2
 80007ee:	e7c0      	b.n	8000772 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_ADC_ConfigChannel+0x138>)
 80007f2:	429d      	cmp	r5, r3
 80007f4:	d001      	beq.n	80007fa <HAL_ADC_ConfigChannel+0xfa>
 80007f6:	2d11      	cmp	r5, #17
 80007f8:	d1b7      	bne.n	800076a <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_ADC_ConfigChannel+0x134>)
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000802:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800080a:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_ADC_ConfigChannel+0x138>)
 800080e:	429d      	cmp	r5, r3
 8000810:	d1ab      	bne.n	800076a <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_ADC_ConfigChannel+0x13c>)
 8000814:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <HAL_ADC_ConfigChannel+0x140>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	fbb3 f2f2 	udiv	r2, r3, r2
 800081c:	230a      	movs	r3, #10
 800081e:	4353      	muls	r3, r2
        counter--;
 8000820:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000822:	9b01      	ldr	r3, [sp, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0a0      	beq.n	800076a <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000828:	9b01      	ldr	r3, [sp, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	e7f8      	b.n	8000820 <HAL_ADC_ConfigChannel+0x120>
 800082e:	bf00      	nop
 8000830:	40012000 	.word	0x40012000
 8000834:	40012300 	.word	0x40012300
 8000838:	10000012 	.word	0x10000012
 800083c:	20000008 	.word	0x20000008
 8000840:	000f4240 	.word	0x000f4240

08000844 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000844:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000846:	4604      	mov	r4, r0
 8000848:	2800      	cmp	r0, #0
 800084a:	d06e      	beq.n	800092a <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800084c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000850:	b90b      	cbnz	r3, 8000856 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000852:	f001 f8d9 	bl	8001a08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000856:	6822      	ldr	r2, [r4, #0]
 8000858:	6813      	ldr	r3, [r2, #0]
 800085a:	f023 0302 	bic.w	r3, r3, #2
 800085e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000860:	f7ff fea2 	bl	80005a8 <HAL_GetTick>
 8000864:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	685a      	ldr	r2, [r3, #4]
 800086a:	0791      	lsls	r1, r2, #30
 800086c:	d451      	bmi.n	8000912 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	f042 0201 	orr.w	r2, r2, #1
 8000874:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000876:	f7ff fe97 	bl	80005a8 <HAL_GetTick>
 800087a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	07d2      	lsls	r2, r2, #31
 8000882:	d554      	bpl.n	800092e <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000884:	7e22      	ldrb	r2, [r4, #24]
 8000886:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	bf0c      	ite	eq
 800088c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000890:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000896:	7e62      	ldrb	r2, [r4, #25]
 8000898:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	bf0c      	ite	eq
 800089e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008a2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80008a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008a8:	7ea2      	ldrb	r2, [r4, #26]
 80008aa:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	bf0c      	ite	eq
 80008b0:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008b4:	f022 0220 	bicne.w	r2, r2, #32
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008ba:	7ee2      	ldrb	r2, [r4, #27]
 80008bc:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	bf0c      	ite	eq
 80008c2:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008c6:	f042 0210 	orrne.w	r2, r2, #16
 80008ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008cc:	7f22      	ldrb	r2, [r4, #28]
 80008ce:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	bf0c      	ite	eq
 80008d4:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008d8:	f022 0208 	bicne.w	r2, r2, #8
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008de:	7f62      	ldrb	r2, [r4, #29]
 80008e0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	bf0c      	ite	eq
 80008e6:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008ea:	f022 0204 	bicne.w	r2, r2, #4
 80008ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008f0:	68e1      	ldr	r1, [r4, #12]
 80008f2:	68a2      	ldr	r2, [r4, #8]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	6921      	ldr	r1, [r4, #16]
 80008f8:	430a      	orrs	r2, r1
 80008fa:	6961      	ldr	r1, [r4, #20]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	6861      	ldr	r1, [r4, #4]
 8000900:	3901      	subs	r1, #1
 8000902:	430a      	orrs	r2, r1
 8000904:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000906:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000908:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800090a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800090c:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000910:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000912:	f7ff fe49 	bl	80005a8 <HAL_GetTick>
 8000916:	1b40      	subs	r0, r0, r5
 8000918:	280a      	cmp	r0, #10
 800091a:	d9a4      	bls.n	8000866 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800091c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000922:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000924:	2305      	movs	r3, #5
 8000926:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800092a:	2001      	movs	r0, #1
}
 800092c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800092e:	f7ff fe3b 	bl	80005a8 <HAL_GetTick>
 8000932:	1b40      	subs	r0, r0, r5
 8000934:	280a      	cmp	r0, #10
 8000936:	d9a1      	bls.n	800087c <HAL_CAN_Init+0x38>
 8000938:	e7f0      	b.n	800091c <HAL_CAN_Init+0xd8>

0800093a <HAL_CAN_TxMailbox0CompleteCallback>:
 800093a:	4770      	bx	lr

0800093c <HAL_CAN_TxMailbox1CompleteCallback>:
 800093c:	4770      	bx	lr

0800093e <HAL_CAN_TxMailbox2CompleteCallback>:
 800093e:	4770      	bx	lr

08000940 <HAL_CAN_TxMailbox0AbortCallback>:
 8000940:	4770      	bx	lr

08000942 <HAL_CAN_TxMailbox1AbortCallback>:
 8000942:	4770      	bx	lr

08000944 <HAL_CAN_TxMailbox2AbortCallback>:
 8000944:	4770      	bx	lr

08000946 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8000946:	4770      	bx	lr

08000948 <HAL_CAN_RxFifo0FullCallback>:
 8000948:	4770      	bx	lr

0800094a <HAL_CAN_RxFifo1MsgPendingCallback>:
 800094a:	4770      	bx	lr

0800094c <HAL_CAN_RxFifo1FullCallback>:
 800094c:	4770      	bx	lr

0800094e <HAL_CAN_SleepCallback>:
 800094e:	4770      	bx	lr

08000950 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000950:	4770      	bx	lr

08000952 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000952:	4770      	bx	lr

08000954 <HAL_CAN_IRQHandler>:
{
 8000954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000958:	6803      	ldr	r3, [r0, #0]
 800095a:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800095c:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000960:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000962:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000966:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800096a:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800096e:	f016 0401 	ands.w	r4, r6, #1
{
 8000972:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000974:	d022      	beq.n	80009bc <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000976:	f017 0401 	ands.w	r4, r7, #1
 800097a:	d007      	beq.n	800098c <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800097c:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800097e:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000980:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000982:	f140 80a3 	bpl.w	8000acc <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000986:	f7ff ffd8 	bl	800093a <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800098a:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800098c:	05fb      	lsls	r3, r7, #23
 800098e:	d509      	bpl.n	80009a4 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000996:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000998:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800099a:	f140 80a5 	bpl.w	8000ae8 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800099e:	4628      	mov	r0, r5
 80009a0:	f7ff ffcc 	bl	800093c <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80009a4:	03fb      	lsls	r3, r7, #15
 80009a6:	d509      	bpl.n	80009bc <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009ae:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009b0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009b2:	f140 80a7 	bpl.w	8000b04 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80009b6:	4628      	mov	r0, r5
 80009b8:	f7ff ffc1 	bl	800093e <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80009bc:	0733      	lsls	r3, r6, #28
 80009be:	d507      	bpl.n	80009d0 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80009c0:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80009c4:	bf1f      	itttt	ne
 80009c6:	682b      	ldrne	r3, [r5, #0]
 80009c8:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80009ca:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80009ce:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80009d0:	0777      	lsls	r7, r6, #29
 80009d2:	d508      	bpl.n	80009e6 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80009d4:	f01b 0f08 	tst.w	fp, #8
 80009d8:	d005      	beq.n	80009e6 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	2208      	movs	r2, #8
 80009de:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009e0:	4628      	mov	r0, r5
 80009e2:	f7ff ffb1 	bl	8000948 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80009e6:	07b0      	lsls	r0, r6, #30
 80009e8:	d506      	bpl.n	80009f8 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80009ea:	682b      	ldr	r3, [r5, #0]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	0799      	lsls	r1, r3, #30
 80009f0:	d002      	beq.n	80009f8 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80009f2:	4628      	mov	r0, r5
 80009f4:	f7ff ffa7 	bl	8000946 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80009f8:	0672      	lsls	r2, r6, #25
 80009fa:	d507      	bpl.n	8000a0c <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80009fc:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a00:	bf1f      	itttt	ne
 8000a02:	682b      	ldrne	r3, [r5, #0]
 8000a04:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a06:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a0a:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a0c:	06b3      	lsls	r3, r6, #26
 8000a0e:	d508      	bpl.n	8000a22 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a10:	f01a 0f08 	tst.w	sl, #8
 8000a14:	d005      	beq.n	8000a22 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	2208      	movs	r2, #8
 8000a1a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	f7ff ff95 	bl	800094c <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a22:	06f7      	lsls	r7, r6, #27
 8000a24:	d506      	bpl.n	8000a34 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a26:	682b      	ldr	r3, [r5, #0]
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	0798      	lsls	r0, r3, #30
 8000a2c:	d002      	beq.n	8000a34 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a2e:	4628      	mov	r0, r5
 8000a30:	f7ff ff8b 	bl	800094a <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a34:	03b1      	lsls	r1, r6, #14
 8000a36:	d508      	bpl.n	8000a4a <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a38:	f019 0f10 	tst.w	r9, #16
 8000a3c:	d005      	beq.n	8000a4a <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a3e:	682b      	ldr	r3, [r5, #0]
 8000a40:	2210      	movs	r2, #16
 8000a42:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000a44:	4628      	mov	r0, r5
 8000a46:	f7ff ff82 	bl	800094e <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a4a:	03f2      	lsls	r2, r6, #15
 8000a4c:	d508      	bpl.n	8000a60 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a4e:	f019 0f08 	tst.w	r9, #8
 8000a52:	d005      	beq.n	8000a60 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	2208      	movs	r2, #8
 8000a58:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	f7ff ff78 	bl	8000950 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a60:	0433      	lsls	r3, r6, #16
 8000a62:	d52a      	bpl.n	8000aba <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a64:	f019 0f04 	tst.w	r9, #4
 8000a68:	682a      	ldr	r2, [r5, #0]
 8000a6a:	d024      	beq.n	8000ab6 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a6c:	05f7      	lsls	r7, r6, #23
 8000a6e:	d504      	bpl.n	8000a7a <HAL_CAN_IRQHandler+0x126>
 8000a70:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000a74:	bf18      	it	ne
 8000a76:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000a7a:	05b0      	lsls	r0, r6, #22
 8000a7c:	d504      	bpl.n	8000a88 <HAL_CAN_IRQHandler+0x134>
 8000a7e:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000a82:	bf18      	it	ne
 8000a84:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000a88:	0571      	lsls	r1, r6, #21
 8000a8a:	d504      	bpl.n	8000a96 <HAL_CAN_IRQHandler+0x142>
 8000a8c:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000a90:	bf18      	it	ne
 8000a92:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000a96:	0533      	lsls	r3, r6, #20
 8000a98:	d50d      	bpl.n	8000ab6 <HAL_CAN_IRQHandler+0x162>
 8000a9a:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000a9e:	d00a      	beq.n	8000ab6 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8000aa0:	2b30      	cmp	r3, #48	; 0x30
 8000aa2:	d04c      	beq.n	8000b3e <HAL_CAN_IRQHandler+0x1ea>
 8000aa4:	d83c      	bhi.n	8000b20 <HAL_CAN_IRQHandler+0x1cc>
 8000aa6:	2b10      	cmp	r3, #16
 8000aa8:	d043      	beq.n	8000b32 <HAL_CAN_IRQHandler+0x1de>
 8000aaa:	2b20      	cmp	r3, #32
 8000aac:	d044      	beq.n	8000b38 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000aae:	6993      	ldr	r3, [r2, #24]
 8000ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ab4:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000aba:	b12c      	cbz	r4, 8000ac8 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8000abc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	f7ff ff45 	bl	8000952 <HAL_CAN_ErrorCallback>
 8000ac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000acc:	077a      	lsls	r2, r7, #29
 8000ace:	d405      	bmi.n	8000adc <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000ad0:	f017 0408 	ands.w	r4, r7, #8
 8000ad4:	d105      	bne.n	8000ae2 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000ad6:	f7ff ff33 	bl	8000940 <HAL_CAN_TxMailbox0AbortCallback>
 8000ada:	e757      	b.n	800098c <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000adc:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000ae0:	e754      	b.n	800098c <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000ae2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000ae6:	e751      	b.n	800098c <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000ae8:	0579      	lsls	r1, r7, #21
 8000aea:	d502      	bpl.n	8000af2 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000aec:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000af0:	e758      	b.n	80009a4 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000af2:	053a      	lsls	r2, r7, #20
 8000af4:	d502      	bpl.n	8000afc <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000af6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000afa:	e753      	b.n	80009a4 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000afc:	4628      	mov	r0, r5
 8000afe:	f7ff ff20 	bl	8000942 <HAL_CAN_TxMailbox1AbortCallback>
 8000b02:	e74f      	b.n	80009a4 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b04:	0379      	lsls	r1, r7, #13
 8000b06:	d502      	bpl.n	8000b0e <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b08:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000b0c:	e756      	b.n	80009bc <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000b0e:	033a      	lsls	r2, r7, #12
 8000b10:	d502      	bpl.n	8000b18 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000b12:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000b16:	e751      	b.n	80009bc <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000b18:	4628      	mov	r0, r5
 8000b1a:	f7ff ff13 	bl	8000944 <HAL_CAN_TxMailbox2AbortCallback>
 8000b1e:	e74d      	b.n	80009bc <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000b20:	2b50      	cmp	r3, #80	; 0x50
 8000b22:	d00f      	beq.n	8000b44 <HAL_CAN_IRQHandler+0x1f0>
 8000b24:	2b60      	cmp	r3, #96	; 0x60
 8000b26:	d010      	beq.n	8000b4a <HAL_CAN_IRQHandler+0x1f6>
 8000b28:	2b40      	cmp	r3, #64	; 0x40
 8000b2a:	d1c0      	bne.n	8000aae <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b2c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000b30:	e7bd      	b.n	8000aae <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b32:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000b36:	e7ba      	b.n	8000aae <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b38:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000b3c:	e7b7      	b.n	8000aae <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b3e:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000b42:	e7b4      	b.n	8000aae <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b44:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000b48:	e7b1      	b.n	8000aae <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b4a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000b4e:	e7ae      	b.n	8000aae <HAL_CAN_IRQHandler+0x15a>

08000b50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b52:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b58:	041b      	lsls	r3, r3, #16
 8000b5a:	0c1b      	lsrs	r3, r3, #16
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	0200      	lsls	r0, r0, #8
 8000b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b66:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b6a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b6c:	60d3      	str	r3, [r2, #12]
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b76:	b530      	push	{r4, r5, lr}
 8000b78:	68dc      	ldr	r4, [r3, #12]
 8000b7a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	bf28      	it	cs
 8000b88:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 0501 	mov.w	r5, #1
 8000b90:	fa05 f303 	lsl.w	r3, r5, r3
 8000b94:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b98:	bf8c      	ite	hi
 8000b9a:	3c03      	subhi	r4, #3
 8000b9c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9e:	4019      	ands	r1, r3
 8000ba0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba2:	fa05 f404 	lsl.w	r4, r5, r4
 8000ba6:	3c01      	subs	r4, #1
 8000ba8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000baa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	ea42 0201 	orr.w	r2, r2, r1
 8000bb0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	bfad      	iteet	ge
 8000bb6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	f000 000f 	andlt.w	r0, r0, #15
 8000bbe:	4b06      	ldrlt	r3, [pc, #24]	; (8000bd8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	bfb5      	itete	lt
 8000bc6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bd0:	bd30      	pop	{r4, r5, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00
 8000bd8:	e000ed14 	.word	0xe000ed14

08000bdc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	db08      	blt.n	8000bf2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be0:	0942      	lsrs	r2, r0, #5
 8000be2:	2301      	movs	r3, #1
 8000be4:	f000 001f 	and.w	r0, r0, #31
 8000be8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bec:	4b01      	ldr	r3, [pc, #4]	; (8000bf4 <HAL_NVIC_EnableIRQ+0x18>)
 8000bee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfe:	d20a      	bcs.n	8000c16 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c04:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	21f0      	movs	r1, #240	; 0xf0
 8000c08:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c28:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000dd0 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c30:	4a65      	ldr	r2, [pc, #404]	; (8000dc8 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c32:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000dd4 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c36:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c38:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000c3a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000c40:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c44:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000c48:	45b6      	cmp	lr, r6
 8000c4a:	f040 80aa 	bne.w	8000da2 <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4e:	684c      	ldr	r4, [r1, #4]
 8000c50:	f024 0710 	bic.w	r7, r4, #16
 8000c54:	2f02      	cmp	r7, #2
 8000c56:	d116      	bne.n	8000c86 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000c58:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c5c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c60:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000c64:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c68:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c6c:	f04f 0c0f 	mov.w	ip, #15
 8000c70:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c74:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c78:	690d      	ldr	r5, [r1, #16]
 8000c7a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c7e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000c82:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c86:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c8a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c8c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c90:	fa05 f50a 	lsl.w	r5, r5, sl
 8000c94:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c96:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c9a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000caa:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cae:	d811      	bhi.n	8000cd4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000cb0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb6:	68cf      	ldr	r7, [r1, #12]
 8000cb8:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000cbc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000cc0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cc2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cd2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cd4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd8:	688f      	ldr	r7, [r1, #8]
 8000cda:	fa07 f70a 	lsl.w	r7, r7, sl
 8000cde:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ce0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce2:	00e5      	lsls	r5, r4, #3
 8000ce4:	d55d      	bpl.n	8000da2 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	f04f 0b00 	mov.w	fp, #0
 8000cea:	f8cd b00c 	str.w	fp, [sp, #12]
 8000cee:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf2:	4d36      	ldr	r5, [pc, #216]	; (8000dcc <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000cf8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000cfc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000d00:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000d04:	9703      	str	r7, [sp, #12]
 8000d06:	9f03      	ldr	r7, [sp, #12]
 8000d08:	f023 0703 	bic.w	r7, r3, #3
 8000d0c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d10:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d14:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d18:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d1c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d20:	f04f 0e0f 	mov.w	lr, #15
 8000d24:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d28:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d2a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d2e:	d03f      	beq.n	8000db0 <HAL_GPIO_Init+0x18c>
 8000d30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d34:	42a8      	cmp	r0, r5
 8000d36:	d03d      	beq.n	8000db4 <HAL_GPIO_Init+0x190>
 8000d38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d3c:	42a8      	cmp	r0, r5
 8000d3e:	d03b      	beq.n	8000db8 <HAL_GPIO_Init+0x194>
 8000d40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d44:	42a8      	cmp	r0, r5
 8000d46:	d039      	beq.n	8000dbc <HAL_GPIO_Init+0x198>
 8000d48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d4c:	42a8      	cmp	r0, r5
 8000d4e:	d037      	beq.n	8000dc0 <HAL_GPIO_Init+0x19c>
 8000d50:	4548      	cmp	r0, r9
 8000d52:	d037      	beq.n	8000dc4 <HAL_GPIO_Init+0x1a0>
 8000d54:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000d58:	42a8      	cmp	r0, r5
 8000d5a:	bf14      	ite	ne
 8000d5c:	2507      	movne	r5, #7
 8000d5e:	2506      	moveq	r5, #6
 8000d60:	fa05 f50c 	lsl.w	r5, r5, ip
 8000d64:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d68:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000d6a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d6c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000d72:	bf0c      	ite	eq
 8000d74:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d76:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000d78:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000d7a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000d80:	bf0c      	ite	eq
 8000d82:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d84:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000d86:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d88:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d8a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d8e:	bf0c      	ite	eq
 8000d90:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d92:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000d94:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000d96:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d98:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	bf54      	ite	pl
 8000d9c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d9e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000da0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da2:	3301      	adds	r3, #1
 8000da4:	2b10      	cmp	r3, #16
 8000da6:	f47f af48 	bne.w	8000c3a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000daa:	b005      	add	sp, #20
 8000dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000db0:	465d      	mov	r5, fp
 8000db2:	e7d5      	b.n	8000d60 <HAL_GPIO_Init+0x13c>
 8000db4:	2501      	movs	r5, #1
 8000db6:	e7d3      	b.n	8000d60 <HAL_GPIO_Init+0x13c>
 8000db8:	2502      	movs	r5, #2
 8000dba:	e7d1      	b.n	8000d60 <HAL_GPIO_Init+0x13c>
 8000dbc:	2503      	movs	r5, #3
 8000dbe:	e7cf      	b.n	8000d60 <HAL_GPIO_Init+0x13c>
 8000dc0:	2504      	movs	r5, #4
 8000dc2:	e7cd      	b.n	8000d60 <HAL_GPIO_Init+0x13c>
 8000dc4:	2505      	movs	r5, #5
 8000dc6:	e7cb      	b.n	8000d60 <HAL_GPIO_Init+0x13c>
 8000dc8:	40013c00 	.word	0x40013c00
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40021400 	.word	0x40021400

08000dd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd8:	b10a      	cbz	r2, 8000dde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dda:	6181      	str	r1, [r0, #24]
 8000ddc:	4770      	bx	lr
 8000dde:	0409      	lsls	r1, r1, #16
 8000de0:	e7fb      	b.n	8000dda <HAL_GPIO_WritePin+0x2>
	...

08000de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000de4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000de6:	4604      	mov	r4, r0
 8000de8:	b908      	cbnz	r0, 8000dee <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000dea:	2001      	movs	r0, #1
 8000dec:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000df2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000df6:	b91b      	cbnz	r3, 8000e00 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000df8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dfc:	f000 fe56 	bl	8001aac <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e00:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e02:	2324      	movs	r3, #36	; 0x24
 8000e04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000e08:	6813      	ldr	r3, [r2, #0]
 8000e0a:	f023 0301 	bic.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e10:	f000 f926 	bl	8001060 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e14:	6865      	ldr	r5, [r4, #4]
 8000e16:	4b41      	ldr	r3, [pc, #260]	; (8000f1c <HAL_I2C_Init+0x138>)
 8000e18:	429d      	cmp	r5, r3
 8000e1a:	d84d      	bhi.n	8000eb8 <HAL_I2C_Init+0xd4>
 8000e1c:	4b40      	ldr	r3, [pc, #256]	; (8000f20 <HAL_I2C_Init+0x13c>)
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d9e3      	bls.n	8000dea <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e22:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000e24:	493f      	ldr	r1, [pc, #252]	; (8000f24 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e26:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000e28:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e30:	430b      	orrs	r3, r1
 8000e32:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e34:	6a13      	ldr	r3, [r2, #32]
 8000e36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e3a:	3101      	adds	r1, #1
 8000e3c:	4319      	orrs	r1, r3
 8000e3e:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e40:	69d1      	ldr	r1, [r2, #28]
 8000e42:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <HAL_I2C_Init+0x138>)
 8000e44:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000e48:	429d      	cmp	r5, r3
 8000e4a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000e4e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000e52:	d848      	bhi.n	8000ee6 <HAL_I2C_Init+0x102>
 8000e54:	006d      	lsls	r5, r5, #1
 8000e56:	fbb0 f0f5 	udiv	r0, r0, r5
 8000e5a:	3001      	adds	r0, #1
 8000e5c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	bf38      	it	cc
 8000e64:	2304      	movcc	r3, #4
 8000e66:	430b      	orrs	r3, r1
 8000e68:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e6a:	6811      	ldr	r1, [r2, #0]
 8000e6c:	6a20      	ldr	r0, [r4, #32]
 8000e6e:	69e3      	ldr	r3, [r4, #28]
 8000e70:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000e74:	4303      	orrs	r3, r0
 8000e76:	430b      	orrs	r3, r1
 8000e78:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e7a:	6891      	ldr	r1, [r2, #8]
 8000e7c:	68e0      	ldr	r0, [r4, #12]
 8000e7e:	6923      	ldr	r3, [r4, #16]
 8000e80:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000e84:	4303      	orrs	r3, r0
 8000e86:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000e8a:	430b      	orrs	r3, r1
 8000e8c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e8e:	68d1      	ldr	r1, [r2, #12]
 8000e90:	69a0      	ldr	r0, [r4, #24]
 8000e92:	6963      	ldr	r3, [r4, #20]
 8000e94:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000e98:	4303      	orrs	r3, r0
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e9e:	6813      	ldr	r3, [r2, #0]
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ea6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000ea8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eaa:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000eac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eb0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eb2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <HAL_I2C_Init+0x144>)
 8000eba:	4298      	cmp	r0, r3
 8000ebc:	d995      	bls.n	8000dea <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ebe:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000ec0:	4e18      	ldr	r6, [pc, #96]	; (8000f24 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ec2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000ec4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ec8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ecc:	4333      	orrs	r3, r6
 8000ece:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ed0:	6a13      	ldr	r3, [r2, #32]
 8000ed2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000ed6:	4371      	muls	r1, r6
 8000ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000edc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000ee0:	fbb1 f1f6 	udiv	r1, r1, r6
 8000ee4:	e7a9      	b.n	8000e3a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ee6:	68a3      	ldr	r3, [r4, #8]
 8000ee8:	b953      	cbnz	r3, 8000f00 <HAL_I2C_Init+0x11c>
 8000eea:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000eee:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ef2:	1c43      	adds	r3, r0, #1
 8000ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef8:	b16b      	cbz	r3, 8000f16 <HAL_I2C_Init+0x132>
 8000efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000efe:	e7b2      	b.n	8000e66 <HAL_I2C_Init+0x82>
 8000f00:	2319      	movs	r3, #25
 8000f02:	436b      	muls	r3, r5
 8000f04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f08:	1c43      	adds	r3, r0, #1
 8000f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f0e:	b113      	cbz	r3, 8000f16 <HAL_I2C_Init+0x132>
 8000f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f14:	e7a7      	b.n	8000e66 <HAL_I2C_Init+0x82>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e7a5      	b.n	8000e66 <HAL_I2C_Init+0x82>
 8000f1a:	bf00      	nop
 8000f1c:	000186a0 	.word	0x000186a0
 8000f20:	001e847f 	.word	0x001e847f
 8000f24:	000f4240 	.word	0x000f4240
 8000f28:	003d08ff 	.word	0x003d08ff

08000f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f30:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f32:	4604      	mov	r4, r0
 8000f34:	b910      	cbnz	r0, 8000f3c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000f36:	2001      	movs	r0, #1
 8000f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f3c:	4b44      	ldr	r3, [pc, #272]	; (8001050 <HAL_RCC_ClockConfig+0x124>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	f002 020f 	and.w	r2, r2, #15
 8000f44:	428a      	cmp	r2, r1
 8000f46:	d328      	bcc.n	8000f9a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f48:	6821      	ldr	r1, [r4, #0]
 8000f4a:	078f      	lsls	r7, r1, #30
 8000f4c:	d42d      	bmi.n	8000faa <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f4e:	07c8      	lsls	r0, r1, #31
 8000f50:	d440      	bmi.n	8000fd4 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f52:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <HAL_RCC_ClockConfig+0x124>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	f002 020f 	and.w	r2, r2, #15
 8000f5a:	4295      	cmp	r5, r2
 8000f5c:	d366      	bcc.n	800102c <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	0751      	lsls	r1, r2, #29
 8000f62:	d46c      	bmi.n	800103e <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f64:	0713      	lsls	r3, r2, #28
 8000f66:	d507      	bpl.n	8000f78 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f68:	4a3a      	ldr	r2, [pc, #232]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
 8000f6a:	6921      	ldr	r1, [r4, #16]
 8000f6c:	6893      	ldr	r3, [r2, #8]
 8000f6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f76:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f78:	f000 f892 	bl	80010a0 <HAL_RCC_GetSysClockFreq>
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
 8000f7e:	4a36      	ldr	r2, [pc, #216]	; (8001058 <HAL_RCC_ClockConfig+0x12c>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	40d8      	lsrs	r0, r3
 8000f8a:	4b34      	ldr	r3, [pc, #208]	; (800105c <HAL_RCC_ClockConfig+0x130>)
 8000f8c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff fac0 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8000f94:	2000      	movs	r0, #0
 8000f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	4299      	cmp	r1, r3
 8000fa6:	d1c6      	bne.n	8000f36 <HAL_RCC_ClockConfig+0xa>
 8000fa8:	e7ce      	b.n	8000f48 <HAL_RCC_ClockConfig+0x1c>
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fb0:	bf1e      	ittt	ne
 8000fb2:	689a      	ldrne	r2, [r3, #8]
 8000fb4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000fb8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fbc:	bf42      	ittt	mi
 8000fbe:	689a      	ldrmi	r2, [r3, #8]
 8000fc0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000fc4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	68a0      	ldr	r0, [r4, #8]
 8000fca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fce:	4302      	orrs	r2, r0
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	e7bc      	b.n	8000f4e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd4:	6862      	ldr	r2, [r4, #4]
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
 8000fd8:	2a01      	cmp	r2, #1
 8000fda:	d11d      	bne.n	8001018 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe2:	d0a8      	beq.n	8000f36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe4:	4e1b      	ldr	r6, [pc, #108]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
 8000fe6:	68b3      	ldr	r3, [r6, #8]
 8000fe8:	f023 0303 	bic.w	r3, r3, #3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ff0:	f7ff fada 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ff8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffa:	68b3      	ldr	r3, [r6, #8]
 8000ffc:	6862      	ldr	r2, [r4, #4]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001006:	d0a4      	beq.n	8000f52 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001008:	f7ff face 	bl	80005a8 <HAL_GetTick>
 800100c:	1bc0      	subs	r0, r0, r7
 800100e:	4540      	cmp	r0, r8
 8001010:	d9f3      	bls.n	8000ffa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
}
 8001014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001018:	1e91      	subs	r1, r2, #2
 800101a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800101e:	d802      	bhi.n	8001026 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001020:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001024:	e7dd      	b.n	8000fe2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001026:	f013 0f02 	tst.w	r3, #2
 800102a:	e7da      	b.n	8000fe2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102c:	b2ea      	uxtb	r2, r5
 800102e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	429d      	cmp	r5, r3
 8001038:	f47f af7d 	bne.w	8000f36 <HAL_RCC_ClockConfig+0xa>
 800103c:	e78f      	b.n	8000f5e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800103e:	4905      	ldr	r1, [pc, #20]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
 8001040:	68e0      	ldr	r0, [r4, #12]
 8001042:	688b      	ldr	r3, [r1, #8]
 8001044:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001048:	4303      	orrs	r3, r0
 800104a:	608b      	str	r3, [r1, #8]
 800104c:	e78a      	b.n	8000f64 <HAL_RCC_ClockConfig+0x38>
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00
 8001054:	40023800 	.word	0x40023800
 8001058:	08001d04 	.word	0x08001d04
 800105c:	20000008 	.word	0x20000008

08001060 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800106a:	5cd3      	ldrb	r3, [r2, r3]
 800106c:	4a03      	ldr	r2, [pc, #12]	; (800107c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800106e:	6810      	ldr	r0, [r2, #0]
}
 8001070:	40d8      	lsrs	r0, r3
 8001072:	4770      	bx	lr
 8001074:	40023800 	.word	0x40023800
 8001078:	08001d14 	.word	0x08001d14
 800107c:	20000008 	.word	0x20000008

08001080 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800108a:	5cd3      	ldrb	r3, [r2, r3]
 800108c:	4a03      	ldr	r2, [pc, #12]	; (800109c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800108e:	6810      	ldr	r0, [r2, #0]
}
 8001090:	40d8      	lsrs	r0, r3
 8001092:	4770      	bx	lr
 8001094:	40023800 	.word	0x40023800
 8001098:	08001d14 	.word	0x08001d14
 800109c:	20000008 	.word	0x20000008

080010a0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010a0:	4920      	ldr	r1, [pc, #128]	; (8001124 <HAL_RCC_GetSysClockFreq+0x84>)
{
 80010a2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010a4:	688b      	ldr	r3, [r1, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d007      	beq.n	80010be <HAL_RCC_GetSysClockFreq+0x1e>
 80010ae:	2b0c      	cmp	r3, #12
 80010b0:	d020      	beq.n	80010f4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010b2:	4a1d      	ldr	r2, [pc, #116]	; (8001128 <HAL_RCC_GetSysClockFreq+0x88>)
 80010b4:	481d      	ldr	r0, [pc, #116]	; (800112c <HAL_RCC_GetSysClockFreq+0x8c>)
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf18      	it	ne
 80010ba:	4610      	movne	r0, r2
 80010bc:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010be:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010c0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010c4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c8:	bf14      	ite	ne
 80010ca:	4818      	ldrne	r0, [pc, #96]	; (800112c <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010cc:	4816      	ldreq	r0, [pc, #88]	; (8001128 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010ce:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80010d2:	bf18      	it	ne
 80010d4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010da:	fba1 0100 	umull	r0, r1, r1, r0
 80010de:	f7ff f891 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_RCC_GetSysClockFreq+0x84>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80010ea:	3301      	adds	r3, #1
 80010ec:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80010ee:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010f2:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010f4:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010f6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010f8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010fa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010fe:	bf14      	ite	ne
 8001100:	480a      	ldrne	r0, [pc, #40]	; (800112c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001102:	4809      	ldreq	r0, [pc, #36]	; (8001128 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001104:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001108:	bf18      	it	ne
 800110a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800110c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001110:	fba1 0100 	umull	r0, r1, r1, r0
 8001114:	f7ff f876 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001118:	4b02      	ldr	r3, [pc, #8]	; (8001124 <HAL_RCC_GetSysClockFreq+0x84>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001120:	e7e5      	b.n	80010ee <HAL_RCC_GetSysClockFreq+0x4e>
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	00f42400 	.word	0x00f42400
 800112c:	007a1200 	.word	0x007a1200

08001130 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001130:	6803      	ldr	r3, [r0, #0]
{
 8001132:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	07df      	lsls	r7, r3, #31
{
 8001138:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	d410      	bmi.n	800115e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	079e      	lsls	r6, r3, #30
 8001140:	d467      	bmi.n	8001212 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	071a      	lsls	r2, r3, #28
 8001146:	f100 80b2 	bmi.w	80012ae <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	075b      	lsls	r3, r3, #29
 800114e:	f100 80d0 	bmi.w	80012f2 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001152:	69a2      	ldr	r2, [r4, #24]
 8001154:	2a00      	cmp	r2, #0
 8001156:	f040 8139 	bne.w	80013cc <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800115a:	2000      	movs	r0, #0
 800115c:	e01e      	b.n	800119c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800115e:	4b97      	ldr	r3, [pc, #604]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	f002 020c 	and.w	r2, r2, #12
 8001166:	2a04      	cmp	r2, #4
 8001168:	d010      	beq.n	800118c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001170:	2a08      	cmp	r2, #8
 8001172:	d102      	bne.n	800117a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	025d      	lsls	r5, r3, #9
 8001178:	d408      	bmi.n	800118c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117a:	4b90      	ldr	r3, [pc, #576]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001182:	2a0c      	cmp	r2, #12
 8001184:	d10d      	bne.n	80011a2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	0250      	lsls	r0, r2, #9
 800118a:	d50a      	bpl.n	80011a2 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	4b8b      	ldr	r3, [pc, #556]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0399      	lsls	r1, r3, #14
 8001192:	d5d3      	bpl.n	800113c <HAL_RCC_OscConfig+0xc>
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1d0      	bne.n	800113c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800119a:	2001      	movs	r0, #1
}
 800119c:	b002      	add	sp, #8
 800119e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a2:	6862      	ldr	r2, [r4, #4]
 80011a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80011a8:	d111      	bne.n	80011ce <HAL_RCC_OscConfig+0x9e>
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011b2:	f7ff f9f9 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b6:	4d81      	ldr	r5, [pc, #516]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80011b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	039a      	lsls	r2, r3, #14
 80011be:	d4bd      	bmi.n	800113c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff f9f2 	bl	80005a8 <HAL_GetTick>
 80011c4:	1b80      	subs	r0, r0, r6
 80011c6:	2864      	cmp	r0, #100	; 0x64
 80011c8:	d9f7      	bls.n	80011ba <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 80011ca:	2003      	movs	r0, #3
 80011cc:	e7e6      	b.n	800119c <HAL_RCC_OscConfig+0x6c>
 80011ce:	4d7b      	ldr	r5, [pc, #492]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	d107      	bne.n	80011e8 <HAL_RCC_OscConfig+0xb8>
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011dc:	602b      	str	r3, [r5, #0]
 80011de:	682b      	ldr	r3, [r5, #0]
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	602b      	str	r3, [r5, #0]
 80011e6:	e7e4      	b.n	80011b2 <HAL_RCC_OscConfig+0x82>
 80011e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ec:	602b      	str	r3, [r5, #0]
 80011ee:	682b      	ldr	r3, [r5, #0]
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d1db      	bne.n	80011b2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80011fa:	f7ff f9d5 	bl	80005a8 <HAL_GetTick>
 80011fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	039b      	lsls	r3, r3, #14
 8001204:	d59a      	bpl.n	800113c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001206:	f7ff f9cf 	bl	80005a8 <HAL_GetTick>
 800120a:	1b80      	subs	r0, r0, r6
 800120c:	2864      	cmp	r0, #100	; 0x64
 800120e:	d9f7      	bls.n	8001200 <HAL_RCC_OscConfig+0xd0>
 8001210:	e7db      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001212:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	f012 0f0c 	tst.w	r2, #12
 800121a:	d010      	beq.n	800123e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001222:	2a08      	cmp	r2, #8
 8001224:	d102      	bne.n	800122c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	025f      	lsls	r7, r3, #9
 800122a:	d508      	bpl.n	800123e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122c:	4a63      	ldr	r2, [pc, #396]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
 800122e:	6893      	ldr	r3, [r2, #8]
 8001230:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001234:	2b0c      	cmp	r3, #12
 8001236:	d111      	bne.n	800125c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001238:	6853      	ldr	r3, [r2, #4]
 800123a:	025e      	lsls	r6, r3, #9
 800123c:	d40e      	bmi.n	800125c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	0795      	lsls	r5, r2, #30
 8001244:	d502      	bpl.n	800124c <HAL_RCC_OscConfig+0x11c>
 8001246:	68e2      	ldr	r2, [r4, #12]
 8001248:	2a01      	cmp	r2, #1
 800124a:	d1a6      	bne.n	800119a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	6921      	ldr	r1, [r4, #16]
 8001250:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001254:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001258:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e772      	b.n	8001142 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800125c:	68e2      	ldr	r2, [r4, #12]
 800125e:	4b58      	ldr	r3, [pc, #352]	; (80013c0 <HAL_RCC_OscConfig+0x290>)
 8001260:	b1b2      	cbz	r2, 8001290 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001266:	f7ff f99f 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126a:	4d54      	ldr	r5, [pc, #336]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800126c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	0798      	lsls	r0, r3, #30
 8001272:	d507      	bpl.n	8001284 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	6922      	ldr	r2, [r4, #16]
 8001278:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800127c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001280:	602b      	str	r3, [r5, #0]
 8001282:	e75e      	b.n	8001142 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff f990 	bl	80005a8 <HAL_GetTick>
 8001288:	1b80      	subs	r0, r0, r6
 800128a:	2802      	cmp	r0, #2
 800128c:	d9ef      	bls.n	800126e <HAL_RCC_OscConfig+0x13e>
 800128e:	e79c      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001290:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001292:	f7ff f989 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	4d49      	ldr	r5, [pc, #292]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001298:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	682b      	ldr	r3, [r5, #0]
 800129c:	0799      	lsls	r1, r3, #30
 800129e:	f57f af50 	bpl.w	8001142 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff f981 	bl	80005a8 <HAL_GetTick>
 80012a6:	1b80      	subs	r0, r0, r6
 80012a8:	2802      	cmp	r0, #2
 80012aa:	d9f6      	bls.n	800129a <HAL_RCC_OscConfig+0x16a>
 80012ac:	e78d      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ae:	6962      	ldr	r2, [r4, #20]
 80012b0:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <HAL_RCC_OscConfig+0x294>)
 80012b2:	b17a      	cbz	r2, 80012d4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012b8:	f7ff f976 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012bc:	4d3f      	ldr	r5, [pc, #252]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80012be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012c2:	079f      	lsls	r7, r3, #30
 80012c4:	f53f af41 	bmi.w	800114a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff f96e 	bl	80005a8 <HAL_GetTick>
 80012cc:	1b80      	subs	r0, r0, r6
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d9f6      	bls.n	80012c0 <HAL_RCC_OscConfig+0x190>
 80012d2:	e77a      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80012d4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012d6:	f7ff f967 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012da:	4d38      	ldr	r5, [pc, #224]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80012dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012e0:	0798      	lsls	r0, r3, #30
 80012e2:	f57f af32 	bpl.w	800114a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e6:	f7ff f95f 	bl	80005a8 <HAL_GetTick>
 80012ea:	1b80      	subs	r0, r0, r6
 80012ec:	2802      	cmp	r0, #2
 80012ee:	d9f6      	bls.n	80012de <HAL_RCC_OscConfig+0x1ae>
 80012f0:	e76b      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
 80012f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80012fa:	d128      	bne.n	800134e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	9201      	str	r2, [sp, #4]
 80012fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001300:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001310:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001312:	4d2d      	ldr	r5, [pc, #180]	; (80013c8 <HAL_RCC_OscConfig+0x298>)
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	05d9      	lsls	r1, r3, #23
 8001318:	d51b      	bpl.n	8001352 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131a:	68a3      	ldr	r3, [r4, #8]
 800131c:	4d27      	ldr	r5, [pc, #156]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
 800131e:	2b01      	cmp	r3, #1
 8001320:	d127      	bne.n	8001372 <HAL_RCC_OscConfig+0x242>
 8001322:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800132a:	f7ff f93d 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132e:	4d23      	ldr	r5, [pc, #140]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001330:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001336:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001338:	079b      	lsls	r3, r3, #30
 800133a:	d539      	bpl.n	80013b0 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 800133c:	2e00      	cmp	r6, #0
 800133e:	f43f af08 	beq.w	8001152 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <HAL_RCC_OscConfig+0x28c>)
 8001344:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	; 0x40
 800134c:	e701      	b.n	8001152 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2600      	movs	r6, #0
 8001350:	e7df      	b.n	8001312 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	682b      	ldr	r3, [r5, #0]
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800135a:	f7ff f925 	bl	80005a8 <HAL_GetTick>
 800135e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	05da      	lsls	r2, r3, #23
 8001364:	d4d9      	bmi.n	800131a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001366:	f7ff f91f 	bl	80005a8 <HAL_GetTick>
 800136a:	1bc0      	subs	r0, r0, r7
 800136c:	2802      	cmp	r0, #2
 800136e:	d9f7      	bls.n	8001360 <HAL_RCC_OscConfig+0x230>
 8001370:	e72b      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001372:	2b05      	cmp	r3, #5
 8001374:	d104      	bne.n	8001380 <HAL_RCC_OscConfig+0x250>
 8001376:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	672b      	str	r3, [r5, #112]	; 0x70
 800137e:	e7d0      	b.n	8001322 <HAL_RCC_OscConfig+0x1f2>
 8001380:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	672a      	str	r2, [r5, #112]	; 0x70
 8001388:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800138a:	f022 0204 	bic.w	r2, r2, #4
 800138e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1ca      	bne.n	800132a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001394:	f7ff f908 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800139c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013a0:	0798      	lsls	r0, r3, #30
 80013a2:	d5cb      	bpl.n	800133c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff f900 	bl	80005a8 <HAL_GetTick>
 80013a8:	1bc0      	subs	r0, r0, r7
 80013aa:	4540      	cmp	r0, r8
 80013ac:	d9f7      	bls.n	800139e <HAL_RCC_OscConfig+0x26e>
 80013ae:	e70c      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b0:	f7ff f8fa 	bl	80005a8 <HAL_GetTick>
 80013b4:	1bc0      	subs	r0, r0, r7
 80013b6:	4540      	cmp	r0, r8
 80013b8:	d9bd      	bls.n	8001336 <HAL_RCC_OscConfig+0x206>
 80013ba:	e706      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
 80013bc:	40023800 	.word	0x40023800
 80013c0:	42470000 	.word	0x42470000
 80013c4:	42470e80 	.word	0x42470e80
 80013c8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013cc:	4d23      	ldr	r5, [pc, #140]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80013ce:	68ab      	ldr	r3, [r5, #8]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	f43f aee0 	beq.w	800119a <HAL_RCC_OscConfig+0x6a>
 80013da:	4e21      	ldr	r6, [pc, #132]	; (8001460 <HAL_RCC_OscConfig+0x330>)
 80013dc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013de:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013e0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e2:	d12d      	bne.n	8001440 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 80013e4:	f7ff f8e0 	bl	80005a8 <HAL_GetTick>
 80013e8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	0199      	lsls	r1, r3, #6
 80013ee:	d421      	bmi.n	8001434 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f0:	6a22      	ldr	r2, [r4, #32]
 80013f2:	69e3      	ldr	r3, [r4, #28]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013f8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001402:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001404:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001408:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	4c14      	ldr	r4, [pc, #80]	; (800145c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140c:	0852      	lsrs	r2, r2, #1
 800140e:	3a01      	subs	r2, #1
 8001410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001414:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001416:	2301      	movs	r3, #1
 8001418:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800141a:	f7ff f8c5 	bl	80005a8 <HAL_GetTick>
 800141e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	019a      	lsls	r2, r3, #6
 8001424:	f53f ae99 	bmi.w	800115a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff f8be 	bl	80005a8 <HAL_GetTick>
 800142c:	1b40      	subs	r0, r0, r5
 800142e:	2802      	cmp	r0, #2
 8001430:	d9f6      	bls.n	8001420 <HAL_RCC_OscConfig+0x2f0>
 8001432:	e6ca      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff f8b8 	bl	80005a8 <HAL_GetTick>
 8001438:	1bc0      	subs	r0, r0, r7
 800143a:	2802      	cmp	r0, #2
 800143c:	d9d5      	bls.n	80013ea <HAL_RCC_OscConfig+0x2ba>
 800143e:	e6c4      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001440:	f7ff f8b2 	bl	80005a8 <HAL_GetTick>
 8001444:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	019b      	lsls	r3, r3, #6
 800144a:	f57f ae86 	bpl.w	800115a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff f8ab 	bl	80005a8 <HAL_GetTick>
 8001452:	1b00      	subs	r0, r0, r4
 8001454:	2802      	cmp	r0, #2
 8001456:	d9f6      	bls.n	8001446 <HAL_RCC_OscConfig+0x316>
 8001458:	e6b7      	b.n	80011ca <HAL_RCC_OscConfig+0x9a>
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	42470060 	.word	0x42470060

08001464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001468:	6806      	ldr	r6, [r0, #0]
 800146a:	68c2      	ldr	r2, [r0, #12]
 800146c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800146e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001470:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001474:	4313      	orrs	r3, r2
 8001476:	6133      	str	r3, [r6, #16]
{
 8001478:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800147a:	6883      	ldr	r3, [r0, #8]
 800147c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800147e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001480:	4303      	orrs	r3, r0
 8001482:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001484:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001488:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800148a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800148e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001490:	4313      	orrs	r3, r2
 8001492:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001494:	6973      	ldr	r3, [r6, #20]
 8001496:	69a2      	ldr	r2, [r4, #24]
 8001498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800149c:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800149e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014a2:	6173      	str	r3, [r6, #20]
 80014a4:	4b7a      	ldr	r3, [pc, #488]	; (8001690 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014a6:	d17c      	bne.n	80015a2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80014a8:	429e      	cmp	r6, r3
 80014aa:	d003      	beq.n	80014b4 <UART_SetConfig+0x50>
 80014ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014b0:	429e      	cmp	r6, r3
 80014b2:	d144      	bne.n	800153e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80014b4:	f7ff fde4 	bl	8001080 <HAL_RCC_GetPCLK2Freq>
 80014b8:	2519      	movs	r5, #25
 80014ba:	fb05 f300 	mul.w	r3, r5, r0
 80014be:	6860      	ldr	r0, [r4, #4]
 80014c0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014c4:	0040      	lsls	r0, r0, #1
 80014c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80014ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80014ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80014d2:	f7ff fdd5 	bl	8001080 <HAL_RCC_GetPCLK2Freq>
 80014d6:	6863      	ldr	r3, [r4, #4]
 80014d8:	4368      	muls	r0, r5
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fbb0 f7f3 	udiv	r7, r0, r3
 80014e0:	f7ff fdce 	bl	8001080 <HAL_RCC_GetPCLK2Freq>
 80014e4:	6863      	ldr	r3, [r4, #4]
 80014e6:	4368      	muls	r0, r5
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80014f2:	fb09 7313 	mls	r3, r9, r3, r7
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	3332      	adds	r3, #50	; 0x32
 80014fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001504:	f7ff fdbc 	bl	8001080 <HAL_RCC_GetPCLK2Freq>
 8001508:	6862      	ldr	r2, [r4, #4]
 800150a:	4368      	muls	r0, r5
 800150c:	0052      	lsls	r2, r2, #1
 800150e:	fbb0 faf2 	udiv	sl, r0, r2
 8001512:	f7ff fdb5 	bl	8001080 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001516:	6863      	ldr	r3, [r4, #4]
 8001518:	4368      	muls	r0, r5
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001520:	fbb3 f3f9 	udiv	r3, r3, r9
 8001524:	fb09 a313 	mls	r3, r9, r3, sl
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	3332      	adds	r3, #50	; 0x32
 800152c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001536:	443b      	add	r3, r7
 8001538:	60b3      	str	r3, [r6, #8]
 800153a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800153e:	f7ff fd8f 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 8001542:	2519      	movs	r5, #25
 8001544:	fb05 f300 	mul.w	r3, r5, r0
 8001548:	6860      	ldr	r0, [r4, #4]
 800154a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800154e:	0040      	lsls	r0, r0, #1
 8001550:	fbb3 f3f0 	udiv	r3, r3, r0
 8001554:	fbb3 f3f9 	udiv	r3, r3, r9
 8001558:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800155c:	f7ff fd80 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 8001560:	6863      	ldr	r3, [r4, #4]
 8001562:	4368      	muls	r0, r5
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fbb0 f7f3 	udiv	r7, r0, r3
 800156a:	f7ff fd79 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 800156e:	6863      	ldr	r3, [r4, #4]
 8001570:	4368      	muls	r0, r5
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fbb0 f3f3 	udiv	r3, r0, r3
 8001578:	fbb3 f3f9 	udiv	r3, r3, r9
 800157c:	fb09 7313 	mls	r3, r9, r3, r7
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	3332      	adds	r3, #50	; 0x32
 8001584:	fbb3 f3f9 	udiv	r3, r3, r9
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800158e:	f7ff fd67 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 8001592:	6862      	ldr	r2, [r4, #4]
 8001594:	4368      	muls	r0, r5
 8001596:	0052      	lsls	r2, r2, #1
 8001598:	fbb0 faf2 	udiv	sl, r0, r2
 800159c:	f7ff fd60 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 80015a0:	e7b9      	b.n	8001516 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015a2:	429e      	cmp	r6, r3
 80015a4:	d002      	beq.n	80015ac <UART_SetConfig+0x148>
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <UART_SetConfig+0x230>)
 80015a8:	429e      	cmp	r6, r3
 80015aa:	d140      	bne.n	800162e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80015ac:	f7ff fd68 	bl	8001080 <HAL_RCC_GetPCLK2Freq>
 80015b0:	6867      	ldr	r7, [r4, #4]
 80015b2:	2519      	movs	r5, #25
 80015b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015b8:	fb05 f300 	mul.w	r3, r5, r0
 80015bc:	00bf      	lsls	r7, r7, #2
 80015be:	fbb3 f3f7 	udiv	r3, r3, r7
 80015c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80015c6:	011f      	lsls	r7, r3, #4
 80015c8:	f7ff fd5a 	bl	8001080 <HAL_RCC_GetPCLK2Freq>
 80015cc:	6863      	ldr	r3, [r4, #4]
 80015ce:	4368      	muls	r0, r5
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	fbb0 f8f3 	udiv	r8, r0, r3
 80015d6:	f7ff fd53 	bl	8001080 <HAL_RCC_GetPCLK2Freq>
 80015da:	6863      	ldr	r3, [r4, #4]
 80015dc:	4368      	muls	r0, r5
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80015e8:	fb09 8313 	mls	r3, r9, r3, r8
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	3332      	adds	r3, #50	; 0x32
 80015f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80015f4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80015f8:	f7ff fd42 	bl	8001080 <HAL_RCC_GetPCLK2Freq>
 80015fc:	6862      	ldr	r2, [r4, #4]
 80015fe:	4368      	muls	r0, r5
 8001600:	0092      	lsls	r2, r2, #2
 8001602:	fbb0 faf2 	udiv	sl, r0, r2
 8001606:	f7ff fd3b 	bl	8001080 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800160a:	6863      	ldr	r3, [r4, #4]
 800160c:	4368      	muls	r0, r5
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	fbb0 f3f3 	udiv	r3, r0, r3
 8001614:	fbb3 f3f9 	udiv	r3, r3, r9
 8001618:	fb09 a313 	mls	r3, r9, r3, sl
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	3332      	adds	r3, #50	; 0x32
 8001620:	fbb3 f3f9 	udiv	r3, r3, r9
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	ea43 0308 	orr.w	r3, r3, r8
 800162c:	e783      	b.n	8001536 <UART_SetConfig+0xd2>
 800162e:	f7ff fd17 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 8001632:	6867      	ldr	r7, [r4, #4]
 8001634:	2519      	movs	r5, #25
 8001636:	f04f 0964 	mov.w	r9, #100	; 0x64
 800163a:	fb05 f300 	mul.w	r3, r5, r0
 800163e:	00bf      	lsls	r7, r7, #2
 8001640:	fbb3 f3f7 	udiv	r3, r3, r7
 8001644:	fbb3 f3f9 	udiv	r3, r3, r9
 8001648:	011f      	lsls	r7, r3, #4
 800164a:	f7ff fd09 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 800164e:	6863      	ldr	r3, [r4, #4]
 8001650:	4368      	muls	r0, r5
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fbb0 f8f3 	udiv	r8, r0, r3
 8001658:	f7ff fd02 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 800165c:	6863      	ldr	r3, [r4, #4]
 800165e:	4368      	muls	r0, r5
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	fbb0 f3f3 	udiv	r3, r0, r3
 8001666:	fbb3 f3f9 	udiv	r3, r3, r9
 800166a:	fb09 8313 	mls	r3, r9, r3, r8
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	3332      	adds	r3, #50	; 0x32
 8001672:	fbb3 f3f9 	udiv	r3, r3, r9
 8001676:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800167a:	f7ff fcf1 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 800167e:	6862      	ldr	r2, [r4, #4]
 8001680:	4368      	muls	r0, r5
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	fbb0 faf2 	udiv	sl, r0, r2
 8001688:	f7ff fcea 	bl	8001060 <HAL_RCC_GetPCLK1Freq>
 800168c:	e7bd      	b.n	800160a <UART_SetConfig+0x1a6>
 800168e:	bf00      	nop
 8001690:	40011000 	.word	0x40011000
 8001694:	40011400 	.word	0x40011400

08001698 <HAL_UART_Init>:
{
 8001698:	b510      	push	{r4, lr}
  if (huart == NULL)
 800169a:	4604      	mov	r4, r0
 800169c:	b340      	cbz	r0, 80016f0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800169e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016a6:	b91b      	cbnz	r3, 80016b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80016a8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80016ac:	f000 fa38 	bl	8001b20 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80016b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80016b2:	2324      	movs	r3, #36	; 0x24
 80016b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80016b8:	68d3      	ldr	r3, [r2, #12]
 80016ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff fecf 	bl	8001464 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016de:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016e0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80016e2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80016e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80016ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80016ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
}
 80016f2:	bd10      	pop	{r4, pc}

080016f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f4:	b530      	push	{r4, r5, lr}
 80016f6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f8:	2234      	movs	r2, #52	; 0x34
 80016fa:	2100      	movs	r1, #0
 80016fc:	a807      	add	r0, sp, #28
 80016fe:	f000 faed 	bl	8001cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001702:	2100      	movs	r1, #0
 8001704:	2214      	movs	r2, #20
 8001706:	a802      	add	r0, sp, #8
 8001708:	f000 fae8 	bl	8001cdc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	2500      	movs	r5, #0
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <SystemClock_Config+0x8c>)
 8001710:	9500      	str	r5, [sp, #0]
 8001712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001714:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800171c:	4a19      	ldr	r2, [pc, #100]	; (8001784 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001726:	9501      	str	r5, [sp, #4]
 8001728:	6813      	ldr	r3, [r2, #0]
 800172a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800172e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001736:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001744:	2310      	movs	r3, #16
 8001746:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001748:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800174a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 800174c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001750:	2348      	movs	r3, #72	; 0x48
 8001752:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001754:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001758:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800175a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800175c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175e:	f7ff fce7 	bl	8001130 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001762:	230f      	movs	r3, #15
 8001764:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001766:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001772:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001774:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001776:	f7ff fbd9 	bl	8000f2c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800177a:	b015      	add	sp, #84	; 0x54
 800177c:	bd30      	pop	{r4, r5, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000

08001788 <main>:
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800178c:	f7fe fee6 	bl	800055c <HAL_Init>
  SystemClock_Config();
 8001790:	f7ff ffb0 	bl	80016f4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	2214      	movs	r2, #20
 8001796:	2100      	movs	r1, #0
 8001798:	eb0d 0002 	add.w	r0, sp, r2

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179c:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f000 fa9d 	bl	8001cdc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	4b61      	ldr	r3, [pc, #388]	; (8001928 <main+0x1a0>)
 80017a4:	9401      	str	r4, [sp, #4]
 80017a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017a8:	4860      	ldr	r0, [pc, #384]	; (800192c <main+0x1a4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	f042 0204 	orr.w	r2, r2, #4
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
 80017b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b2:	f002 0204 	and.w	r2, r2, #4
 80017b6:	9201      	str	r2, [sp, #4]
 80017b8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	9402      	str	r4, [sp, #8]
 80017bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
 80017c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80017ca:	9202      	str	r2, [sp, #8]
 80017cc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	9403      	str	r4, [sp, #12]
 80017d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
 80017d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017da:	f002 0201 	and.w	r2, r2, #1
 80017de:	9203      	str	r2, [sp, #12]
 80017e0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	9404      	str	r4, [sp, #16]
 80017e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e6:	f042 0202 	orr.w	r2, r2, #2
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017f4:	4622      	mov	r2, r4
 80017f6:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017fa:	f7ff faed 	bl	8000dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_ERROR_Pin|LED2_STATUS_Pin, GPIO_PIN_RESET);
 80017fe:	4622      	mov	r2, r4
 8001800:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001804:	484a      	ldr	r0, [pc, #296]	; (8001930 <main+0x1a8>)
 8001806:	f7ff fae7 	bl	8000dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800180a:	4622      	mov	r2, r4
 800180c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001810:	4848      	ldr	r0, [pc, #288]	; (8001934 <main+0x1ac>)
 8001812:	f7ff fae1 	bl	8000dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800181c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800181e:	4b46      	ldr	r3, [pc, #280]	; (8001938 <main+0x1b0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001820:	4844      	ldr	r0, [pc, #272]	; (8001934 <main+0x1ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001822:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001828:	f7ff f9fc 	bl	8000c24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800182c:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800182e:	a905      	add	r1, sp, #20
 8001830:	483e      	ldr	r0, [pc, #248]	; (800192c <main+0x1a4>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8001832:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800183a:	f7ff f9f3 	bl	8000c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_ERROR_Pin LED2_STATUS_Pin */
  GPIO_InitStruct.Pin = LED1_ERROR_Pin|LED2_STATUS_Pin;
 800183e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	a905      	add	r1, sp, #20
 8001844:	483a      	ldr	r0, [pc, #232]	; (8001930 <main+0x1a8>)
  GPIO_InitStruct.Pin = LED1_ERROR_Pin|LED2_STATUS_Pin;
 8001846:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f7ff f9e9 	bl	8000c24 <HAL_GPIO_Init>
  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001852:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001854:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001858:	4836      	ldr	r0, [pc, #216]	; (8001934 <main+0x1ac>)
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800185a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001862:	f7ff f9df 	bl	8000c24 <HAL_GPIO_Init>
  hcan1.Instance = CAN1;
 8001866:	4835      	ldr	r0, [pc, #212]	; (800193c <main+0x1b4>)
  hcan1.Init.Prescaler = 4;
 8001868:	4a35      	ldr	r2, [pc, #212]	; (8001940 <main+0x1b8>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800186a:	6084      	str	r4, [r0, #8]
  hcan1.Init.Prescaler = 4;
 800186c:	2304      	movs	r3, #4
 800186e:	e880 000c 	stmia.w	r0, {r2, r3}
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001872:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001876:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001878:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800187c:	6143      	str	r3, [r0, #20]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800187e:	60c4      	str	r4, [r0, #12]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001880:	7604      	strb	r4, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001882:	7644      	strb	r4, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001884:	7684      	strb	r4, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001886:	76c4      	strb	r4, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001888:	7704      	strb	r4, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800188a:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800188c:	f7fe ffda 	bl	8000844 <HAL_CAN_Init>
  huart2.Instance = USART2;
 8001890:	482c      	ldr	r0, [pc, #176]	; (8001944 <main+0x1bc>)
  huart2.Init.BaudRate = 115200;
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <main+0x1c0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001894:	6084      	str	r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001896:	250c      	movs	r5, #12
  huart2.Init.BaudRate = 115200;
 8001898:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 800189c:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a0:	6145      	str	r5, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a2:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a4:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018aa:	f7ff fef5 	bl	8001698 <HAL_UART_Init>
  huart1.Instance = USART1;
 80018ae:	4827      	ldr	r0, [pc, #156]	; (800194c <main+0x1c4>)
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <main+0x1c8>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018b2:	6145      	str	r5, [r0, #20]
  huart1.Init.BaudRate = 115200;
 80018b4:	e880 0088 	stmia.w	r0, {r3, r7}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b8:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ba:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018bc:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c0:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018c2:	f7ff fee9 	bl	8001698 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80018c6:	2210      	movs	r2, #16
 80018c8:	4621      	mov	r1, r4
 80018ca:	a805      	add	r0, sp, #20
 80018cc:	f000 fa06 	bl	8001cdc <memset>
  hadc1.Instance = ADC1;
 80018d0:	4d20      	ldr	r5, [pc, #128]	; (8001954 <main+0x1cc>)
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <main+0x1d0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018d4:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018d6:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018da:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <main+0x1d4>)
 80018de:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = DISABLE;
 80018e0:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018e2:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018e4:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018e8:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ea:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018ec:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018ee:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f2:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f4:	f7fe fe5e 	bl	80005b4 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f8:	a905      	add	r1, sp, #20
 80018fa:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 80018fc:	9405      	str	r4, [sp, #20]
  sConfig.Rank = 1;
 80018fe:	9606      	str	r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001900:	9407      	str	r4, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001902:	f7fe fefd 	bl	8000700 <HAL_ADC_ConfigChannel>
  hi2c2.Instance = I2C2;
 8001906:	4816      	ldr	r0, [pc, #88]	; (8001960 <main+0x1d8>)
  hi2c2.Init.ClockSpeed = 100000;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <main+0x1dc>)
 800190a:	4917      	ldr	r1, [pc, #92]	; (8001968 <main+0x1e0>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800190c:	6084      	str	r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 800190e:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001912:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 8001916:	60c4      	str	r4, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001918:	6103      	str	r3, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191a:	6144      	str	r4, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800191c:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191e:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001920:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001922:	f7ff fa5f 	bl	8000de4 <HAL_I2C_Init>
 8001926:	e7fe      	b.n	8001926 <main+0x19e>
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800
 8001938:	10210000 	.word	0x10210000
 800193c:	20000148 	.word	0x20000148
 8001940:	40006400 	.word	0x40006400
 8001944:	20000108 	.word	0x20000108
 8001948:	40004400 	.word	0x40004400
 800194c:	200000c8 	.word	0x200000c8
 8001950:	40011000 	.word	0x40011000
 8001954:	20000080 	.word	0x20000080
 8001958:	40012000 	.word	0x40012000
 800195c:	0f000001 	.word	0x0f000001
 8001960:	2000002c 	.word	0x2000002c
 8001964:	000186a0 	.word	0x000186a0
 8001968:	40005800 	.word	0x40005800

0800196c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_MspInit+0x34>)
 8001970:	2100      	movs	r1, #0
 8001972:	9100      	str	r1, [sp, #0]
 8001974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
 800197c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800197e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001982:	9200      	str	r2, [sp, #0]
 8001984:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	9101      	str	r1, [sp, #4]
 8001988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	b002      	add	sp, #8
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b510      	push	{r4, lr}
 80019a6:	4604      	mov	r4, r0
 80019a8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	2214      	movs	r2, #20
 80019ac:	2100      	movs	r1, #0
 80019ae:	a803      	add	r0, sp, #12
 80019b0:	f000 f994 	bl	8001cdc <memset>
  if(hadc->Instance==ADC1)
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_ADC_MspInit+0x5c>)
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d11e      	bne.n	80019fa <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019bc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80019c0:	2100      	movs	r1, #0
 80019c2:	9101      	str	r1, [sp, #4]
 80019c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = BATERRY_VOLTAGE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(BATERRY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80019c6:	480f      	ldr	r0, [pc, #60]	; (8001a04 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019cc:	645a      	str	r2, [r3, #68]	; 0x44
 80019ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019d0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80019d4:	9201      	str	r2, [sp, #4]
 80019d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	9102      	str	r1, [sp, #8]
 80019da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019dc:	f042 0201 	orr.w	r2, r2, #1
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BATERRY_VOLTAGE_Pin;
 80019ec:	2301      	movs	r3, #1
 80019ee:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BATERRY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80019f0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f2:	2303      	movs	r3, #3
 80019f4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BATERRY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f7ff f915 	bl	8000c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019fa:	b008      	add	sp, #32
 80019fc:	bd10      	pop	{r4, pc}
 80019fe:	bf00      	nop
 8001a00:	40012000 	.word	0x40012000
 8001a04:	40020000 	.word	0x40020000

08001a08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a08:	b570      	push	{r4, r5, r6, lr}
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0e:	2214      	movs	r2, #20
 8001a10:	2100      	movs	r1, #0
 8001a12:	a803      	add	r0, sp, #12
 8001a14:	f000 f962 	bl	8001cdc <memset>
  if(hcan->Instance==CAN1)
 8001a18:	6822      	ldr	r2, [r4, #0]
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_CAN_MspInit+0x9c>)
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d13e      	bne.n	8001a9e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a20:	2400      	movs	r4, #0
 8001a22:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001a26:	9401      	str	r4, [sp, #4]
 8001a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = CAN1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(CAN1_RX_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	481f      	ldr	r0, [pc, #124]	; (8001aa8 <HAL_CAN_MspInit+0xa0>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a2c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
 8001a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a34:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001a38:	9201      	str	r2, [sp, #4]
 8001a3a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3c:	9402      	str	r4, [sp, #8]
 8001a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a40:	f042 0202 	orr.w	r2, r2, #2
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CAN1_RX_Pin;
 8001a50:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = CAN1_RX_Pin;
 8001a56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a58:	2609      	movs	r6, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN1_RX_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a62:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(CAN1_RX_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f7ff f8de 	bl	8000c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN1_TX_Pin;
 8001a68:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(CAN1_TX_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	a903      	add	r1, sp, #12
 8001a6e:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <HAL_CAN_MspInit+0xa0>)
    GPIO_InitStruct.Pin = CAN1_TX_Pin;
 8001a70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a76:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a78:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(CAN1_TX_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f7ff f8d3 	bl	8000c24 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001a7e:	4622      	mov	r2, r4
 8001a80:	4621      	mov	r1, r4
 8001a82:	2014      	movs	r0, #20
 8001a84:	f7ff f876 	bl	8000b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a88:	2014      	movs	r0, #20
 8001a8a:	f7ff f8a7 	bl	8000bdc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001a8e:	2015      	movs	r0, #21
 8001a90:	4622      	mov	r2, r4
 8001a92:	4621      	mov	r1, r4
 8001a94:	f7ff f86e 	bl	8000b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001a98:	2015      	movs	r0, #21
 8001a9a:	f7ff f89f 	bl	8000bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a9e:	b008      	add	sp, #32
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40006400 	.word	0x40006400
 8001aa8:	40020400 	.word	0x40020400

08001aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aac:	b530      	push	{r4, r5, lr}
 8001aae:	4604      	mov	r4, r0
 8001ab0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	2214      	movs	r2, #20
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	a803      	add	r0, sp, #12
 8001ab8:	f000 f910 	bl	8001cdc <memset>
  if(hi2c->Instance==I2C2)
 8001abc:	6822      	ldr	r2, [r4, #0]
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_I2C_MspInit+0x68>)
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d124      	bne.n	8001b0e <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac4:	4c14      	ldr	r4, [pc, #80]	; (8001b18 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	4815      	ldr	r0, [pc, #84]	; (8001b1c <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	2500      	movs	r5, #0
 8001aca:	9501      	str	r5, [sp, #4]
 8001acc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8001ad4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001ade:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001ae2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae4:	2312      	movs	r3, #18
 8001ae6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001af2:	2304      	movs	r3, #4
 8001af4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f7ff f895 	bl	8000c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001afa:	9502      	str	r5, [sp, #8]
 8001afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b02:	6423      	str	r3, [r4, #64]	; 0x40
 8001b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b0e:	b009      	add	sp, #36	; 0x24
 8001b10:	bd30      	pop	{r4, r5, pc}
 8001b12:	bf00      	nop
 8001b14:	40005800 	.word	0x40005800
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020400 	.word	0x40020400

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	2214      	movs	r2, #20
{
 8001b24:	b08a      	sub	sp, #40	; 0x28
 8001b26:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	2100      	movs	r1, #0
 8001b2a:	eb0d 0002 	add.w	r0, sp, r2
 8001b2e:	f000 f8d5 	bl	8001cdc <memset>
  if(huart->Instance==USART1)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <HAL_UART_MspInit+0xa0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d126      	bne.n	8001b88 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_UART_MspInit+0xa4>)
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	9101      	str	r1, [sp, #4]
 8001b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b42:	f042 0210 	orr.w	r2, r2, #16
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
 8001b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b4a:	f002 0210 	and.w	r2, r2, #16
 8001b4e:	9201      	str	r2, [sp, #4]
 8001b50:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	9102      	str	r1, [sp, #8]
 8001b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001b66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b7a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	4812      	ldr	r0, [pc, #72]	; (8001bc8 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b7e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f7ff f850 	bl	8000c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b84:	b00a      	add	sp, #40	; 0x28
 8001b86:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8001b88:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <HAL_UART_MspInit+0xac>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d1fa      	bne.n	8001b84 <HAL_UART_MspInit+0x64>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_UART_MspInit+0xa4>)
 8001b90:	2100      	movs	r1, #0
 8001b92:	9103      	str	r1, [sp, #12]
 8001b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ba2:	9203      	str	r2, [sp, #12]
 8001ba4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	9104      	str	r1, [sp, #16]
 8001ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	9304      	str	r3, [sp, #16]
 8001bb8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001bba:	230c      	movs	r3, #12
 8001bbc:	e7d5      	b.n	8001b6a <HAL_UART_MspInit+0x4a>
 8001bbe:	bf00      	nop
 8001bc0:	40011000 	.word	0x40011000
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <NMI_Handler>:
 8001bd0:	4770      	bx	lr

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler>

08001bda <SVC_Handler>:
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:
 8001bdc:	4770      	bx	lr

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	4770      	bx	lr

08001be0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be0:	f7fe bcd6 	b.w	8000590 <HAL_IncTick>

08001be4 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001be4:	4801      	ldr	r0, [pc, #4]	; (8001bec <CAN1_RX1_IRQHandler+0x8>)
 8001be6:	f7fe beb5 	b.w	8000954 <HAL_CAN_IRQHandler>
 8001bea:	bf00      	nop
 8001bec:	20000148 	.word	0x20000148

08001bf0 <CAN1_RX0_IRQHandler>:
 8001bf0:	f7ff bff8 	b.w	8001be4 <CAN1_RX1_IRQHandler>

08001bf4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	490f      	ldr	r1, [pc, #60]	; (8001c34 <SystemInit+0x40>)
 8001bf6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001bfa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <SystemInit+0x44>)
 8001c04:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c06:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001c08:	f042 0201 	orr.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001c0e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001c16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <SystemInit+0x48>)
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c26:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c28:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c2e:	608b      	str	r3, [r1, #8]
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	24003010 	.word	0x24003010

08001c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c46:	e003      	b.n	8001c50 <LoopCopyDataInit>

08001c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c4e:	3104      	adds	r1, #4

08001c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c58:	d3f6      	bcc.n	8001c48 <CopyDataInit>
  ldr  r2, =_sbss
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c5c:	e002      	b.n	8001c64 <LoopFillZerobss>

08001c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c60:	f842 3b04 	str.w	r3, [r2], #4

08001c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c68:	d3f9      	bcc.n	8001c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c6a:	f7ff ffc3 	bl	8001bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f000 f811 	bl	8001c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff fd89 	bl	8001788 <main>
  bx  lr    
 8001c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c7c:	08001d2c 	.word	0x08001d2c
  ldr  r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c84:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001c88:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001c8c:	20000170 	.word	0x20000170

08001c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC_IRQHandler>
	...

08001c94 <__libc_init_array>:
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	4e0d      	ldr	r6, [pc, #52]	; (8001ccc <__libc_init_array+0x38>)
 8001c98:	4c0d      	ldr	r4, [pc, #52]	; (8001cd0 <__libc_init_array+0x3c>)
 8001c9a:	1ba4      	subs	r4, r4, r6
 8001c9c:	10a4      	asrs	r4, r4, #2
 8001c9e:	2500      	movs	r5, #0
 8001ca0:	42a5      	cmp	r5, r4
 8001ca2:	d109      	bne.n	8001cb8 <__libc_init_array+0x24>
 8001ca4:	4e0b      	ldr	r6, [pc, #44]	; (8001cd4 <__libc_init_array+0x40>)
 8001ca6:	4c0c      	ldr	r4, [pc, #48]	; (8001cd8 <__libc_init_array+0x44>)
 8001ca8:	f000 f820 	bl	8001cec <_init>
 8001cac:	1ba4      	subs	r4, r4, r6
 8001cae:	10a4      	asrs	r4, r4, #2
 8001cb0:	2500      	movs	r5, #0
 8001cb2:	42a5      	cmp	r5, r4
 8001cb4:	d105      	bne.n	8001cc2 <__libc_init_array+0x2e>
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
 8001cb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cbc:	4798      	blx	r3
 8001cbe:	3501      	adds	r5, #1
 8001cc0:	e7ee      	b.n	8001ca0 <__libc_init_array+0xc>
 8001cc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cc6:	4798      	blx	r3
 8001cc8:	3501      	adds	r5, #1
 8001cca:	e7f2      	b.n	8001cb2 <__libc_init_array+0x1e>
 8001ccc:	08001d24 	.word	0x08001d24
 8001cd0:	08001d24 	.word	0x08001d24
 8001cd4:	08001d24 	.word	0x08001d24
 8001cd8:	08001d28 	.word	0x08001d28

08001cdc <memset>:
 8001cdc:	4402      	add	r2, r0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <memset+0xa>
 8001ce4:	4770      	bx	lr
 8001ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8001cea:	e7f9      	b.n	8001ce0 <memset+0x4>

08001cec <_init>:
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cee:	bf00      	nop
 8001cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cf2:	bc08      	pop	{r3}
 8001cf4:	469e      	mov	lr, r3
 8001cf6:	4770      	bx	lr

08001cf8 <_fini>:
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	bf00      	nop
 8001cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfe:	bc08      	pop	{r3}
 8001d00:	469e      	mov	lr, r3
 8001d02:	4770      	bx	lr
