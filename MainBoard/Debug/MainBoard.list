
MainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800300c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ca4  2000000c  08003018  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000cb0  08003018  00020cb0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a50c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003702  00000000  00000000  0004a548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000090c9  00000000  00000000  0004dc4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e30  00000000  00000000  00056d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000da0  00000000  00000000  00057b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007e45  00000000  00000000  000588e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004b58  00000000  00000000  0006072d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00065285  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000024e8  00000000  00000000  00065304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f80 	.word	0x08002f80

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002f80 	.word	0x08002f80

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */
#include "CANlibF4.h"


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000514:	b508      	push	{r3, lr}

	 HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0  , &CAN_RxHeader, CAN_RxMsg);
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800051a:	2100      	movs	r1, #0
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800051e:	f001 f837 	bl	8001590 <HAL_CAN_GetRxMessage>
	 COM_RunCanAction();
 8000522:	f000 f9b3 	bl	800088c <COM_RunCanAction>
	 GPIO_LEDToggle(LED_STATUS);
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fa4a 	bl	80009c0 <GPIO_LEDToggle>
	 GPIO_LEDToggle(LED_ERROR);
 800052c:	2002      	movs	r0, #2
 800052e:	f000 fa47 	bl	80009c0 <GPIO_LEDToggle>
 8000532:	bd08      	pop	{r3, pc}
 8000534:	20000b70 	.word	0x20000b70
 8000538:	200009e4 	.word	0x200009e4
 800053c:	20000bd0 	.word	0x20000bd0

08000540 <HAL_CAN_RxFifo1MsgPendingCallback>:
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000540:	b508      	push	{r3, lr}

	 HAL_CAN_GetRxMessage(&hcan1,  CAN_RX_FIFO1, &CAN_RxHeader, CAN_RxMsg);
 8000542:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>)
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_CAN_RxFifo1MsgPendingCallback+0x14>)
 8000546:	2101      	movs	r1, #1
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <HAL_CAN_RxFifo1MsgPendingCallback+0x18>)
 800054a:	f001 f821 	bl	8001590 <HAL_CAN_GetRxMessage>
 800054e:	bd08      	pop	{r3, pc}
 8000550:	20000b70 	.word	0x20000b70
 8000554:	200009e4 	.word	0x200009e4
 8000558:	20000bd0 	.word	0x20000bd0

0800055c <CAN_Init>:
	//GPIO_LEDWrite(LED_ERROR);
}

void CAN_Init()
{
 800055c:	b510      	push	{r4, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28


	  CAN_FilterTypeDef  sFilterConfig;

	  hcan1.Instance = CAN1;
 8000560:	4832      	ldr	r0, [pc, #200]	; (800062c <CAN_Init+0xd0>)
 8000562:	4b33      	ldr	r3, [pc, #204]	; (8000630 <CAN_Init+0xd4>)
 8000564:	6003      	str	r3, [r0, #0]
	  hcan1.Init.Prescaler = 5;
 8000566:	2305      	movs	r3, #5
 8000568:	6043      	str	r3, [r0, #4]
	  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800056a:	2300      	movs	r3, #0
 800056c:	6083      	str	r3, [r0, #8]
	  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800056e:	60c3      	str	r3, [r0, #12]
	  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000570:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000574:	6102      	str	r2, [r0, #16]
	  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000576:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800057a:	6142      	str	r2, [r0, #20]
	  hcan1.Init.TimeTriggeredMode = DISABLE;
 800057c:	7603      	strb	r3, [r0, #24]
	  hcan1.Init.AutoBusOff = DISABLE;
 800057e:	7643      	strb	r3, [r0, #25]
	  hcan1.Init.AutoWakeUp = DISABLE;
 8000580:	7683      	strb	r3, [r0, #26]
	  hcan1.Init.AutoRetransmission =DISABLE;
 8000582:	76c3      	strb	r3, [r0, #27]
	  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000584:	7703      	strb	r3, [r0, #28]
	  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000586:	7743      	strb	r3, [r0, #29]
	  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000588:	f000 fe1c 	bl	80011c4 <HAL_CAN_Init>
 800058c:	2800      	cmp	r0, #0
 800058e:	d133      	bne.n	80005f8 <CAN_Init+0x9c>
	  {
	    _Error_Handler(__FILE__, __LINE__);
	  }

	  sFilterConfig.FilterBank = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	9305      	str	r3, [sp, #20]
	    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000594:	9306      	str	r3, [sp, #24]
	    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000596:	9307      	str	r3, [sp, #28]
	    sFilterConfig.FilterIdHigh = 0x0000;
 8000598:	9300      	str	r3, [sp, #0]
	    sFilterConfig.FilterIdLow = 0x0000;
 800059a:	9301      	str	r3, [sp, #4]
	    sFilterConfig.FilterMaskIdHigh = 0x0000;
 800059c:	9302      	str	r3, [sp, #8]
	    sFilterConfig.FilterMaskIdLow = 0x0000;
 800059e:	9303      	str	r3, [sp, #12]
	    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005a0:	9304      	str	r3, [sp, #16]
	    sFilterConfig.FilterActivation = ENABLE;
 80005a2:	2201      	movs	r2, #1
 80005a4:	9208      	str	r2, [sp, #32]
	    sFilterConfig.SlaveStartFilterBank = 0;
 80005a6:	9309      	str	r3, [sp, #36]	; 0x24

	    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005a8:	4669      	mov	r1, sp
 80005aa:	4820      	ldr	r0, [pc, #128]	; (800062c <CAN_Init+0xd0>)
 80005ac:	f000 feb0 	bl	8001310 <HAL_CAN_ConfigFilter>
 80005b0:	bb38      	cbnz	r0, 8000602 <CAN_Init+0xa6>
	      /* Filter configuration Error */
	      Error_Handler();
	    }


	  HAL_CAN_Start(&hcan1);
 80005b2:	4c1e      	ldr	r4, [pc, #120]	; (800062c <CAN_Init+0xd0>)
 80005b4:	4620      	mov	r0, r4
 80005b6:	f000 ff43 	bl	8001440 <HAL_CAN_Start>


	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK)
 80005ba:	2102      	movs	r1, #2
 80005bc:	4620      	mov	r0, r4
 80005be:	f001 f886 	bl	80016ce <HAL_CAN_ActivateNotification>
 80005c2:	bb18      	cbnz	r0, 800060c <CAN_Init+0xb0>
	  {
		  Error_Handler();
	  }
	  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!=HAL_OK)
 80005c4:	2110      	movs	r1, #16
 80005c6:	4819      	ldr	r0, [pc, #100]	; (800062c <CAN_Init+0xd0>)
 80005c8:	f001 f881 	bl	80016ce <HAL_CAN_ActivateNotification>
 80005cc:	bb18      	cbnz	r0, 8000616 <CAN_Init+0xba>
		  }
	 /* HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL);
	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_FULL);*/


	  dane[0]=15;
 80005ce:	4a19      	ldr	r2, [pc, #100]	; (8000634 <CAN_Init+0xd8>)
 80005d0:	230f      	movs	r3, #15
 80005d2:	7013      	strb	r3, [r2, #0]
	  dane[1]=14;
 80005d4:	230e      	movs	r3, #14
 80005d6:	7053      	strb	r3, [r2, #1]
	   canmsg.StdId=50;
 80005d8:	4917      	ldr	r1, [pc, #92]	; (8000638 <CAN_Init+0xdc>)
 80005da:	2332      	movs	r3, #50	; 0x32
 80005dc:	600b      	str	r3, [r1, #0]
	   canmsg.ExtId=50;
 80005de:	604b      	str	r3, [r1, #4]
	   canmsg.IDE=CAN_ID_STD;
 80005e0:	2300      	movs	r3, #0
 80005e2:	608b      	str	r3, [r1, #8]
	   canmsg.RTR=CAN_RTR_DATA;
 80005e4:	60cb      	str	r3, [r1, #12]
	   canmsg.DLC=2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	610b      	str	r3, [r1, #16]
	   if (HAL_CAN_AddTxMessage(&hcan1, &canmsg, dane, &txmailbox)!=HAL_OK)
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <CAN_Init+0xe0>)
 80005ec:	480f      	ldr	r0, [pc, #60]	; (800062c <CAN_Init+0xd0>)
 80005ee:	f000 ff55 	bl	800149c <HAL_CAN_AddTxMessage>
 80005f2:	b9a8      	cbnz	r0, 8000620 <CAN_Init+0xc4>
	   {
		   Error_Handler();
	   }

}
 80005f4:	b00a      	add	sp, #40	; 0x28
 80005f6:	bd10      	pop	{r4, pc}
	    _Error_Handler(__FILE__, __LINE__);
 80005f8:	212e      	movs	r1, #46	; 0x2e
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <CAN_Init+0xe4>)
 80005fc:	f000 fc3e 	bl	8000e7c <_Error_Handler>
 8000600:	e7c6      	b.n	8000590 <CAN_Init+0x34>
	      Error_Handler();
 8000602:	213f      	movs	r1, #63	; 0x3f
 8000604:	480e      	ldr	r0, [pc, #56]	; (8000640 <CAN_Init+0xe4>)
 8000606:	f000 fc39 	bl	8000e7c <_Error_Handler>
 800060a:	e7d2      	b.n	80005b2 <CAN_Init+0x56>
		  Error_Handler();
 800060c:	2148      	movs	r1, #72	; 0x48
 800060e:	480c      	ldr	r0, [pc, #48]	; (8000640 <CAN_Init+0xe4>)
 8000610:	f000 fc34 	bl	8000e7c <_Error_Handler>
 8000614:	e7d6      	b.n	80005c4 <CAN_Init+0x68>
			  Error_Handler();
 8000616:	214c      	movs	r1, #76	; 0x4c
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <CAN_Init+0xe4>)
 800061a:	f000 fc2f 	bl	8000e7c <_Error_Handler>
 800061e:	e7d6      	b.n	80005ce <CAN_Init+0x72>
		   Error_Handler();
 8000620:	215b      	movs	r1, #91	; 0x5b
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <CAN_Init+0xe4>)
 8000624:	f000 fc2a 	bl	8000e7c <_Error_Handler>
}
 8000628:	e7e4      	b.n	80005f4 <CAN_Init+0x98>
 800062a:	bf00      	nop
 800062c:	20000bd0 	.word	0x20000bd0
 8000630:	40006400 	.word	0x40006400
 8000634:	200000bc 	.word	0x200000bc
 8000638:	20000bb8 	.word	0x20000bb8
 800063c:	200000d0 	.word	0x200000d0
 8000640:	08002f98 	.word	0x08002f98

08000644 <HAL_CAN_MspInit>:
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8000644:	6802      	ldr	r2, [r0, #0]
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <HAL_CAN_MspInit+0x7c>)
 8000648:	429a      	cmp	r2, r3
 800064a:	d000      	beq.n	800064e <HAL_CAN_MspInit+0xa>
 800064c:	4770      	bx	lr
{
 800064e:	b510      	push	{r4, lr}
 8000650:	b088      	sub	sp, #32
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000652:	2400      	movs	r4, #0
 8000654:	9401      	str	r4, [sp, #4]
 8000656:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800065a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800065c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000660:	641a      	str	r2, [r3, #64]	; 0x40
 8000662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000664:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000668:	9201      	str	r2, [sp, #4]
 800066a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	9402      	str	r4, [sp, #8]
 800066e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000670:	f042 0202 	orr.w	r2, r2, #2
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	f003 0302 	and.w	r3, r3, #2
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	9b02      	ldr	r3, [sp, #8]

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000680:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000684:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000690:	2309      	movs	r3, #9
 8000692:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	a903      	add	r1, sp, #12
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <HAL_CAN_MspInit+0x80>)
 8000698:	f001 fbb0 	bl	8001dfc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800069c:	4622      	mov	r2, r4
 800069e:	4621      	mov	r1, r4
 80006a0:	2014      	movs	r0, #20
 80006a2:	f001 f973 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006a6:	2014      	movs	r0, #20
 80006a8:	f001 f9a2 	bl	80019f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006ac:	4622      	mov	r2, r4
 80006ae:	4621      	mov	r1, r4
 80006b0:	2015      	movs	r0, #21
 80006b2:	f001 f96b 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006b6:	2015      	movs	r0, #21
 80006b8:	f001 f99a 	bl	80019f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006bc:	b008      	add	sp, #32
 80006be:	bd10      	pop	{r4, pc}
 80006c0:	40006400 	.word	0x40006400
 80006c4:	40020400 	.word	0x40020400

080006c8 <ignoreCAN>:
	CAN_TxHeader.RTR=CAN_RTR_DATA;
	CAN_TxHeader.DLC=UART_MessageRecieved.lenght;
	HAL_CAN_AddTxMessage(&hcan1,&CAN_TxHeader,UART_MessageRecieved.data,&CAN_TxMailbox);
}
void ignoreCAN()
{
 80006c8:	4770      	bx	lr

080006ca <ignoreUART>:
	return;
}
void ignoreUART()
{
 80006ca:	4770      	bx	lr

080006cc <SendSpeed>:
{
 80006cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	speedprawa=	-1*UART_MessageRecieved.data[0] -UART_MessageRecieved.data[1];
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <SendSpeed+0x58>)
 80006d2:	7893      	ldrb	r3, [r2, #2]
 80006d4:	425b      	negs	r3, r3
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	78d1      	ldrb	r1, [r2, #3]
 80006da:	1a5b      	subs	r3, r3, r1
	speedlewa= UART_MessageRecieved.data[1]-UART_MessageRecieved.data[0];
 80006dc:	78d5      	ldrb	r5, [r2, #3]
 80006de:	b2ed      	uxtb	r5, r5
 80006e0:	7897      	ldrb	r7, [r2, #2]
 80006e2:	b2ff      	uxtb	r7, r7
	CAN_TxHeader.StdId=102;
 80006e4:	4c10      	ldr	r4, [pc, #64]	; (8000728 <SendSpeed+0x5c>)
 80006e6:	2266      	movs	r2, #102	; 0x66
 80006e8:	6022      	str	r2, [r4, #0]
	CAN_TxHeader.ExtId=102;
 80006ea:	6062      	str	r2, [r4, #4]
	CAN_TxHeader.DLC=1;
 80006ec:	2201      	movs	r2, #1
 80006ee:	6122      	str	r2, [r4, #16]
	CAN_TxData[0]=speedprawa;
 80006f0:	4e0e      	ldr	r6, [pc, #56]	; (800072c <SendSpeed+0x60>)
 80006f2:	7033      	strb	r3, [r6, #0]
	HAL_CAN_AddTxMessage(&hcan1,&CAN_TxHeader,CAN_TxData,&CAN_TxMailbox);
 80006f4:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8000730 <SendSpeed+0x64>
 80006f8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8000734 <SendSpeed+0x68>
 80006fc:	464b      	mov	r3, r9
 80006fe:	4632      	mov	r2, r6
 8000700:	4621      	mov	r1, r4
 8000702:	4640      	mov	r0, r8
 8000704:	f000 feca 	bl	800149c <HAL_CAN_AddTxMessage>
	CAN_TxHeader.StdId=103;
 8000708:	2367      	movs	r3, #103	; 0x67
 800070a:	6023      	str	r3, [r4, #0]
	CAN_TxHeader.ExtId=103;
 800070c:	6063      	str	r3, [r4, #4]
	CAN_TxData[0]=speedlewa;
 800070e:	1bed      	subs	r5, r5, r7
 8000710:	7035      	strb	r5, [r6, #0]
	HAL_CAN_AddTxMessage(&hcan1,&CAN_TxHeader,CAN_TxData,&CAN_TxMailbox);
 8000712:	464b      	mov	r3, r9
 8000714:	4632      	mov	r2, r6
 8000716:	4621      	mov	r1, r4
 8000718:	4640      	mov	r0, r8
 800071a:	f000 febf 	bl	800149c <HAL_CAN_AddTxMessage>
 800071e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000722:	bf00      	nop
 8000724:	200000c4 	.word	0x200000c4
 8000728:	200000a0 	.word	0x200000a0
 800072c:	20000a3c 	.word	0x20000a3c
 8000730:	200000b8 	.word	0x200000b8
 8000734:	20000bd0 	.word	0x20000bd0

08000738 <transferToCan>:
{
 8000738:	b508      	push	{r3, lr}
	CAN_TxHeader.StdId=UART_MessageRecieved.ID;
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <transferToCan+0x24>)
 800073c:	7813      	ldrb	r3, [r2, #0]
 800073e:	4908      	ldr	r1, [pc, #32]	; (8000760 <transferToCan+0x28>)
 8000740:	600b      	str	r3, [r1, #0]
	CAN_TxHeader.ExtId=UART_MessageRecieved.ID;
 8000742:	7813      	ldrb	r3, [r2, #0]
 8000744:	604b      	str	r3, [r1, #4]
	CAN_TxHeader.IDE=CAN_ID_STD;
 8000746:	2300      	movs	r3, #0
 8000748:	608b      	str	r3, [r1, #8]
	CAN_TxHeader.RTR=CAN_RTR_DATA;
 800074a:	60cb      	str	r3, [r1, #12]
	CAN_TxHeader.DLC=UART_MessageRecieved.lenght;
 800074c:	7853      	ldrb	r3, [r2, #1]
 800074e:	610b      	str	r3, [r1, #16]
	HAL_CAN_AddTxMessage(&hcan1,&CAN_TxHeader,UART_MessageRecieved.data,&CAN_TxMailbox);
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <transferToCan+0x2c>)
 8000752:	3202      	adds	r2, #2
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <transferToCan+0x30>)
 8000756:	f000 fea1 	bl	800149c <HAL_CAN_AddTxMessage>
 800075a:	bd08      	pop	{r3, pc}
 800075c:	200000c4 	.word	0x200000c4
 8000760:	200000a0 	.word	0x200000a0
 8000764:	200000b8 	.word	0x200000b8
 8000768:	20000bd0 	.word	0x20000bd0

0800076c <transferToUart>:
{
 800076c:	b500      	push	{lr}
 800076e:	b085      	sub	sp, #20
	msg.ID=CAN_RxHeader.StdId;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <transferToUart+0x3c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f88d 3004 	strb.w	r3, [sp, #4]
	for (int i=0;i<8;i++)
 8000778:	2300      	movs	r3, #0
 800077a:	e006      	b.n	800078a <transferToUart+0x1e>
		msg.data[i]= CAN_RxMsg[i];
 800077c:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <transferToUart+0x40>)
 800077e:	5cd1      	ldrb	r1, [r2, r3]
 8000780:	aa04      	add	r2, sp, #16
 8000782:	441a      	add	r2, r3
 8000784:	f802 1c0a 	strb.w	r1, [r2, #-10]
	for (int i=0;i<8;i++)
 8000788:	3301      	adds	r3, #1
 800078a:	2b07      	cmp	r3, #7
 800078c:	ddf6      	ble.n	800077c <transferToUart+0x10>
	msg.lenght=CAN_RxHeader.DLC;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <transferToUart+0x3c>)
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	f88d 3005 	strb.w	r3, [sp, #5]
	UART2_Send(msg);
 8000796:	ab04      	add	r3, sp, #16
 8000798:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800079c:	f000 f9ba 	bl	8000b14 <UART2_Send>
}
 80007a0:	b005      	add	sp, #20
 80007a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80007a6:	bf00      	nop
 80007a8:	200009e4 	.word	0x200009e4
 80007ac:	20000b70 	.word	0x20000b70

080007b0 <COM_LoadCommandList>:
void COM_LoadCommandList(void) {
 80007b0:	b410      	push	{r4}
	commandList[i].ID = 100;
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <COM_LoadCommandList+0x84>)
 80007b4:	2264      	movs	r2, #100	; 0x64
 80007b6:	701a      	strb	r2, [r3, #0]
	commandList[i].length = 2;
 80007b8:	2202      	movs	r2, #2
 80007ba:	705a      	strb	r2, [r3, #1]
	commandList[i].reciveCanAction = ignoreCAN;
 80007bc:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <COM_LoadCommandList+0x88>)
 80007be:	609a      	str	r2, [r3, #8]
	commandList[i].reciveUartAction = SendSpeed;
 80007c0:	491e      	ldr	r1, [pc, #120]	; (800083c <COM_LoadCommandList+0x8c>)
 80007c2:	6059      	str	r1, [r3, #4]
	commandList[i].ID = 101;
 80007c4:	2165      	movs	r1, #101	; 0x65
 80007c6:	7319      	strb	r1, [r3, #12]
	commandList[i].length = 1;
 80007c8:	2101      	movs	r1, #1
 80007ca:	7359      	strb	r1, [r3, #13]
	commandList[i].reciveCanAction = ignoreCAN;
 80007cc:	615a      	str	r2, [r3, #20]
	commandList[i].reciveUartAction = transferToCan;
 80007ce:	481c      	ldr	r0, [pc, #112]	; (8000840 <COM_LoadCommandList+0x90>)
 80007d0:	6118      	str	r0, [r3, #16]
	commandList[i].ID = 102;
 80007d2:	2466      	movs	r4, #102	; 0x66
 80007d4:	761c      	strb	r4, [r3, #24]
	commandList[i].length = 1;
 80007d6:	7659      	strb	r1, [r3, #25]
	commandList[i].reciveCanAction = ignoreCAN;
 80007d8:	621a      	str	r2, [r3, #32]
	commandList[i].reciveUartAction = transferToCan;
 80007da:	61d8      	str	r0, [r3, #28]
	commandList[i].ID = 103;
 80007dc:	2067      	movs	r0, #103	; 0x67
 80007de:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	commandList[i].length = 1;
 80007e2:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
	commandList[i].reciveCanAction = ignoreCAN;
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
	commandList[i].reciveUartAction = ignoreUART;
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <COM_LoadCommandList+0x94>)
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
	commandList[i].ID = 104;
 80007ec:	2168      	movs	r1, #104	; 0x68
 80007ee:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	commandList[i].length = 6;
 80007f2:	2006      	movs	r0, #6
 80007f4:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
	commandList[i].reciveCanAction = transferToUart;
 80007f8:	4913      	ldr	r1, [pc, #76]	; (8000848 <COM_LoadCommandList+0x98>)
 80007fa:	6399      	str	r1, [r3, #56]	; 0x38
	commandList[i].reciveUartAction = ignoreUART;
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
	commandList[i].ID = 105;
 80007fe:	2469      	movs	r4, #105	; 0x69
 8000800:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
	commandList[i].length = 6;
 8000804:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
	commandList[i].reciveCanAction = transferToUart;
 8000808:	6459      	str	r1, [r3, #68]	; 0x44
	commandList[i].reciveUartAction = ignoreUART;
 800080a:	641a      	str	r2, [r3, #64]	; 0x40
	commandList[i].ID = 106;
 800080c:	246a      	movs	r4, #106	; 0x6a
 800080e:	f883 4048 	strb.w	r4, [r3, #72]	; 0x48
	commandList[i].length = 6;
 8000812:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
	commandList[i].reciveCanAction = transferToUart;
 8000816:	6519      	str	r1, [r3, #80]	; 0x50
	commandList[i].reciveUartAction = ignoreUART;
 8000818:	64da      	str	r2, [r3, #76]	; 0x4c
	commandList[i].ID = 107;
 800081a:	246b      	movs	r4, #107	; 0x6b
 800081c:	f883 4054 	strb.w	r4, [r3, #84]	; 0x54
	commandList[i].length = 6;
 8000820:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
	commandList[i].reciveCanAction = transferToUart;
 8000824:	65d9      	str	r1, [r3, #92]	; 0x5c
	commandList[i].reciveUartAction = ignoreUART;
 8000826:	659a      	str	r2, [r3, #88]	; 0x58
	CommandListLenght=i;
 8000828:	2208      	movs	r2, #8
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <COM_LoadCommandList+0x9c>)
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	200002dc 	.word	0x200002dc
 8000838:	080006c9 	.word	0x080006c9
 800083c:	080006cd 	.word	0x080006cd
 8000840:	08000739 	.word	0x08000739
 8000844:	080006cb 	.word	0x080006cb
 8000848:	0800076d 	.word	0x0800076d
 800084c:	20000bf8 	.word	0x20000bf8

08000850 <COM_RunUartAction>:
{
 8000850:	b508      	push	{r3, lr}
	for (int i = 0; i < 150; i++) {
 8000852:	2300      	movs	r3, #0
 8000854:	2b95      	cmp	r3, #149	; 0x95
 8000856:	dc13      	bgt.n	8000880 <COM_RunUartAction+0x30>
			if (commandList[i].ID == UART_MessageRecieved.ID) {
 8000858:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800085c:	008a      	lsls	r2, r1, #2
 800085e:	4909      	ldr	r1, [pc, #36]	; (8000884 <COM_RunUartAction+0x34>)
 8000860:	5c89      	ldrb	r1, [r1, r2]
 8000862:	4a09      	ldr	r2, [pc, #36]	; (8000888 <COM_RunUartAction+0x38>)
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	4291      	cmp	r1, r2
 800086a:	d001      	beq.n	8000870 <COM_RunUartAction+0x20>
	for (int i = 0; i < 150; i++) {
 800086c:	3301      	adds	r3, #1
 800086e:	e7f1      	b.n	8000854 <COM_RunUartAction+0x4>
				commandList[i].reciveUartAction();
 8000870:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000874:	009a      	lsls	r2, r3, #2
 8000876:	4b03      	ldr	r3, [pc, #12]	; (8000884 <COM_RunUartAction+0x34>)
 8000878:	4413      	add	r3, r2
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4798      	blx	r3
				return;
 800087e:	bd08      	pop	{r3, pc}
 8000880:	bd08      	pop	{r3, pc}
 8000882:	bf00      	nop
 8000884:	200002dc 	.word	0x200002dc
 8000888:	200000c4 	.word	0x200000c4

0800088c <COM_RunCanAction>:
{
 800088c:	b508      	push	{r3, lr}
	for (int i=0;i<CommandListLenght;i++)
 800088e:	2300      	movs	r3, #0
 8000890:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <COM_RunCanAction+0x34>)
 8000892:	7812      	ldrb	r2, [r2, #0]
 8000894:	4293      	cmp	r3, r2
 8000896:	da12      	bge.n	80008be <COM_RunCanAction+0x32>
		if (commandList[i].ID == CAN_RxHeader.StdId)
 8000898:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800089c:	008a      	lsls	r2, r1, #2
 800089e:	4909      	ldr	r1, [pc, #36]	; (80008c4 <COM_RunCanAction+0x38>)
 80008a0:	5c89      	ldrb	r1, [r1, r2]
 80008a2:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <COM_RunCanAction+0x3c>)
 80008a4:	6812      	ldr	r2, [r2, #0]
 80008a6:	4291      	cmp	r1, r2
 80008a8:	d001      	beq.n	80008ae <COM_RunCanAction+0x22>
	for (int i=0;i<CommandListLenght;i++)
 80008aa:	3301      	adds	r3, #1
 80008ac:	e7f0      	b.n	8000890 <COM_RunCanAction+0x4>
			commandList[i].reciveCanAction();
 80008ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80008b2:	009a      	lsls	r2, r3, #2
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <COM_RunCanAction+0x38>)
 80008b6:	4413      	add	r3, r2
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	4798      	blx	r3
			return;
 80008bc:	bd08      	pop	{r3, pc}
 80008be:	bd08      	pop	{r3, pc}
 80008c0:	20000bf8 	.word	0x20000bf8
 80008c4:	200002dc 	.word	0x200002dc
 80008c8:	200009e4 	.word	0x200009e4

080008cc <GPIO_BuzzFun>:
float nuty[50][2];
void Nuty_Init();
uint8_t music=0;

void GPIO_BuzzFun()
{
 80008cc:	4770      	bx	lr
	...

080008d0 <HAL_TIM_PeriodElapsedCallback>:
	nuty[5][0]=0.25;
	nuty[5][1]=629.25;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d0:	b508      	push	{r3, lr}
	if (music==0)
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b12b      	cbz	r3, 80008e4 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
	}
	else 	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80008d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008de:	f001 fb75 	bl	8001fcc <HAL_GPIO_TogglePin>
 80008e2:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008ec:	f001 fb68 	bl	8001fc0 <HAL_GPIO_WritePin>
 80008f0:	bd08      	pop	{r3, pc}
 80008f2:	bf00      	nop
 80008f4:	20000028 	.word	0x20000028
 80008f8:	40020800 	.word	0x40020800

080008fc <GPIO_LEDInit>:
}
void GPIO_LEDInit(void)
{
 80008fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fe:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	2400      	movs	r4, #0
 8000902:	9401      	str	r4, [sp, #4]
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <GPIO_LEDInit+0x78>)
 8000906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000908:	f042 0201 	orr.w	r2, r2, #1
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
 800090e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000910:	f002 0201 	and.w	r2, r2, #1
 8000914:	9201      	str	r2, [sp, #4]
 8000916:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	9402      	str	r4, [sp, #8]
 800091a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800091c:	f042 0202 	orr.w	r2, r2, #2
 8000920:	631a      	str	r2, [r3, #48]	; 0x30
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	9302      	str	r3, [sp, #8]
 800092a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800092c:	4f12      	ldr	r7, [pc, #72]	; (8000978 <GPIO_LEDInit+0x7c>)
 800092e:	4622      	mov	r2, r4
 8000930:	2120      	movs	r1, #32
 8000932:	4638      	mov	r0, r7
 8000934:	f001 fb44 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000938:	4d10      	ldr	r5, [pc, #64]	; (800097c <GPIO_LEDInit+0x80>)
 800093a:	4622      	mov	r2, r4
 800093c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000940:	4628      	mov	r0, r5
 8000942:	f001 fb3d 	bl	8001fc0 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000946:	2320      	movs	r3, #32
 8000948:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2601      	movs	r6, #1
 800094c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	a903      	add	r1, sp, #12
 8000954:	4638      	mov	r0, r7
 8000956:	f001 fa51 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800095a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800095e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	a903      	add	r1, sp, #12
 8000968:	4628      	mov	r0, r5
 800096a:	f001 fa47 	bl	8001dfc <HAL_GPIO_Init>

}
 800096e:	b009      	add	sp, #36	; 0x24
 8000970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020400 	.word	0x40020400

08000980 <GPIO_LEDWrite>:
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}
void GPIO_LEDWrite(LED_TypeDef led, GPIO_PinState state)
{
 8000980:	b508      	push	{r3, lr}
	switch (led)
 8000982:	2802      	cmp	r0, #2
 8000984:	d00b      	beq.n	800099e <GPIO_LEDWrite+0x1e>
 8000986:	2803      	cmp	r0, #3
 8000988:	d010      	beq.n	80009ac <GPIO_LEDWrite+0x2c>
 800098a:	2801      	cmp	r0, #1
 800098c:	d000      	beq.n	8000990 <GPIO_LEDWrite+0x10>
 800098e:	bd08      	pop	{r3, pc}
	{
	case LED_STATUS:
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, state);
 8000990:	460a      	mov	r2, r1
 8000992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000996:	4808      	ldr	r0, [pc, #32]	; (80009b8 <GPIO_LEDWrite+0x38>)
 8000998:	f001 fb12 	bl	8001fc0 <HAL_GPIO_WritePin>
		break;
 800099c:	bd08      	pop	{r3, pc}
	case LED_ERROR:
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, state);
 800099e:	460a      	mov	r2, r1
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <GPIO_LEDWrite+0x38>)
 80009a6:	f001 fb0b 	bl	8001fc0 <HAL_GPIO_WritePin>
		break;
 80009aa:	bd08      	pop	{r3, pc}
	case LED_NUCLEO:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
 80009ac:	460a      	mov	r2, r1
 80009ae:	2120      	movs	r1, #32
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <GPIO_LEDWrite+0x3c>)
 80009b2:	f001 fb05 	bl	8001fc0 <HAL_GPIO_WritePin>
		break;
	}
}
 80009b6:	e7ea      	b.n	800098e <GPIO_LEDWrite+0xe>
 80009b8:	40020400 	.word	0x40020400
 80009bc:	40020000 	.word	0x40020000

080009c0 <GPIO_LEDToggle>:

void GPIO_LEDToggle(LED_TypeDef led)
{
 80009c0:	b508      	push	{r3, lr}
	switch (led)
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d00a      	beq.n	80009dc <GPIO_LEDToggle+0x1c>
 80009c6:	2803      	cmp	r0, #3
 80009c8:	d00e      	beq.n	80009e8 <GPIO_LEDToggle+0x28>
 80009ca:	2801      	cmp	r0, #1
 80009cc:	d000      	beq.n	80009d0 <GPIO_LEDToggle+0x10>
 80009ce:	bd08      	pop	{r3, pc}
	{
	case LED_STATUS:
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80009d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <GPIO_LEDToggle+0x34>)
 80009d6:	f001 faf9 	bl	8001fcc <HAL_GPIO_TogglePin>
		break;
 80009da:	bd08      	pop	{r3, pc}
	case LED_ERROR:
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80009dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <GPIO_LEDToggle+0x34>)
 80009e2:	f001 faf3 	bl	8001fcc <HAL_GPIO_TogglePin>
		break;
 80009e6:	bd08      	pop	{r3, pc}
	case LED_NUCLEO:
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009e8:	2120      	movs	r1, #32
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <GPIO_LEDToggle+0x38>)
 80009ec:	f001 faee 	bl	8001fcc <HAL_GPIO_TogglePin>
		break;
	}
}
 80009f0:	e7ed      	b.n	80009ce <GPIO_LEDToggle+0xe>
 80009f2:	bf00      	nop
 80009f4:	40020400 	.word	0x40020400
 80009f8:	40020000 	.word	0x40020000

080009fc <UART1_Init>:
  //HAL_UART_Receive_DMA(&huart2, UART_ReceivedRaw, 19);

}

void UART1_Init(void)
{
 80009fc:	b508      	push	{r3, lr}

	  huart1.Instance = USART1;
 80009fe:	4810      	ldr	r0, [pc, #64]	; (8000a40 <UART1_Init+0x44>)
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <UART1_Init+0x48>)
 8000a02:	6003      	str	r3, [r0, #0]
	  huart1.Init.BaudRate = 9600;
 8000a04:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a08:	6043      	str	r3, [r0, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	6083      	str	r3, [r0, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0e:	60c3      	str	r3, [r0, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8000a10:	6103      	str	r3, [r0, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a12:	220c      	movs	r2, #12
 8000a14:	6142      	str	r2, [r0, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	6183      	str	r3, [r0, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	61c3      	str	r3, [r0, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1a:	f002 f8f7 	bl	8002c0c <HAL_UART_Init>
 8000a1e:	b950      	cbnz	r0, 8000a36 <UART1_Init+0x3a>
	  {
	    _Error_Handler(__FILE__, __LINE__);
	  }
	  //HAL_UART_Receive_IT(&huart1,GPS_Odbior,120);
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <UART1_Init+0x44>)
 8000a22:	6802      	ldr	r2, [r0, #0]
 8000a24:	68d3      	ldr	r3, [r2, #12]
 8000a26:	f043 0320 	orr.w	r3, r3, #32
 8000a2a:	60d3      	str	r3, [r2, #12]
	    HAL_UART_Receive_IT(&huart1, UART_ReceivedRaw, 19);
 8000a2c:	2213      	movs	r2, #19
 8000a2e:	4906      	ldr	r1, [pc, #24]	; (8000a48 <UART1_Init+0x4c>)
 8000a30:	f002 f93f 	bl	8002cb2 <HAL_UART_Receive_IT>
 8000a34:	bd08      	pop	{r3, pc}
	    _Error_Handler(__FILE__, __LINE__);
 8000a36:	214a      	movs	r1, #74	; 0x4a
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <UART1_Init+0x50>)
 8000a3a:	f000 fa1f 	bl	8000e7c <_Error_Handler>
 8000a3e:	e7ef      	b.n	8000a20 <UART1_Init+0x24>
 8000a40:	2000023c 	.word	0x2000023c
 8000a44:	40011000 	.word	0x40011000
 8000a48:	20000c74 	.word	0x20000c74
 8000a4c:	08002fb0 	.word	0x08002fb0

08000a50 <UART_TransmitFoo>:
		}
	}*/

}
void UART_TransmitFoo()
{
 8000a50:	b538      	push	{r3, r4, r5, lr}
	if (((Tx_IndexSend!=MAILBOX_SIZE-1) && UART_TxMailbox[Tx_IndexSend+1].filled!=0) || ((Tx_IndexSend==MAILBOX_SIZE-1) && UART_TxMailbox[0].filled!=0))
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <UART_TransmitFoo+0x5c>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b0e      	cmp	r3, #14
 8000a58:	d007      	beq.n	8000a6a <UART_TransmitFoo+0x1a>
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000a60:	0091      	lsls	r1, r2, #2
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <UART_TransmitFoo+0x60>)
 8000a64:	440a      	add	r2, r1
 8000a66:	7cd2      	ldrb	r2, [r2, #19]
 8000a68:	b922      	cbnz	r2, 8000a74 <UART_TransmitFoo+0x24>
 8000a6a:	2b0e      	cmp	r3, #14
 8000a6c:	d119      	bne.n	8000aa2 <UART_TransmitFoo+0x52>
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <UART_TransmitFoo+0x60>)
 8000a70:	7cd2      	ldrb	r2, [r2, #19]
 8000a72:	b1b2      	cbz	r2, 8000aa2 <UART_TransmitFoo+0x52>
		{
			if (Tx_IndexSend==MAILBOX_SIZE-1) Tx_IndexSend=0;
 8000a74:	2b0e      	cmp	r3, #14
 8000a76:	d015      	beq.n	8000aa4 <UART_TransmitFoo+0x54>
			else Tx_IndexSend++;
 8000a78:	3301      	adds	r3, #1
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <UART_TransmitFoo+0x5c>)
 8000a7c:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart1,UART_TxMailbox[Tx_IndexSend].sendBuffor,19);
 8000a7e:	4d0b      	ldr	r5, [pc, #44]	; (8000aac <UART_TransmitFoo+0x5c>)
 8000a80:	782b      	ldrb	r3, [r5, #0]
 8000a82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a86:	0099      	lsls	r1, r3, #2
 8000a88:	4c09      	ldr	r4, [pc, #36]	; (8000ab0 <UART_TransmitFoo+0x60>)
 8000a8a:	2213      	movs	r2, #19
 8000a8c:	4421      	add	r1, r4
 8000a8e:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <UART_TransmitFoo+0x64>)
 8000a90:	f002 f8eb 	bl	8002c6a <HAL_UART_Transmit_IT>
			UART_TxMailbox[Tx_IndexSend].filled=0;
 8000a94:	782b      	ldrb	r3, [r5, #0]
 8000a96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a9a:	009a      	lsls	r2, r3, #2
 8000a9c:	4414      	add	r4, r2
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	74e3      	strb	r3, [r4, #19]
 8000aa2:	bd38      	pop	{r3, r4, r5, pc}
			if (Tx_IndexSend==MAILBOX_SIZE-1) Tx_IndexSend=0;
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4b01      	ldr	r3, [pc, #4]	; (8000aac <UART_TransmitFoo+0x5c>)
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e7e8      	b.n	8000a7e <UART_TransmitFoo+0x2e>
 8000aac:	20000029 	.word	0x20000029
 8000ab0:	20000a44 	.word	0x20000a44
 8000ab4:	2000023c 	.word	0x2000023c

08000ab8 <HAL_UART_TxCpltCallback>:
	}

}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ab8:	b508      	push	{r3, lr}

	if (huart->Instance==USART1)
 8000aba:	6802      	ldr	r2, [r0, #0]
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_UART_TxCpltCallback+0x14>)
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d000      	beq.n	8000ac4 <HAL_UART_TxCpltCallback+0xc>
 8000ac2:	bd08      	pop	{r3, pc}
	{
		UART_TransmitFoo();
 8000ac4:	f7ff ffc4 	bl	8000a50 <UART_TransmitFoo>
	}

}
 8000ac8:	e7fb      	b.n	8000ac2 <HAL_UART_TxCpltCallback+0xa>
 8000aca:	bf00      	nop
 8000acc:	40011000 	.word	0x40011000

08000ad0 <UART_Encode>:

/*lenght odnosi sie do dlugosci rawdata*/
void UART_Encode(uint8_t rawdata[], uint8_t encodeddata[], uint8_t lenght)
{
 8000ad0:	b470      	push	{r4, r5, r6}
	uint8_t temp1, temp2;
	for (int i=0;i<lenght;i++)
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	e008      	b.n	8000ae8 <UART_Encode+0x18>
		temp2 = (temp1 % 0x10);
		temp1 -= temp2;
		if (temp2 <10)
			encodeddata[2*i+1] = temp2+48;
		else
			encodeddata[2*i +1] = temp2+55;
 8000ad6:	0066      	lsls	r6, r4, #1
 8000ad8:	3601      	adds	r6, #1
 8000ada:	3537      	adds	r5, #55	; 0x37
 8000adc:	558d      	strb	r5, [r1, r6]
 8000ade:	e010      	b.n	8000b02 <UART_Encode+0x32>

		temp2=temp1/0x10;
		if (temp2 <10)
			encodeddata[2*i] = temp2+48;
		else
			encodeddata[2*i] = temp2+55;
 8000ae0:	3337      	adds	r3, #55	; 0x37
 8000ae2:	f801 3014 	strb.w	r3, [r1, r4, lsl #1]
	for (int i=0;i<lenght;i++)
 8000ae6:	3401      	adds	r4, #1
 8000ae8:	4294      	cmp	r4, r2
 8000aea:	da11      	bge.n	8000b10 <UART_Encode+0x40>
		temp1 = rawdata[i];
 8000aec:	5d03      	ldrb	r3, [r0, r4]
		temp2 = (temp1 % 0x10);
 8000aee:	f003 050f 	and.w	r5, r3, #15
		temp1 -= temp2;
 8000af2:	1b5b      	subs	r3, r3, r5
 8000af4:	b2db      	uxtb	r3, r3
		if (temp2 <10)
 8000af6:	2d09      	cmp	r5, #9
 8000af8:	d8ed      	bhi.n	8000ad6 <UART_Encode+0x6>
			encodeddata[2*i+1] = temp2+48;
 8000afa:	0066      	lsls	r6, r4, #1
 8000afc:	3601      	adds	r6, #1
 8000afe:	3530      	adds	r5, #48	; 0x30
 8000b00:	558d      	strb	r5, [r1, r6]
		temp2=temp1/0x10;
 8000b02:	091b      	lsrs	r3, r3, #4
		if (temp2 <10)
 8000b04:	2b09      	cmp	r3, #9
 8000b06:	d8eb      	bhi.n	8000ae0 <UART_Encode+0x10>
			encodeddata[2*i] = temp2+48;
 8000b08:	3330      	adds	r3, #48	; 0x30
 8000b0a:	f801 3014 	strb.w	r3, [r1, r4, lsl #1]
 8000b0e:	e7ea      	b.n	8000ae6 <UART_Encode+0x16>


	}
}
 8000b10:	bc70      	pop	{r4, r5, r6}
 8000b12:	4770      	bx	lr

08000b14 <UART2_Send>:
{
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	ab04      	add	r3, sp, #16
 8000b1a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (msg.lenght>ROZMIAR_RAMKI) return Mailbox_ERROR;		/*sory, max 8 znakow*/
 8000b1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	d868      	bhi.n	8000bf8 <UART2_Send+0xe4>
	if ((Tx_IndexWrite!=MAILBOX_SIZE-1 && UART_TxMailbox[Tx_IndexWrite+1].filled!=0) || (Tx_IndexWrite==MAILBOX_SIZE-1 && UART_TxMailbox[0].filled!=0)) return Mailbox_FULL;
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <UART2_Send+0xec>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b0e      	cmp	r3, #14
 8000b2c:	d009      	beq.n	8000b42 <UART2_Send+0x2e>
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000b34:	0091      	lsls	r1, r2, #2
 8000b36:	4a33      	ldr	r2, [pc, #204]	; (8000c04 <UART2_Send+0xf0>)
 8000b38:	440a      	add	r2, r1
 8000b3a:	7cd2      	ldrb	r2, [r2, #19]
 8000b3c:	b10a      	cbz	r2, 8000b42 <UART2_Send+0x2e>
 8000b3e:	2002      	movs	r0, #2
 8000b40:	e05b      	b.n	8000bfa <UART2_Send+0xe6>
 8000b42:	2b0e      	cmp	r3, #14
 8000b44:	d020      	beq.n	8000b88 <UART2_Send+0x74>
	if (Tx_IndexWrite==MAILBOX_SIZE-1) Tx_IndexWrite=0;
 8000b46:	2b0e      	cmp	r3, #14
 8000b48:	d024      	beq.n	8000b94 <UART2_Send+0x80>
	else Tx_IndexWrite++;
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a2c      	ldr	r2, [pc, #176]	; (8000c00 <UART2_Send+0xec>)
 8000b4e:	7013      	strb	r3, [r2, #0]
	int i = Tx_IndexWrite; 		//zeby bylo latwiej
 8000b50:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <UART2_Send+0xec>)
 8000b52:	781c      	ldrb	r4, [r3, #0]
	UART_TxMailbox[i].sendBuffor[0] = '#';
 8000b54:	492b      	ldr	r1, [pc, #172]	; (8000c04 <UART2_Send+0xf0>)
 8000b56:	00a3      	lsls	r3, r4, #2
 8000b58:	4423      	add	r3, r4
 8000b5a:	009a      	lsls	r2, r3, #2
 8000b5c:	188e      	adds	r6, r1, r2
 8000b5e:	2323      	movs	r3, #35	; 0x23
 8000b60:	548b      	strb	r3, [r1, r2]
	UART_Encode(&msg.ID, temp,1);
 8000b62:	4d29      	ldr	r5, [pc, #164]	; (8000c08 <UART2_Send+0xf4>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	4629      	mov	r1, r5
 8000b68:	a801      	add	r0, sp, #4
 8000b6a:	f7ff ffb1 	bl	8000ad0 <UART_Encode>
	UART_TxMailbox[i].sendBuffor[1] = temp[0];
 8000b6e:	782b      	ldrb	r3, [r5, #0]
 8000b70:	7073      	strb	r3, [r6, #1]
	UART_TxMailbox[i].sendBuffor[2] = temp[1];
 8000b72:	786b      	ldrb	r3, [r5, #1]
 8000b74:	70b3      	strb	r3, [r6, #2]
	UART_Encode(msg.data, temp, msg.lenght);
 8000b76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	f10d 0006 	add.w	r0, sp, #6
 8000b80:	f7ff ffa6 	bl	8000ad0 <UART_Encode>
	for (int j=3;j<2*msg.lenght+3;j++)
 8000b84:	2203      	movs	r2, #3
 8000b86:	e013      	b.n	8000bb0 <UART2_Send+0x9c>
	if ((Tx_IndexWrite!=MAILBOX_SIZE-1 && UART_TxMailbox[Tx_IndexWrite+1].filled!=0) || (Tx_IndexWrite==MAILBOX_SIZE-1 && UART_TxMailbox[0].filled!=0)) return Mailbox_FULL;
 8000b88:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <UART2_Send+0xf0>)
 8000b8a:	7cd2      	ldrb	r2, [r2, #19]
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d0da      	beq.n	8000b46 <UART2_Send+0x32>
 8000b90:	2002      	movs	r0, #2
 8000b92:	e032      	b.n	8000bfa <UART2_Send+0xe6>
	if (Tx_IndexWrite==MAILBOX_SIZE-1) Tx_IndexWrite=0;
 8000b94:	2200      	movs	r2, #0
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <UART2_Send+0xec>)
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e7d9      	b.n	8000b50 <UART2_Send+0x3c>
		UART_TxMailbox[i].sendBuffor[j] = temp[j-3];
 8000b9c:	1ed3      	subs	r3, r2, #3
 8000b9e:	491a      	ldr	r1, [pc, #104]	; (8000c08 <UART2_Send+0xf4>)
 8000ba0:	5cc8      	ldrb	r0, [r1, r3]
 8000ba2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000ba6:	0099      	lsls	r1, r3, #2
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <UART2_Send+0xf0>)
 8000baa:	440b      	add	r3, r1
 8000bac:	5498      	strb	r0, [r3, r2]
	for (int j=3;j<2*msg.lenght+3;j++)
 8000bae:	3201      	adds	r2, #1
 8000bb0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	3303      	adds	r3, #3
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbef      	blt.n	8000b9c <UART2_Send+0x88>
 8000bbc:	e007      	b.n	8000bce <UART2_Send+0xba>
		UART_TxMailbox[i].sendBuffor[j] = (uint8_t) 'x';
 8000bbe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000bc2:	0091      	lsls	r1, r2, #2
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <UART2_Send+0xf0>)
 8000bc6:	440a      	add	r2, r1
 8000bc8:	2178      	movs	r1, #120	; 0x78
 8000bca:	54d1      	strb	r1, [r2, r3]
	for (int j=2*msg.lenght+3; j<2*ROZMIAR_RAMKI+3;j++)
 8000bcc:	3301      	adds	r3, #1
 8000bce:	2b12      	cmp	r3, #18
 8000bd0:	ddf5      	ble.n	8000bbe <UART2_Send+0xaa>
	UART_TxMailbox[i].filled=~0;
 8000bd2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000bd6:	00a2      	lsls	r2, r4, #2
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <UART2_Send+0xf0>)
 8000bda:	4413      	add	r3, r2
 8000bdc:	22ff      	movs	r2, #255	; 0xff
 8000bde:	74da      	strb	r2, [r3, #19]
	if (huart1.gState== HAL_UART_STATE_READY)	UART_TransmitFoo();
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <UART2_Send+0xf8>)
 8000be2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b20      	cmp	r3, #32
 8000bea:	d001      	beq.n	8000bf0 <UART2_Send+0xdc>
	return Mailbox_OK;
 8000bec:	2000      	movs	r0, #0
 8000bee:	e004      	b.n	8000bfa <UART2_Send+0xe6>
	if (huart1.gState== HAL_UART_STATE_READY)	UART_TransmitFoo();
 8000bf0:	f7ff ff2e 	bl	8000a50 <UART_TransmitFoo>
	return Mailbox_OK;
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	e000      	b.n	8000bfa <UART2_Send+0xe6>
	if (msg.lenght>ROZMIAR_RAMKI) return Mailbox_ERROR;		/*sory, max 8 znakow*/
 8000bf8:	2001      	movs	r0, #1
}
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd70      	pop	{r4, r5, r6, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000002a 	.word	0x2000002a
 8000c04:	20000a44 	.word	0x20000a44
 8000c08:	20000030 	.word	0x20000030
 8000c0c:	2000023c 	.word	0x2000023c

08000c10 <UART_Decode>:
void UART_Decode()
{
	/*Test czy pierwszy jest # by sie przydal*/
	kurdeweszlo = 2;
 8000c10:	2202      	movs	r2, #2
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <UART_Decode+0xe4>)
 8000c14:	601a      	str	r2, [r3, #0]
	UART_MessageRecieved.ID = 0;
 8000c16:	2200      	movs	r2, #0
 8000c18:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <UART_Decode+0xe8>)
 8000c1a:	701a      	strb	r2, [r3, #0]

	/*Zamiana hex w ACSII na liczbe*/

	if (UART_ReceivedRaw[1]>=65)
 8000c1c:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <UART_Decode+0xec>)
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	2b40      	cmp	r3, #64	; 0x40
 8000c22:	d91a      	bls.n	8000c5a <UART_Decode+0x4a>
		UART_MessageRecieved.ID += (UART_ReceivedRaw[1]-55)*0x10;
 8000c24:	4934      	ldr	r1, [pc, #208]	; (8000cf8 <UART_Decode+0xe8>)
 8000c26:	780a      	ldrb	r2, [r1, #0]
 8000c28:	3b37      	subs	r3, #55	; 0x37
 8000c2a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	700b      	strb	r3, [r1, #0]
	else
		UART_MessageRecieved.ID += (UART_ReceivedRaw[1]-48)*0x10;

	if (UART_ReceivedRaw[2]>=65)
 8000c32:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <UART_Decode+0xec>)
 8000c34:	789a      	ldrb	r2, [r3, #2]
 8000c36:	2a40      	cmp	r2, #64	; 0x40
 8000c38:	d917      	bls.n	8000c6a <UART_Decode+0x5a>
		UART_MessageRecieved.ID += (UART_ReceivedRaw[2]-55);
 8000c3a:	492f      	ldr	r1, [pc, #188]	; (8000cf8 <UART_Decode+0xe8>)
 8000c3c:	780b      	ldrb	r3, [r1, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b37      	subs	r3, #55	; 0x37
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	700b      	strb	r3, [r1, #0]
{
 8000c46:	2200      	movs	r2, #0
 8000c48:	2303      	movs	r3, #3
	else
		UART_MessageRecieved.ID += (UART_ReceivedRaw[2]-48);

	uint8_t i=3;
	uint8_t index=0;
	while (i<19 && UART_ReceivedRaw[i]!=120)			//4 - end of transmission
 8000c4a:	2b12      	cmp	r3, #18
 8000c4c:	d84e      	bhi.n	8000cec <UART_Decode+0xdc>
 8000c4e:	492b      	ldr	r1, [pc, #172]	; (8000cfc <UART_Decode+0xec>)
 8000c50:	5cc9      	ldrb	r1, [r1, r3]
 8000c52:	2978      	cmp	r1, #120	; 0x78
 8000c54:	d04a      	beq.n	8000cec <UART_Decode+0xdc>
{
 8000c56:	b430      	push	{r4, r5}
 8000c58:	e028      	b.n	8000cac <UART_Decode+0x9c>
		UART_MessageRecieved.ID += (UART_ReceivedRaw[1]-48)*0x10;
 8000c5a:	4927      	ldr	r1, [pc, #156]	; (8000cf8 <UART_Decode+0xe8>)
 8000c5c:	780a      	ldrb	r2, [r1, #0]
 8000c5e:	3b30      	subs	r3, #48	; 0x30
 8000c60:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	700b      	strb	r3, [r1, #0]
 8000c68:	e7e3      	b.n	8000c32 <UART_Decode+0x22>
		UART_MessageRecieved.ID += (UART_ReceivedRaw[2]-48);
 8000c6a:	4923      	ldr	r1, [pc, #140]	; (8000cf8 <UART_Decode+0xe8>)
 8000c6c:	780b      	ldrb	r3, [r1, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	3b30      	subs	r3, #48	; 0x30
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	700b      	strb	r3, [r1, #0]
 8000c76:	e7e6      	b.n	8000c46 <UART_Decode+0x36>
	{
		UART_MessageRecieved.data[index]=0;
		if (UART_ReceivedRaw[i]>=65)
			UART_MessageRecieved.data[index] += (UART_ReceivedRaw[i]-55)*0x10;
		else
			UART_MessageRecieved.data[index] += (UART_ReceivedRaw[i]-48)*0x10;
 8000c78:	4d1f      	ldr	r5, [pc, #124]	; (8000cf8 <UART_Decode+0xe8>)
 8000c7a:	4415      	add	r5, r2
 8000c7c:	78a8      	ldrb	r0, [r5, #2]
 8000c7e:	3930      	subs	r1, #48	; 0x30
 8000c80:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8000c84:	b2c9      	uxtb	r1, r1
 8000c86:	70a9      	strb	r1, [r5, #2]
 8000c88:	e01e      	b.n	8000cc8 <UART_Decode+0xb8>
		i++;
		if (UART_ReceivedRaw[i]>=65)
			UART_MessageRecieved.data[index] += (UART_ReceivedRaw[i]-55);
		else
			UART_MessageRecieved.data[index] += (UART_ReceivedRaw[i]-48);
 8000c8a:	491b      	ldr	r1, [pc, #108]	; (8000cf8 <UART_Decode+0xe8>)
 8000c8c:	440c      	add	r4, r1
 8000c8e:	78a1      	ldrb	r1, [r4, #2]
 8000c90:	4401      	add	r1, r0
 8000c92:	3930      	subs	r1, #48	; 0x30
 8000c94:	b2c9      	uxtb	r1, r1
 8000c96:	70a1      	strb	r1, [r4, #2]
		i++;
 8000c98:	3302      	adds	r3, #2
 8000c9a:	b2db      	uxtb	r3, r3
		index++;
 8000c9c:	3201      	adds	r2, #1
 8000c9e:	b2d2      	uxtb	r2, r2
	while (i<19 && UART_ReceivedRaw[i]!=120)			//4 - end of transmission
 8000ca0:	2b12      	cmp	r3, #18
 8000ca2:	d81f      	bhi.n	8000ce4 <UART_Decode+0xd4>
 8000ca4:	4915      	ldr	r1, [pc, #84]	; (8000cfc <UART_Decode+0xec>)
 8000ca6:	5cc9      	ldrb	r1, [r1, r3]
 8000ca8:	2978      	cmp	r1, #120	; 0x78
 8000caa:	d01b      	beq.n	8000ce4 <UART_Decode+0xd4>
		UART_MessageRecieved.data[index]=0;
 8000cac:	4614      	mov	r4, r2
 8000cae:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <UART_Decode+0xe8>)
 8000cb0:	4410      	add	r0, r2
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	7085      	strb	r5, [r0, #2]
		if (UART_ReceivedRaw[i]>=65)
 8000cb6:	2940      	cmp	r1, #64	; 0x40
 8000cb8:	d9de      	bls.n	8000c78 <UART_Decode+0x68>
			UART_MessageRecieved.data[index] += (UART_ReceivedRaw[i]-55)*0x10;
 8000cba:	4605      	mov	r5, r0
 8000cbc:	7880      	ldrb	r0, [r0, #2]
 8000cbe:	3937      	subs	r1, #55	; 0x37
 8000cc0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8000cc4:	b2c9      	uxtb	r1, r1
 8000cc6:	70a9      	strb	r1, [r5, #2]
		i++;
 8000cc8:	1c59      	adds	r1, r3, #1
 8000cca:	b2c9      	uxtb	r1, r1
		if (UART_ReceivedRaw[i]>=65)
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <UART_Decode+0xec>)
 8000cce:	5c40      	ldrb	r0, [r0, r1]
 8000cd0:	2840      	cmp	r0, #64	; 0x40
 8000cd2:	d9da      	bls.n	8000c8a <UART_Decode+0x7a>
			UART_MessageRecieved.data[index] += (UART_ReceivedRaw[i]-55);
 8000cd4:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <UART_Decode+0xe8>)
 8000cd6:	440c      	add	r4, r1
 8000cd8:	78a1      	ldrb	r1, [r4, #2]
 8000cda:	4401      	add	r1, r0
 8000cdc:	3937      	subs	r1, #55	; 0x37
 8000cde:	b2c9      	uxtb	r1, r1
 8000ce0:	70a1      	strb	r1, [r4, #2]
 8000ce2:	e7d9      	b.n	8000c98 <UART_Decode+0x88>
	}
	UART_MessageRecieved.lenght=index;
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <UART_Decode+0xe8>)
 8000ce6:	705a      	strb	r2, [r3, #1]




}
 8000ce8:	bc30      	pop	{r4, r5}
 8000cea:	4770      	bx	lr
	UART_MessageRecieved.lenght=index;
 8000cec:	4b02      	ldr	r3, [pc, #8]	; (8000cf8 <UART_Decode+0xe8>)
 8000cee:	705a      	strb	r2, [r3, #1]
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2000002c 	.word	0x2000002c
 8000cf8:	200000c4 	.word	0x200000c4
 8000cfc:	20000c74 	.word	0x20000c74

08000d00 <HAL_UART_RxCpltCallback>:
{
 8000d00:	b508      	push	{r3, lr}
	if (huart->Instance==USART1)
 8000d02:	6802      	ldr	r2, [r0, #0]
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_UART_RxCpltCallback+0x2c>)
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d000      	beq.n	8000d0c <HAL_UART_RxCpltCallback+0xc>
 8000d0a:	bd08      	pop	{r3, pc}
		kurdeweszlo = 1;
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_UART_RxCpltCallback+0x30>)
 8000d10:	6018      	str	r0, [r3, #0]
		GPIO_LEDWrite(LED_STATUS, GPIO_PIN_SET);
 8000d12:	4601      	mov	r1, r0
 8000d14:	f7ff fe34 	bl	8000980 <GPIO_LEDWrite>
		UART_Decode();
 8000d18:	f7ff ff7a 	bl	8000c10 <UART_Decode>
		COM_RunUartAction();
 8000d1c:	f7ff fd98 	bl	8000850 <COM_RunUartAction>
		HAL_UART_Receive_IT(&huart1, UART_ReceivedRaw, 19);
 8000d20:	2213      	movs	r2, #19
 8000d22:	4904      	ldr	r1, [pc, #16]	; (8000d34 <HAL_UART_RxCpltCallback+0x34>)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <HAL_UART_RxCpltCallback+0x38>)
 8000d26:	f001 ffc4 	bl	8002cb2 <HAL_UART_Receive_IT>
}
 8000d2a:	e7ee      	b.n	8000d0a <HAL_UART_RxCpltCallback+0xa>
 8000d2c:	40011000 	.word	0x40011000
 8000d30:	2000002c 	.word	0x2000002c
 8000d34:	20000c74 	.word	0x20000c74
 8000d38:	2000023c 	.word	0x2000023c

08000d3c <HAL_UART_MspInit>:
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b530      	push	{r4, r5, lr}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8000d42:	6802      	ldr	r2, [r0, #0]
 8000d44:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <HAL_UART_MspInit+0x120>)
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d005      	beq.n	8000d56 <HAL_UART_MspInit+0x1a>
    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);

  }
    if(huart->Instance==USART1)
 8000d4a:	6822      	ldr	r2, [r4, #0]
 8000d4c:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <HAL_UART_MspInit+0x124>)
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d05e      	beq.n	8000e10 <HAL_UART_MspInit+0xd4>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
      /* USER CODE BEGIN USART1_MspInit 1 */

      /* USER CODE END USART1_MspInit 1 */
      }
}
 8000d52:	b009      	add	sp, #36	; 0x24
 8000d54:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d56:	2500      	movs	r5, #0
 8000d58:	9501      	str	r5, [sp, #4]
 8000d5a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d60:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000d64:	641a      	str	r2, [r3, #64]	; 0x40
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d70:	230c      	movs	r3, #12
 8000d72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	a903      	add	r1, sp, #12
 8000d84:	4837      	ldr	r0, [pc, #220]	; (8000e64 <HAL_UART_MspInit+0x128>)
 8000d86:	f001 f839 	bl	8001dfc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d8a:	4837      	ldr	r0, [pc, #220]	; (8000e68 <HAL_UART_MspInit+0x12c>)
 8000d8c:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <HAL_UART_MspInit+0x130>)
 8000d8e:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d94:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d96:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d98:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9e:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da0:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da2:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000da4:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000da6:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da8:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000daa:	f000 febd 	bl	8001b28 <HAL_DMA_Init>
 8000dae:	bb18      	cbnz	r0, 8000df8 <HAL_UART_MspInit+0xbc>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_UART_MspInit+0x12c>)
 8000db2:	6363      	str	r3, [r4, #52]	; 0x34
 8000db4:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000db6:	482e      	ldr	r0, [pc, #184]	; (8000e70 <HAL_UART_MspInit+0x134>)
 8000db8:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <HAL_UART_MspInit+0x138>)
 8000dba:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc0:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc2:	2340      	movs	r3, #64	; 0x40
 8000dc4:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dce:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd0:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd2:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000dd4:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd6:	6203      	str	r3, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd8:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000dda:	f000 fea5 	bl	8001b28 <HAL_DMA_Init>
 8000dde:	b988      	cbnz	r0, 8000e04 <HAL_UART_MspInit+0xc8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <HAL_UART_MspInit+0x134>)
 8000de2:	6323      	str	r3, [r4, #48]	; 0x30
 8000de4:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	4611      	mov	r1, r2
 8000dea:	2026      	movs	r0, #38	; 0x26
 8000dec:	f000 fdce 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df0:	2026      	movs	r0, #38	; 0x26
 8000df2:	f000 fdfd 	bl	80019f0 <HAL_NVIC_EnableIRQ>
 8000df6:	e7a8      	b.n	8000d4a <HAL_UART_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8000df8:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000dfc:	481e      	ldr	r0, [pc, #120]	; (8000e78 <HAL_UART_MspInit+0x13c>)
 8000dfe:	f000 f83d 	bl	8000e7c <_Error_Handler>
 8000e02:	e7d5      	b.n	8000db0 <HAL_UART_MspInit+0x74>
      _Error_Handler(__FILE__, __LINE__);
 8000e04:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000e08:	481b      	ldr	r0, [pc, #108]	; (8000e78 <HAL_UART_MspInit+0x13c>)
 8000e0a:	f000 f837 	bl	8000e7c <_Error_Handler>
 8000e0e:	e7e7      	b.n	8000de0 <HAL_UART_MspInit+0xa4>
        __HAL_RCC_USART1_CLK_ENABLE();
 8000e10:	2400      	movs	r4, #0
 8000e12:	9402      	str	r4, [sp, #8]
 8000e14:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e1a:	f042 0210 	orr.w	r2, r2, #16
 8000e1e:	645a      	str	r2, [r3, #68]	; 0x44
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	9302      	str	r3, [sp, #8]
 8000e28:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e2e:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	9305      	str	r3, [sp, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	9306      	str	r3, [sp, #24]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	a903      	add	r1, sp, #12
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <HAL_UART_MspInit+0x128>)
 8000e44:	f000 ffda 	bl	8001dfc <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e48:	4622      	mov	r2, r4
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	2025      	movs	r0, #37	; 0x25
 8000e4e:	f000 fd9d 	bl	800198c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e52:	2025      	movs	r0, #37	; 0x25
 8000e54:	f000 fdcc 	bl	80019f0 <HAL_NVIC_EnableIRQ>
}
 8000e58:	e77b      	b.n	8000d52 <HAL_UART_MspInit+0x16>
 8000e5a:	bf00      	nop
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40020000 	.word	0x40020000
 8000e68:	20000040 	.word	0x20000040
 8000e6c:	40026088 	.word	0x40026088
 8000e70:	200001dc 	.word	0x200001dc
 8000e74:	400260a0 	.word	0x400260a0
 8000e78:	08002fb0 	.word	0x08002fb0

08000e7c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000e7c:	e7fe      	b.n	8000e7c <_Error_Handler>
	...

08000e80 <SystemClock_Config>:
{
 8000e80:	b500      	push	{lr}
 8000e82:	b095      	sub	sp, #84	; 0x54
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000e84:	2100      	movs	r1, #0
 8000e86:	9100      	str	r1, [sp, #0]
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <SystemClock_Config+0xb4>)
 8000e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	9b00      	ldr	r3, [sp, #0]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e9c:	9101      	str	r1, [sp, #4]
 8000e9e:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <SystemClock_Config+0xb8>)
 8000ea0:	6813      	ldr	r3, [r2, #0]
 8000ea2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	6813      	ldr	r3, [r2, #0]
 8000eae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	9b01      	ldr	r3, [sp, #4]
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	9307      	str	r3, [sp, #28]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ebe:	9308      	str	r3, [sp, #32]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ec8:	920e      	str	r2, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eca:	2204      	movs	r2, #4
 8000ecc:	920f      	str	r2, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 90;
 8000ece:	225a      	movs	r2, #90	; 0x5a
 8000ed0:	9210      	str	r2, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed2:	9311      	str	r3, [sp, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ed4:	9312      	str	r3, [sp, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed6:	9313      	str	r3, [sp, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	a807      	add	r0, sp, #28
 8000eda:	f001 fa0d 	bl	80022f8 <HAL_RCC_OscConfig>
 8000ede:	bb08      	cbnz	r0, 8000f24 <SystemClock_Config+0xa4>
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	9302      	str	r3, [sp, #8]
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	9103      	str	r1, [sp, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9304      	str	r3, [sp, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef0:	9205      	str	r2, [sp, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	9306      	str	r3, [sp, #24]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef4:	a802      	add	r0, sp, #8
 8000ef6:	f001 f86d 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000efa:	b9b8      	cbnz	r0, 8000f2c <SystemClock_Config+0xac>
	  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000efc:	f001 f916 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <SystemClock_Config+0xbc>)
 8000f02:	fba3 3000 	umull	r3, r0, r3, r0
 8000f06:	0980      	lsrs	r0, r0, #6
 8000f08:	f000 fd7e 	bl	8001a08 <HAL_SYSTICK_Config>
	  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f0c:	2004      	movs	r0, #4
 8000f0e:	f000 fd91 	bl	8001a34 <HAL_SYSTICK_CLKSourceConfig>
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	4611      	mov	r1, r2
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	f000 fd37 	bl	800198c <HAL_NVIC_SetPriority>
}
 8000f1e:	b015      	add	sp, #84	; 0x54
 8000f20:	f85d fb04 	ldr.w	pc, [sp], #4
	    _Error_Handler(__FILE__, __LINE__);
 8000f24:	218c      	movs	r1, #140	; 0x8c
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <SystemClock_Config+0xc0>)
 8000f28:	f7ff ffa8 	bl	8000e7c <_Error_Handler>
	    _Error_Handler(__FILE__, __LINE__);
 8000f2c:	219a      	movs	r1, #154	; 0x9a
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <SystemClock_Config+0xc0>)
 8000f30:	f7ff ffa4 	bl	8000e7c <_Error_Handler>
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40007000 	.word	0x40007000
 8000f3c:	10624dd3 	.word	0x10624dd3
 8000f40:	08002fc8 	.word	0x08002fc8

08000f44 <main>:
{
 8000f44:	b508      	push	{r3, lr}
  HAL_Init();
 8000f46:	f000 f911 	bl	800116c <HAL_Init>
  SystemClock_Config();
 8000f4a:	f7ff ff99 	bl	8000e80 <SystemClock_Config>
  GPIO_LEDInit();
 8000f4e:	f7ff fcd5 	bl	80008fc <GPIO_LEDInit>
  UART1_Init();
 8000f52:	f7ff fd53 	bl	80009fc <UART1_Init>
  COM_LoadCommandList();
 8000f56:	f7ff fc2b 	bl	80007b0 <COM_LoadCommandList>
 freq=HAL_RCC_GetPCLK1Freq();
 8000f5a:	f001 f8ed 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8000f5e:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <main+0x24>)
 8000f60:	6018      	str	r0, [r3, #0]
 CAN_Init();
 8000f62:	f7ff fafb 	bl	800055c <CAN_Init>
 8000f66:	e7fe      	b.n	8000f66 <main+0x22>
 8000f68:	20000ca8 	.word	0x20000ca8

08000f6c <HAL_SYSTICK_Callback>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void HAL_SYSTICK_Callback()
{
 8000f6c:	b508      	push	{r3, lr}
	GPIO_BuzzFun();
 8000f6e:	f7ff fcad 	bl	80008cc <GPIO_BuzzFun>
 8000f72:	bd08      	pop	{r3, pc}

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b510      	push	{r4, lr}
 8000f76:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f78:	2400      	movs	r4, #0
 8000f7a:	9400      	str	r4, [sp, #0]
 8000f7c:	4b21      	ldr	r3, [pc, #132]	; (8001004 <HAL_MspInit+0x90>)
 8000f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
 8000f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f88:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f8c:	9200      	str	r2, [sp, #0]
 8000f8e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	9401      	str	r4, [sp, #4]
 8000f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fa4:	2007      	movs	r0, #7
 8000fa6:	f000 fcdf 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000faa:	4622      	mov	r2, r4
 8000fac:	4621      	mov	r1, r4
 8000fae:	f06f 000b 	mvn.w	r0, #11
 8000fb2:	f000 fceb 	bl	800198c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000fb6:	4622      	mov	r2, r4
 8000fb8:	4621      	mov	r1, r4
 8000fba:	f06f 000a 	mvn.w	r0, #10
 8000fbe:	f000 fce5 	bl	800198c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000fc2:	4622      	mov	r2, r4
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	f06f 0009 	mvn.w	r0, #9
 8000fca:	f000 fcdf 	bl	800198c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000fce:	4622      	mov	r2, r4
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	f06f 0004 	mvn.w	r0, #4
 8000fd6:	f000 fcd9 	bl	800198c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000fda:	4622      	mov	r2, r4
 8000fdc:	4621      	mov	r1, r4
 8000fde:	f06f 0003 	mvn.w	r0, #3
 8000fe2:	f000 fcd3 	bl	800198c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000fe6:	4622      	mov	r2, r4
 8000fe8:	4621      	mov	r1, r4
 8000fea:	f06f 0001 	mvn.w	r0, #1
 8000fee:	f000 fccd 	bl	800198c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ff2:	4622      	mov	r2, r4
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffa:	f000 fcc7 	bl	800198c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	b002      	add	sp, #8
 8001000:	bd10      	pop	{r4, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001008:	4770      	bx	lr

0800100a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800100a:	e7fe      	b.n	800100a <HardFault_Handler>

0800100c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800100c:	e7fe      	b.n	800100c <MemManage_Handler>

0800100e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800100e:	e7fe      	b.n	800100e <BusFault_Handler>

08001010 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler>

08001012 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001018:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101a:	f000 f8c1 	bl	80011a0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800101e:	f000 fd19 	bl	8001a54 <HAL_SYSTICK_IRQHandler>
 8001022:	bd08      	pop	{r3, pc}

08001024 <DMA2_Stream0_IRQHandler>:
/**
* @brief This function handles DMA1 stream5 global interrupt.
*/

void DMA2_Stream0_IRQHandler(void)
{
 8001024:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001026:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA2_Stream0_IRQHandler+0xc>)
 8001028:	f000 fdfa 	bl	8001c20 <HAL_DMA_IRQHandler>
 800102c:	bd08      	pop	{r3, pc}
 800102e:	bf00      	nop
 8001030:	2000027c 	.word	0x2000027c

08001034 <DMA1_Stream5_IRQHandler>:

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}

void DMA1_Stream5_IRQHandler(void)
{
 8001034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001036:	4802      	ldr	r0, [pc, #8]	; (8001040 <DMA1_Stream5_IRQHandler+0xc>)
 8001038:	f000 fdf2 	bl	8001c20 <HAL_DMA_IRQHandler>
 800103c:	bd08      	pop	{r3, pc}
 800103e:	bf00      	nop
 8001040:	20000040 	.word	0x20000040

08001044 <DMA2_Stream2_IRQHandler>:

/**
* @brief This function handles DMA1 stream6 global interrupt.
*/
void DMA2_Stream2_IRQHandler(void)
{
 8001044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001046:	4802      	ldr	r0, [pc, #8]	; (8001050 <DMA2_Stream2_IRQHandler+0xc>)
 8001048:	f000 fdea 	bl	8001c20 <HAL_DMA_IRQHandler>
 800104c:	bd08      	pop	{r3, pc}
 800104e:	bf00      	nop
 8001050:	2000017c 	.word	0x2000017c

08001054 <DMA2_Stream7_IRQHandler>:

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}

void DMA2_Stream7_IRQHandler(void)
{
 8001054:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <DMA2_Stream7_IRQHandler+0xc>)
 8001058:	f000 fde2 	bl	8001c20 <HAL_DMA_IRQHandler>
 800105c:	bd08      	pop	{r3, pc}
 800105e:	bf00      	nop
 8001060:	200000d4 	.word	0x200000d4

08001064 <DMA1_Stream6_IRQHandler>:

/**
* @brief This function handles DMA1 stream6 global interrupt.
*/
void DMA1_Stream6_IRQHandler(void)
{
 8001064:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001066:	4802      	ldr	r0, [pc, #8]	; (8001070 <DMA1_Stream6_IRQHandler+0xc>)
 8001068:	f000 fdda 	bl	8001c20 <HAL_DMA_IRQHandler>
 800106c:	bd08      	pop	{r3, pc}
 800106e:	bf00      	nop
 8001070:	200001dc 	.word	0x200001dc

08001074 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8001074:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001076:	4c06      	ldr	r4, [pc, #24]	; (8001090 <USART2_IRQHandler+0x1c>)
 8001078:	4620      	mov	r0, r4
 800107a:	f001 fe9b 	bl	8002db4 <HAL_UART_IRQHandler>
  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE)==SET)
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001086:	d002      	beq.n	800108e <USART2_IRQHandler+0x1a>
  {
	  __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_TXE);
 8001088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	bd10      	pop	{r4, pc}
 8001090:	20000b78 	.word	0x20000b78

08001094 <USART1_IRQHandler>:

  /* USER CODE END USART2_IRQn 1 */
}

void USART1_IRQHandler(void)
{
 8001094:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <USART1_IRQHandler+0xc>)
 8001098:	f001 fe8c 	bl	8002db4 <HAL_UART_IRQHandler>
 800109c:	bd08      	pop	{r3, pc}
 800109e:	bf00      	nop
 80010a0:	2000023c 	.word	0x2000023c

080010a4 <CAN1_RX0_IRQHandler>:
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
void CAN1_RX0_IRQHandler(void)
{
 80010a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <CAN1_RX0_IRQHandler+0xc>)
 80010a8:	f000 fb32 	bl	8001710 <HAL_CAN_IRQHandler>
 80010ac:	bd08      	pop	{r3, pc}
 80010ae:	bf00      	nop
 80010b0:	20000bd0 	.word	0x20000bd0

080010b4 <CAN1_RX1_IRQHandler>:

  /* USER CODE END CAN1_RX0_IRQn 1 */
}

void CAN1_RX1_IRQHandler(void)
{
 80010b4:	b508      	push	{r3, lr}
	HAL_CAN_IRQHandler(&hcan1);
 80010b6:	4802      	ldr	r0, [pc, #8]	; (80010c0 <CAN1_RX1_IRQHandler+0xc>)
 80010b8:	f000 fb2a 	bl	8001710 <HAL_CAN_IRQHandler>
 80010bc:	bd08      	pop	{r3, pc}
 80010be:	bf00      	nop
 80010c0:	20000bd0 	.word	0x20000bd0

080010c4 <TIM6_DAC_IRQHandler>:
}
void TIM6_DAC_IRQHandler(void)
{
 80010c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010c6:	4802      	ldr	r0, [pc, #8]	; (80010d0 <TIM6_DAC_IRQHandler+0xc>)
 80010c8:	f001 fafc 	bl	80026c4 <HAL_TIM_IRQHandler>
 80010cc:	bd08      	pop	{r3, pc}
 80010ce:	bf00      	nop
 80010d0:	20000a00 	.word	0x20000a00

080010d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	490f      	ldr	r1, [pc, #60]	; (8001114 <SystemInit+0x40>)
 80010d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80010da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <SystemInit+0x44>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	f042 0201 	orr.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010ec:	2000      	movs	r0, #0
 80010ee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80010f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <SystemInit+0x48>)
 80010fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001106:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001108:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800110a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800110e:	608b      	str	r3, [r1, #8]
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00
 8001118:	40023800 	.word	0x40023800
 800111c:	24003010 	.word	0x24003010

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b510      	push	{r4, lr}
 8001122:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_InitTick+0x40>)
 8001126:	7818      	ldrb	r0, [r3, #0]
 8001128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_InitTick+0x44>)
 8001132:	6810      	ldr	r0, [r2, #0]
 8001134:	fbb0 f0f3 	udiv	r0, r0, r3
 8001138:	f000 fc66 	bl	8001a08 <HAL_SYSTICK_Config>
 800113c:	b968      	cbnz	r0, 800115a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	2c0f      	cmp	r4, #15
 8001140:	d901      	bls.n	8001146 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8001144:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001146:	2200      	movs	r2, #0
 8001148:	4621      	mov	r1, r4
 800114a:	f04f 30ff 	mov.w	r0, #4294967295
 800114e:	f000 fc1d 	bl	800198c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_InitTick+0x48>)
 8001154:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001156:	2000      	movs	r0, #0
 8001158:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800115a:	2001      	movs	r0, #1
 800115c:	bd10      	pop	{r4, pc}
 800115e:	bf00      	nop
 8001160:	20000004 	.word	0x20000004
 8001164:	20000000 	.word	0x20000000
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_Init>:
{
 800116c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_Init+0x30>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001176:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800117e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001186:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 fbed 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff ffc6 	bl	8001120 <HAL_InitTick>
  HAL_MspInit();
 8001194:	f7ff feee 	bl	8000f74 <HAL_MspInit>
}
 8001198:	2000      	movs	r0, #0
 800119a:	bd08      	pop	{r3, pc}
 800119c:	40023c00 	.word	0x40023c00

080011a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <HAL_IncTick+0x10>)
 80011a2:	6811      	ldr	r1, [r2, #0]
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_IncTick+0x14>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	440b      	add	r3, r1
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000cac 	.word	0x20000cac
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011b8:	4b01      	ldr	r3, [pc, #4]	; (80011c0 <HAL_GetTick+0x8>)
 80011ba:	6818      	ldr	r0, [r3, #0]
}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000cac 	.word	0x20000cac

080011c4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 80011c4:	2800      	cmp	r0, #0
 80011c6:	f000 80a1 	beq.w	800130c <HAL_CAN_Init+0x148>
{
 80011ca:	b538      	push	{r3, r4, r5, lr}
 80011cc:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80011d2:	b1d3      	cbz	r3, 800120a <HAL_CAN_Init+0x46>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011d4:	6822      	ldr	r2, [r4, #0]
 80011d6:	6813      	ldr	r3, [r2, #0]
 80011d8:	f023 0302 	bic.w	r3, r3, #2
 80011dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011de:	f7ff ffeb 	bl	80011b8 <HAL_GetTick>
 80011e2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	f012 0f02 	tst.w	r2, #2
 80011ec:	d010      	beq.n	8001210 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011ee:	f7ff ffe3 	bl	80011b8 <HAL_GetTick>
 80011f2:	1b40      	subs	r0, r0, r5
 80011f4:	280a      	cmp	r0, #10
 80011f6:	d9f5      	bls.n	80011e4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fe:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001200:	2305      	movs	r3, #5
 8001202:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
 8001208:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800120a:	f7ff fa1b 	bl	8000644 <HAL_CAN_MspInit>
 800120e:	e7e1      	b.n	80011d4 <HAL_CAN_Init+0x10>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001218:	f7ff ffce 	bl	80011b8 <HAL_GetTick>
 800121c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	f012 0f01 	tst.w	r2, #1
 8001226:	d10d      	bne.n	8001244 <HAL_CAN_Init+0x80>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001228:	f7ff ffc6 	bl	80011b8 <HAL_GetTick>
 800122c:	1b40      	subs	r0, r0, r5
 800122e:	280a      	cmp	r0, #10
 8001230:	d9f5      	bls.n	800121e <HAL_CAN_Init+0x5a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800123a:	2305      	movs	r3, #5
 800123c:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001240:	2001      	movs	r0, #1
 8001242:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001244:	7e22      	ldrb	r2, [r4, #24]
 8001246:	2a01      	cmp	r2, #1
 8001248:	d03d      	beq.n	80012c6 <HAL_CAN_Init+0x102>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001252:	7e63      	ldrb	r3, [r4, #25]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d03b      	beq.n	80012d0 <HAL_CAN_Init+0x10c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001258:	6822      	ldr	r2, [r4, #0]
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001260:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001262:	7ea3      	ldrb	r3, [r4, #26]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d039      	beq.n	80012dc <HAL_CAN_Init+0x118>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001268:	6822      	ldr	r2, [r4, #0]
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	f023 0320 	bic.w	r3, r3, #32
 8001270:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001272:	7ee3      	ldrb	r3, [r4, #27]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d037      	beq.n	80012e8 <HAL_CAN_Init+0x124>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6013      	str	r3, [r2, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001282:	7f23      	ldrb	r3, [r4, #28]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d035      	beq.n	80012f4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001288:	6822      	ldr	r2, [r4, #0]
 800128a:	6813      	ldr	r3, [r2, #0]
 800128c:	f023 0308 	bic.w	r3, r3, #8
 8001290:	6013      	str	r3, [r2, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001292:	7f63      	ldrb	r3, [r4, #29]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d033      	beq.n	8001300 <HAL_CAN_Init+0x13c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001298:	6822      	ldr	r2, [r4, #0]
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	6013      	str	r3, [r2, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012a2:	6821      	ldr	r1, [r4, #0]
 80012a4:	68a3      	ldr	r3, [r4, #8]
 80012a6:	68e2      	ldr	r2, [r4, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	6922      	ldr	r2, [r4, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	6962      	ldr	r2, [r4, #20]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	6862      	ldr	r2, [r4, #4]
 80012b4:	3a01      	subs	r2, #1
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61cb      	str	r3, [r1, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ba:	2000      	movs	r0, #0
 80012bc:	6260      	str	r0, [r4, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012be:	2301      	movs	r3, #1
 80012c0:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80012c4:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e7c0      	b.n	8001252 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d0:	6822      	ldr	r2, [r4, #0]
 80012d2:	6813      	ldr	r3, [r2, #0]
 80012d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e7c2      	b.n	8001262 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012dc:	6822      	ldr	r2, [r4, #0]
 80012de:	6813      	ldr	r3, [r2, #0]
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e7c4      	b.n	8001272 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012e8:	6822      	ldr	r2, [r4, #0]
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f023 0310 	bic.w	r3, r3, #16
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e7c6      	b.n	8001282 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012f4:	6822      	ldr	r2, [r4, #0]
 80012f6:	6813      	ldr	r3, [r2, #0]
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e7c8      	b.n	8001292 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001300:	6822      	ldr	r2, [r4, #0]
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e7ca      	b.n	80012a2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800130c:	2001      	movs	r0, #1
 800130e:	4770      	bx	lr

08001310 <HAL_CAN_ConfigFilter>:
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos = 0U;
  CAN_TypeDef *can_ip = hcan->Instance;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001310:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d00a      	beq.n	8001330 <HAL_CAN_ConfigFilter+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800131a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800131e:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001320:	2b02      	cmp	r3, #2
 8001322:	d005      	beq.n	8001330 <HAL_CAN_ConfigFilter+0x20>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001324:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001326:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800132c:	2001      	movs	r0, #1
 800132e:	4770      	bx	lr
{
 8001330:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001332:	4b42      	ldr	r3, [pc, #264]	; (800143c <HAL_CAN_ConfigFilter+0x12c>)
 8001334:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001338:	f042 0201 	orr.w	r2, r2, #1
 800133c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001340:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001344:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001348:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800134c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001350:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001352:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001356:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 800135a:	694a      	ldr	r2, [r1, #20]
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001362:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8001366:	43d0      	mvns	r0, r2
 8001368:	4004      	ands	r4, r0
 800136a:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800136e:	69cb      	ldr	r3, [r1, #28]
 8001370:	b9b3      	cbnz	r3, 80013a0 <HAL_CAN_ConfigFilter+0x90>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001372:	4b32      	ldr	r3, [pc, #200]	; (800143c <HAL_CAN_ConfigFilter+0x12c>)
 8001374:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8001378:	4004      	ands	r4, r0
 800137a:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800137e:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001380:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001382:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001384:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001388:	3448      	adds	r4, #72	; 0x48
 800138a:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800138e:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001390:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001392:	880c      	ldrh	r4, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001394:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001398:	3548      	adds	r5, #72	; 0x48
 800139a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800139e:	605c      	str	r4, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013a0:	69cb      	ldr	r3, [r1, #28]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d01d      	beq.n	80013e2 <HAL_CAN_ConfigFilter+0xd2>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013a6:	698b      	ldr	r3, [r1, #24]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d132      	bne.n	8001412 <HAL_CAN_ConfigFilter+0x102>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013ac:	4c23      	ldr	r4, [pc, #140]	; (800143c <HAL_CAN_ConfigFilter+0x12c>)
 80013ae:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80013b2:	4003      	ands	r3, r0
 80013b4:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013b8:	690b      	ldr	r3, [r1, #16]
 80013ba:	bb8b      	cbnz	r3, 8001420 <HAL_CAN_ConfigFilter+0x110>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_CAN_ConfigFilter+0x12c>)
 80013be:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 80013c2:	4020      	ands	r0, r4
 80013c4:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == ENABLE)
 80013c8:	6a0b      	ldr	r3, [r1, #32]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d02f      	beq.n	800142e <HAL_CAN_ConfigFilter+0x11e>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013ce:	4a1b      	ldr	r2, [pc, #108]	; (800143c <HAL_CAN_ConfigFilter+0x12c>)
 80013d0:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 80013dc:	2000      	movs	r0, #0
  }
}
 80013de:	bc70      	pop	{r4, r5, r6}
 80013e0:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_CAN_ConfigFilter+0x12c>)
 80013e4:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 80013e8:	4314      	orrs	r4, r2
 80013ea:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ee:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013f0:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013f2:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013f4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013f8:	3448      	adds	r4, #72	; 0x48
 80013fa:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013fe:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001400:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001402:	898c      	ldrh	r4, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001404:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001408:	3548      	adds	r5, #72	; 0x48
 800140a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800140e:	605c      	str	r4, [r3, #4]
 8001410:	e7c9      	b.n	80013a6 <HAL_CAN_ConfigFilter+0x96>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001412:	4c0a      	ldr	r4, [pc, #40]	; (800143c <HAL_CAN_ConfigFilter+0x12c>)
 8001414:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8001418:	4313      	orrs	r3, r2
 800141a:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 800141e:	e7cb      	b.n	80013b8 <HAL_CAN_ConfigFilter+0xa8>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001420:	4806      	ldr	r0, [pc, #24]	; (800143c <HAL_CAN_ConfigFilter+0x12c>)
 8001422:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001426:	4313      	orrs	r3, r2
 8001428:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 800142c:	e7cc      	b.n	80013c8 <HAL_CAN_ConfigFilter+0xb8>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_CAN_ConfigFilter+0x12c>)
 8001430:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8001434:	430a      	orrs	r2, r1
 8001436:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800143a:	e7c8      	b.n	80013ce <HAL_CAN_ConfigFilter+0xbe>
 800143c:	40006400 	.word	0x40006400

08001440 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001440:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001442:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d005      	beq.n	8001458 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800144c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800144e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001452:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001454:	2001      	movs	r0, #1
  }
}
 8001456:	bd38      	pop	{r3, r4, r5, pc}
 8001458:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 800145a:	2302      	movs	r3, #2
 800145c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001460:	6802      	ldr	r2, [r0, #0]
 8001462:	6813      	ldr	r3, [r2, #0]
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800146a:	f7ff fea5 	bl	80011b8 <HAL_GetTick>
 800146e:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f013 0f01 	tst.w	r3, #1
 8001478:	d00d      	beq.n	8001496 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800147a:	f7ff fe9d 	bl	80011b8 <HAL_GetTick>
 800147e:	1b40      	subs	r0, r0, r5
 8001480:	280a      	cmp	r0, #10
 8001482:	d9f5      	bls.n	8001470 <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148a:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800148c:	2305      	movs	r3, #5
 800148e:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8001492:	2001      	movs	r0, #1
 8001494:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001496:	2000      	movs	r0, #0
 8001498:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 800149a:	bd38      	pop	{r3, r4, r5, pc}

0800149c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800149c:	b470      	push	{r4, r5, r6}
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800149e:	f890 4020 	ldrb.w	r4, [r0, #32]
 80014a2:	b2e4      	uxtb	r4, r4
 80014a4:	2c01      	cmp	r4, #1
 80014a6:	d00b      	beq.n	80014c0 <HAL_CAN_AddTxMessage+0x24>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80014a8:	f890 4020 	ldrb.w	r4, [r0, #32]
 80014ac:	b2e4      	uxtb	r4, r4
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80014ae:	2c02      	cmp	r4, #2
 80014b0:	d006      	beq.n	80014c0 <HAL_CAN_AddTxMessage+0x24>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80014ba:	2001      	movs	r0, #1
  }
}
 80014bc:	bc70      	pop	{r4, r5, r6}
 80014be:	4770      	bx	lr
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 80014c0:	6804      	ldr	r4, [r0, #0]
 80014c2:	68a5      	ldr	r5, [r4, #8]
 80014c4:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
 80014c8:	d107      	bne.n	80014da <HAL_CAN_AddTxMessage+0x3e>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 80014ca:	68a5      	ldr	r5, [r4, #8]
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 80014cc:	f015 6f00 	tst.w	r5, #134217728	; 0x8000000
 80014d0:	d103      	bne.n	80014da <HAL_CAN_AddTxMessage+0x3e>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 80014d2:	68a5      	ldr	r5, [r4, #8]
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 80014d4:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80014d8:	d054      	beq.n	8001584 <HAL_CAN_AddTxMessage+0xe8>
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014da:	68a4      	ldr	r4, [r4, #8]
 80014dc:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = 1U << transmitmailbox;
 80014e0:	2501      	movs	r5, #1
 80014e2:	40a5      	lsls	r5, r4
 80014e4:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80014e6:	688b      	ldr	r3, [r1, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d138      	bne.n	800155e <HAL_CAN_AddTxMessage+0xc2>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014ec:	6805      	ldr	r5, [r0, #0]
 80014ee:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 80014f0:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014f2:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 80014f6:	f104 0318 	add.w	r3, r4, #24
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	50ee      	str	r6, [r5, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014fe:	6803      	ldr	r3, [r0, #0]
 8001500:	690d      	ldr	r5, [r1, #16]
 8001502:	f104 0618 	add.w	r6, r4, #24
 8001506:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800150a:	605d      	str	r5, [r3, #4]
      if (pHeader->TransmitGlobalTime == ENABLE)
 800150c:	7d0b      	ldrb	r3, [r1, #20]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d030      	beq.n	8001574 <HAL_CAN_AddTxMessage+0xd8>
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001512:	6805      	ldr	r5, [r0, #0]
 8001514:	79d1      	ldrb	r1, [r2, #7]
 8001516:	7993      	ldrb	r3, [r2, #6]
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800151e:	7951      	ldrb	r1, [r2, #5]
 8001520:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001524:	7911      	ldrb	r1, [r2, #4]
 8001526:	430b      	orrs	r3, r1
 8001528:	0126      	lsls	r6, r4, #4
 800152a:	4435      	add	r5, r6
 800152c:	f8c5 318c 	str.w	r3, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001530:	6801      	ldr	r1, [r0, #0]
 8001532:	78d5      	ldrb	r5, [r2, #3]
 8001534:	7893      	ldrb	r3, [r2, #2]
 8001536:	041b      	lsls	r3, r3, #16
 8001538:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800153c:	7855      	ldrb	r5, [r2, #1]
 800153e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	4313      	orrs	r3, r2
 8001546:	4431      	add	r1, r6
 8001548:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800154c:	6802      	ldr	r2, [r0, #0]
 800154e:	3418      	adds	r4, #24
 8001550:	0124      	lsls	r4, r4, #4
 8001552:	5913      	ldr	r3, [r2, r4]
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	5113      	str	r3, [r2, r4]
      return HAL_OK;
 800155a:	2000      	movs	r0, #0
 800155c:	e7ae      	b.n	80014bc <HAL_CAN_AddTxMessage+0x20>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800155e:	6805      	ldr	r5, [r0, #0]
 8001560:	684e      	ldr	r6, [r1, #4]
 8001562:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
                                                           pHeader->RTR);
 8001566:	68ce      	ldr	r6, [r1, #12]
                                                           pHeader->IDE |
 8001568:	4333      	orrs	r3, r6
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800156a:	f104 0618 	add.w	r6, r4, #24
 800156e:	0136      	lsls	r6, r6, #4
 8001570:	51ab      	str	r3, [r5, r6]
 8001572:	e7c4      	b.n	80014fe <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001574:	6803      	ldr	r3, [r0, #0]
 8001576:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001580:	6059      	str	r1, [r3, #4]
 8001582:	e7c6      	b.n	8001512 <HAL_CAN_AddTxMessage+0x76>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001584:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158a:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 800158c:	2001      	movs	r0, #1
 800158e:	e795      	b.n	80014bc <HAL_CAN_AddTxMessage+0x20>

08001590 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001590:	b430      	push	{r4, r5}
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8001592:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001596:	b2e4      	uxtb	r4, r4
 8001598:	2c01      	cmp	r4, #1
 800159a:	d00b      	beq.n	80015b4 <HAL_CAN_GetRxMessage+0x24>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800159c:	f890 4020 	ldrb.w	r4, [r0, #32]
 80015a0:	b2e4      	uxtb	r4, r4
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80015a2:	2c02      	cmp	r4, #2
 80015a4:	d006      	beq.n	80015b4 <HAL_CAN_GetRxMessage+0x24>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
  }
}
 80015b0:	bc30      	pop	{r4, r5}
 80015b2:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015b4:	b951      	cbnz	r1, 80015cc <HAL_CAN_GetRxMessage+0x3c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 80015b6:	6804      	ldr	r4, [r0, #0]
 80015b8:	68e4      	ldr	r4, [r4, #12]
 80015ba:	f014 0f03 	tst.w	r4, #3
 80015be:	d107      	bne.n	80015d0 <HAL_CAN_GetRxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c6:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 80015c8:	2001      	movs	r0, #1
 80015ca:	e7f1      	b.n	80015b0 <HAL_CAN_GetRxMessage+0x20>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 80015cc:	2901      	cmp	r1, #1
 80015ce:	d05d      	beq.n	800168c <HAL_CAN_GetRxMessage+0xfc>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015d0:	6805      	ldr	r5, [r0, #0]
 80015d2:	f101 041b 	add.w	r4, r1, #27
 80015d6:	0124      	lsls	r4, r4, #4
 80015d8:	592c      	ldr	r4, [r5, r4]
 80015da:	f004 0404 	and.w	r4, r4, #4
 80015de:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015e0:	2c00      	cmp	r4, #0
 80015e2:	d15e      	bne.n	80016a2 <HAL_CAN_GetRxMessage+0x112>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015e4:	6805      	ldr	r5, [r0, #0]
 80015e6:	f101 041b 	add.w	r4, r1, #27
 80015ea:	0124      	lsls	r4, r4, #4
 80015ec:	592c      	ldr	r4, [r5, r4]
 80015ee:	0d64      	lsrs	r4, r4, #21
 80015f0:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80015f2:	6805      	ldr	r5, [r0, #0]
 80015f4:	f101 041b 	add.w	r4, r1, #27
 80015f8:	0124      	lsls	r4, r4, #4
 80015fa:	592d      	ldr	r5, [r5, r4]
 80015fc:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8001600:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001602:	6805      	ldr	r5, [r0, #0]
 8001604:	4425      	add	r5, r4
 8001606:	686d      	ldr	r5, [r5, #4]
 8001608:	f005 050f 	and.w	r5, r5, #15
 800160c:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800160e:	6805      	ldr	r5, [r0, #0]
 8001610:	4425      	add	r5, r4
 8001612:	686d      	ldr	r5, [r5, #4]
 8001614:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8001618:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800161a:	6805      	ldr	r5, [r0, #0]
 800161c:	442c      	add	r4, r5
 800161e:	6864      	ldr	r4, [r4, #4]
 8001620:	0c24      	lsrs	r4, r4, #16
 8001622:	6154      	str	r4, [r2, #20]
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8001624:	6804      	ldr	r4, [r0, #0]
 8001626:	010a      	lsls	r2, r1, #4
 8001628:	4414      	add	r4, r2
 800162a:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800162e:	701c      	strb	r4, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8001630:	6804      	ldr	r4, [r0, #0]
 8001632:	4414      	add	r4, r2
 8001634:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8001638:	0a24      	lsrs	r4, r4, #8
 800163a:	705c      	strb	r4, [r3, #1]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 800163c:	6804      	ldr	r4, [r0, #0]
 800163e:	4414      	add	r4, r2
 8001640:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8001644:	0c24      	lsrs	r4, r4, #16
 8001646:	709c      	strb	r4, [r3, #2]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 8001648:	6804      	ldr	r4, [r0, #0]
 800164a:	4414      	add	r4, r2
 800164c:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8001650:	0e24      	lsrs	r4, r4, #24
 8001652:	70dc      	strb	r4, [r3, #3]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8001654:	6804      	ldr	r4, [r0, #0]
 8001656:	4414      	add	r4, r2
 8001658:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800165c:	711c      	strb	r4, [r3, #4]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 800165e:	6804      	ldr	r4, [r0, #0]
 8001660:	4414      	add	r4, r2
 8001662:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8001666:	0a24      	lsrs	r4, r4, #8
 8001668:	715c      	strb	r4, [r3, #5]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 800166a:	6804      	ldr	r4, [r0, #0]
 800166c:	4414      	add	r4, r2
 800166e:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8001672:	0c24      	lsrs	r4, r4, #16
 8001674:	719c      	strb	r4, [r3, #6]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8001676:	6804      	ldr	r4, [r0, #0]
 8001678:	4422      	add	r2, r4
 800167a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800167e:	0e12      	lsrs	r2, r2, #24
 8001680:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001682:	b1b1      	cbz	r1, 80016b2 <HAL_CAN_GetRxMessage+0x122>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8001684:	2901      	cmp	r1, #1
 8001686:	d01b      	beq.n	80016c0 <HAL_CAN_GetRxMessage+0x130>
    return HAL_OK;
 8001688:	2000      	movs	r0, #0
 800168a:	e791      	b.n	80015b0 <HAL_CAN_GetRxMessage+0x20>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 800168c:	6804      	ldr	r4, [r0, #0]
 800168e:	6924      	ldr	r4, [r4, #16]
 8001690:	f014 0f03 	tst.w	r4, #3
 8001694:	d19c      	bne.n	80015d0 <HAL_CAN_GetRxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001696:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169c:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800169e:	2001      	movs	r0, #1
 80016a0:	e786      	b.n	80015b0 <HAL_CAN_GetRxMessage+0x20>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016a2:	6805      	ldr	r5, [r0, #0]
 80016a4:	f101 041b 	add.w	r4, r1, #27
 80016a8:	0124      	lsls	r4, r4, #4
 80016aa:	592c      	ldr	r4, [r5, r4]
 80016ac:	08e4      	lsrs	r4, r4, #3
 80016ae:	6054      	str	r4, [r2, #4]
 80016b0:	e79f      	b.n	80015f2 <HAL_CAN_GetRxMessage+0x62>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016b2:	6802      	ldr	r2, [r0, #0]
 80016b4:	68d3      	ldr	r3, [r2, #12]
 80016b6:	f043 0320 	orr.w	r3, r3, #32
 80016ba:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80016bc:	2000      	movs	r0, #0
 80016be:	e777      	b.n	80015b0 <HAL_CAN_GetRxMessage+0x20>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016c0:	6802      	ldr	r2, [r0, #0]
 80016c2:	6913      	ldr	r3, [r2, #16]
 80016c4:	f043 0320 	orr.w	r3, r3, #32
 80016c8:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 80016ca:	2000      	movs	r0, #0
 80016cc:	e770      	b.n	80015b0 <HAL_CAN_GetRxMessage+0x20>

080016ce <HAL_CAN_ActivateNotification>:
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80016ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d00a      	beq.n	80016ee <HAL_CAN_ActivateNotification+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80016d8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80016dc:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d005      	beq.n	80016ee <HAL_CAN_ActivateNotification+0x20>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
  }
}
 80016ec:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016ee:	6802      	ldr	r2, [r0, #0]
 80016f0:	6953      	ldr	r3, [r2, #20]
 80016f2:	4319      	orrs	r1, r3
 80016f4:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80016f6:	2000      	movs	r0, #0
 80016f8:	4770      	bx	lr

080016fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016fa:	4770      	bx	lr

080016fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016fc:	4770      	bx	lr

080016fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016fe:	4770      	bx	lr

08001700 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001700:	4770      	bx	lr

08001702 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001702:	4770      	bx	lr

08001704 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001704:	4770      	bx	lr

08001706 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001706:	4770      	bx	lr

08001708 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001708:	4770      	bx	lr

0800170a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800170a:	4770      	bx	lr

0800170c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800170c:	4770      	bx	lr

0800170e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800170e:	4770      	bx	lr

08001710 <HAL_CAN_IRQHandler>:
{
 8001710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001714:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001716:	6803      	ldr	r3, [r0, #0]
 8001718:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800171a:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800171c:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800171e:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001722:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001726:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 800172a:	f014 0f01 	tst.w	r4, #1
 800172e:	d05a      	beq.n	80017e6 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 8001730:	f016 0f01 	tst.w	r6, #1
 8001734:	d017      	beq.n	8001766 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001736:	2201      	movs	r2, #1
 8001738:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 800173a:	f016 0f02 	tst.w	r6, #2
 800173e:	d108      	bne.n	8001752 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 8001740:	f016 0f04 	tst.w	r6, #4
 8001744:	d130      	bne.n	80017a8 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 8001746:	f016 0f08 	tst.w	r6, #8
 800174a:	d007      	beq.n	800175c <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800174c:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 8001750:	e00b      	b.n	800176a <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001752:	f7ff ffd2 	bl	80016fa <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001756:	f04f 0b00 	mov.w	fp, #0
 800175a:	e006      	b.n	800176a <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800175c:	f7ff ffd0 	bl	8001700 <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001760:	f04f 0b00 	mov.w	fp, #0
 8001764:	e001      	b.n	800176a <HAL_CAN_IRQHandler+0x5a>
 8001766:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 800176a:	f416 7f80 	tst.w	r6, #256	; 0x100
 800176e:	d00b      	beq.n	8001788 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001776:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 8001778:	f416 7f00 	tst.w	r6, #512	; 0x200
 800177c:	d117      	bne.n	80017ae <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 800177e:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001782:	d018      	beq.n	80017b6 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001784:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 8001788:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800178c:	d02d      	beq.n	80017ea <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800178e:	682b      	ldr	r3, [r5, #0]
 8001790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001794:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 8001796:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800179a:	d116      	bne.n	80017ca <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 800179c:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 80017a0:	d017      	beq.n	80017d2 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017a2:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 80017a6:	e020      	b.n	80017ea <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017a8:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 80017ac:	e7dd      	b.n	800176a <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017ae:	4628      	mov	r0, r5
 80017b0:	f7ff ffa4 	bl	80016fc <HAL_CAN_TxMailbox1CompleteCallback>
 80017b4:	e7e8      	b.n	8001788 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 80017b6:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80017ba:	d002      	beq.n	80017c2 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017bc:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 80017c0:	e7e2      	b.n	8001788 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017c2:	4628      	mov	r0, r5
 80017c4:	f7ff ff9d 	bl	8001702 <HAL_CAN_TxMailbox1AbortCallback>
 80017c8:	e7de      	b.n	8001788 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017ca:	4628      	mov	r0, r5
 80017cc:	f7ff ff97 	bl	80016fe <HAL_CAN_TxMailbox2CompleteCallback>
 80017d0:	e00b      	b.n	80017ea <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 80017d2:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 80017d6:	d002      	beq.n	80017de <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017d8:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 80017dc:	e005      	b.n	80017ea <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017de:	4628      	mov	r0, r5
 80017e0:	f7ff ff90 	bl	8001704 <HAL_CAN_TxMailbox2AbortCallback>
 80017e4:	e001      	b.n	80017ea <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017e6:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 80017ea:	f014 0f08 	tst.w	r4, #8
 80017ee:	d007      	beq.n	8001800 <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 80017f0:	f019 0f10 	tst.w	r9, #16
 80017f4:	d004      	beq.n	8001800 <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017f6:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017fa:	682b      	ldr	r3, [r5, #0]
 80017fc:	2210      	movs	r2, #16
 80017fe:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 8001800:	f014 0f04 	tst.w	r4, #4
 8001804:	d002      	beq.n	800180c <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 8001806:	f019 0f08 	tst.w	r9, #8
 800180a:	d160      	bne.n	80018ce <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 800180c:	f014 0f02 	tst.w	r4, #2
 8001810:	d004      	beq.n	800181c <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 8001812:	682b      	ldr	r3, [r5, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f013 0f03 	tst.w	r3, #3
 800181a:	d15f      	bne.n	80018dc <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 800181c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001820:	d007      	beq.n	8001832 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 8001822:	f018 0f10 	tst.w	r8, #16
 8001826:	d004      	beq.n	8001832 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001828:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800182c:	682b      	ldr	r3, [r5, #0]
 800182e:	2210      	movs	r2, #16
 8001830:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 8001832:	f014 0f20 	tst.w	r4, #32
 8001836:	d002      	beq.n	800183e <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 8001838:	f018 0f08 	tst.w	r8, #8
 800183c:	d152      	bne.n	80018e4 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 800183e:	f014 0f10 	tst.w	r4, #16
 8001842:	d004      	beq.n	800184e <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 8001844:	682b      	ldr	r3, [r5, #0]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	f013 0f03 	tst.w	r3, #3
 800184c:	d151      	bne.n	80018f2 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 800184e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001852:	d002      	beq.n	800185a <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 8001854:	f017 0f10 	tst.w	r7, #16
 8001858:	d14f      	bne.n	80018fa <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 800185a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800185e:	d002      	beq.n	8001866 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 8001860:	f017 0f08 	tst.w	r7, #8
 8001864:	d150      	bne.n	8001908 <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != RESET)
 8001866:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800186a:	d067      	beq.n	800193c <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 800186c:	f017 0f04 	tst.w	r7, #4
 8001870:	d061      	beq.n	8001936 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 8001872:	f414 7f80 	tst.w	r4, #256	; 0x100
 8001876:	d004      	beq.n	8001882 <HAL_CAN_IRQHandler+0x172>
 8001878:	f01a 0f01 	tst.w	sl, #1
 800187c:	d001      	beq.n	8001882 <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 800187e:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8001882:	f414 7f00 	tst.w	r4, #512	; 0x200
 8001886:	d004      	beq.n	8001892 <HAL_CAN_IRQHandler+0x182>
 8001888:	f01a 0f02 	tst.w	sl, #2
 800188c:	d001      	beq.n	8001892 <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 800188e:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8001892:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8001896:	d004      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x192>
 8001898:	f01a 0f04 	tst.w	sl, #4
 800189c:	d001      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 800189e:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 80018a2:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80018a6:	d046      	beq.n	8001936 <HAL_CAN_IRQHandler+0x226>
 80018a8:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 80018ac:	d043      	beq.n	8001936 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 80018ae:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80018b2:	d048      	beq.n	8001946 <HAL_CAN_IRQHandler+0x236>
 80018b4:	d92f      	bls.n	8001916 <HAL_CAN_IRQHandler+0x206>
 80018b6:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 80018ba:	d047      	beq.n	800194c <HAL_CAN_IRQHandler+0x23c>
 80018bc:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 80018c0:	d047      	beq.n	8001952 <HAL_CAN_IRQHandler+0x242>
 80018c2:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80018c6:	d131      	bne.n	800192c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 80018c8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 80018cc:	e02e      	b.n	800192c <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018ce:	682b      	ldr	r3, [r5, #0]
 80018d0:	2208      	movs	r2, #8
 80018d2:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018d4:	4628      	mov	r0, r5
 80018d6:	f7ff ff16 	bl	8001706 <HAL_CAN_RxFifo0FullCallback>
 80018da:	e797      	b.n	800180c <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018dc:	4628      	mov	r0, r5
 80018de:	f7fe fe19 	bl	8000514 <HAL_CAN_RxFifo0MsgPendingCallback>
 80018e2:	e79b      	b.n	800181c <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	2208      	movs	r2, #8
 80018e8:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018ea:	4628      	mov	r0, r5
 80018ec:	f7ff ff0c 	bl	8001708 <HAL_CAN_RxFifo1FullCallback>
 80018f0:	e7a5      	b.n	800183e <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018f2:	4628      	mov	r0, r5
 80018f4:	f7fe fe24 	bl	8000540 <HAL_CAN_RxFifo1MsgPendingCallback>
 80018f8:	e7a9      	b.n	800184e <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018fa:	682b      	ldr	r3, [r5, #0]
 80018fc:	2210      	movs	r2, #16
 80018fe:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001900:	4628      	mov	r0, r5
 8001902:	f7ff ff02 	bl	800170a <HAL_CAN_SleepCallback>
 8001906:	e7a8      	b.n	800185a <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001908:	682b      	ldr	r3, [r5, #0]
 800190a:	2208      	movs	r2, #8
 800190c:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800190e:	4628      	mov	r0, r5
 8001910:	f7ff fefc 	bl	800170c <HAL_CAN_WakeUpFromRxMsgCallback>
 8001914:	e7a7      	b.n	8001866 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 8001916:	f1ba 0f10 	cmp.w	sl, #16
 800191a:	d005      	beq.n	8001928 <HAL_CAN_IRQHandler+0x218>
 800191c:	f1ba 0f20 	cmp.w	sl, #32
 8001920:	d104      	bne.n	800192c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001922:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8001926:	e001      	b.n	800192c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001928:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800192c:	682a      	ldr	r2, [r5, #0]
 800192e:	6993      	ldr	r3, [r2, #24]
 8001930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001934:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001936:	682b      	ldr	r3, [r5, #0]
 8001938:	2204      	movs	r2, #4
 800193a:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800193c:	f1bb 0f00 	cmp.w	fp, #0
 8001940:	d10a      	bne.n	8001958 <HAL_CAN_IRQHandler+0x248>
 8001942:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 8001946:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 800194a:	e7ef      	b.n	800192c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 800194c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 8001950:	e7ec      	b.n	800192c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001952:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 8001956:	e7e9      	b.n	800192c <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 8001958:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800195a:	ea4b 0303 	orr.w	r3, fp, r3
 800195e:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001960:	4628      	mov	r0, r5
 8001962:	f7ff fed4 	bl	800170e <HAL_CAN_ErrorCallback>
}
 8001966:	e7ec      	b.n	8001942 <HAL_CAN_IRQHandler+0x232>

08001968 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800196a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001974:	0200      	lsls	r0, r0, #8
 8001976:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800197c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001980:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001984:	60d0      	str	r0, [r2, #12]
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_NVIC_SetPriority+0x5c>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001996:	f1c3 0407 	rsb	r4, r3, #7
 800199a:	2c04      	cmp	r4, #4
 800199c:	bf28      	it	cs
 800199e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a0:	1d1d      	adds	r5, r3, #4
 80019a2:	2d06      	cmp	r5, #6
 80019a4:	d917      	bls.n	80019d6 <HAL_NVIC_SetPriority+0x4a>
 80019a6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	2501      	movs	r5, #1
 80019aa:	fa05 f404 	lsl.w	r4, r5, r4
 80019ae:	3c01      	subs	r4, #1
 80019b0:	4021      	ands	r1, r4
 80019b2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	fa05 f303 	lsl.w	r3, r5, r3
 80019b8:	3b01      	subs	r3, #1
 80019ba:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80019be:	2800      	cmp	r0, #0
 80019c0:	db0b      	blt.n	80019da <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	0109      	lsls	r1, r1, #4
 80019c4:	b2c9      	uxtb	r1, r1
 80019c6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019ca:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80019ce:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019d2:	bc30      	pop	{r4, r5}
 80019d4:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	2300      	movs	r3, #0
 80019d8:	e7e6      	b.n	80019a8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	f000 000f 	and.w	r0, r0, #15
 80019de:	0109      	lsls	r1, r1, #4
 80019e0:	b2c9      	uxtb	r1, r1
 80019e2:	4b02      	ldr	r3, [pc, #8]	; (80019ec <HAL_NVIC_SetPriority+0x60>)
 80019e4:	5419      	strb	r1, [r3, r0]
 80019e6:	e7f4      	b.n	80019d2 <HAL_NVIC_SetPriority+0x46>
 80019e8:	e000ed00 	.word	0xe000ed00
 80019ec:	e000ed14 	.word	0xe000ed14

080019f0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019f0:	0942      	lsrs	r2, r0, #5
 80019f2:	f000 001f 	and.w	r0, r0, #31
 80019f6:	2301      	movs	r3, #1
 80019f8:	fa03 f000 	lsl.w	r0, r3, r0
 80019fc:	4b01      	ldr	r3, [pc, #4]	; (8001a04 <HAL_NVIC_EnableIRQ+0x14>)
 80019fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	3801      	subs	r0, #1
 8001a0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a0e:	d20a      	bcs.n	8001a26 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_SYSTICK_Config+0x24>)
 8001a12:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	21f0      	movs	r1, #240	; 0xf0
 8001a16:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_SYSTICK_Config+0x28>)
 8001a18:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a34:	2804      	cmp	r0, #4
 8001a36:	d005      	beq.n	8001a44 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001a3a:	6813      	ldr	r3, [r2, #0]
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a44:	4a02      	ldr	r2, [pc, #8]	; (8001a50 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4770      	bx	lr
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001a54:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001a56:	f7ff fa89 	bl	8000f6c <HAL_SYSTICK_Callback>
 8001a5a:	bd08      	pop	{r3, pc}

08001a5c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a5c:	6802      	ldr	r2, [r0, #0]
 8001a5e:	b2d3      	uxtb	r3, r2
 8001a60:	3b10      	subs	r3, #16
 8001a62:	490b      	ldr	r1, [pc, #44]	; (8001a90 <DMA_CalcBaseAndBitshift+0x34>)
 8001a64:	fba1 1303 	umull	r1, r3, r1, r3
 8001a68:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a6a:	490a      	ldr	r1, [pc, #40]	; (8001a94 <DMA_CalcBaseAndBitshift+0x38>)
 8001a6c:	5cc9      	ldrb	r1, [r1, r3]
 8001a6e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d806      	bhi.n	8001a82 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a74:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8001a78:	f022 0203 	bic.w	r2, r2, #3
 8001a7c:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001a7e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001a80:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a82:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8001a86:	f022 0203 	bic.w	r2, r2, #3
 8001a8a:	3204      	adds	r2, #4
 8001a8c:	6582      	str	r2, [r0, #88]	; 0x58
 8001a8e:	e7f6      	b.n	8001a7e <DMA_CalcBaseAndBitshift+0x22>
 8001a90:	aaaaaaab 	.word	0xaaaaaaab
 8001a94:	08002ff4 	.word	0x08002ff4

08001a98 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a98:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a9a:	6982      	ldr	r2, [r0, #24]
 8001a9c:	b992      	cbnz	r2, 8001ac4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d00a      	beq.n	8001ab8 <DMA_CheckFifoParam+0x20>
 8001aa2:	b11b      	cbz	r3, 8001aac <DMA_CheckFifoParam+0x14>
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d001      	beq.n	8001aac <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001aae:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001ab2:	d12c      	bne.n	8001b0e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001aba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001abe:	d028      	beq.n	8001b12 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ac4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001ac8:	d005      	beq.n	8001ad6 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d929      	bls.n	8001b22 <DMA_CheckFifoParam+0x8a>
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d015      	beq.n	8001afe <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	4770      	bx	lr
    switch (tmp)
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d803      	bhi.n	8001ae2 <DMA_CheckFifoParam+0x4a>
 8001ada:	e8df f003 	tbb	[pc, r3]
 8001ade:	041c      	.short	0x041c
 8001ae0:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ae8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001aec:	d115      	bne.n	8001b1a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8001aee:	2000      	movs	r0, #0
 8001af0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001af4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001af8:	d011      	beq.n	8001b1e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8001afa:	2000      	movs	r0, #0
 8001afc:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001afe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001b04:	d001      	beq.n	8001b0a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8001b06:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001b08:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	4770      	bx	lr
        status = HAL_ERROR;
 8001b0e:	2001      	movs	r0, #1
 8001b10:	4770      	bx	lr
        status = HAL_ERROR;
 8001b12:	2001      	movs	r0, #1
 8001b14:	4770      	bx	lr
      status = HAL_ERROR;
 8001b16:	2001      	movs	r0, #1
 8001b18:	4770      	bx	lr
        status = HAL_ERROR;
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	4770      	bx	lr
        status = HAL_ERROR;
 8001b1e:	2001      	movs	r0, #1
 8001b20:	4770      	bx	lr
      status = HAL_ERROR;
 8001b22:	2001      	movs	r0, #1
 8001b24:	4770      	bx	lr
	...

08001b28 <HAL_DMA_Init>:
{
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff fb44 	bl	80011b8 <HAL_GetTick>
  if(hdma == NULL)
 8001b30:	2c00      	cmp	r4, #0
 8001b32:	d05d      	beq.n	8001bf0 <HAL_DMA_Init+0xc8>
 8001b34:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001b36:	2300      	movs	r3, #0
 8001b38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001b42:	6822      	ldr	r2, [r4, #0]
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	f012 0f01 	tst.w	r2, #1
 8001b54:	d00a      	beq.n	8001b6c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b56:	f7ff fb2f 	bl	80011b8 <HAL_GetTick>
 8001b5a:	1b40      	subs	r0, r0, r5
 8001b5c:	2805      	cmp	r0, #5
 8001b5e:	d9f5      	bls.n	8001b4c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b60:	2320      	movs	r3, #32
 8001b62:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b64:	2003      	movs	r0, #3
 8001b66:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8001b6a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001b6c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b6e:	4921      	ldr	r1, [pc, #132]	; (8001bf4 <HAL_DMA_Init+0xcc>)
 8001b70:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b72:	6862      	ldr	r2, [r4, #4]
 8001b74:	68a0      	ldr	r0, [r4, #8]
 8001b76:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b78:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7c:	6920      	ldr	r0, [r4, #16]
 8001b7e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b80:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b82:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b84:	69a0      	ldr	r0, [r4, #24]
 8001b86:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b88:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8c:	6a20      	ldr	r0, [r4, #32]
 8001b8e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b90:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b94:	2904      	cmp	r1, #4
 8001b96:	d016      	beq.n	8001bc6 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8001b98:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001b9a:	6826      	ldr	r6, [r4, #0]
 8001b9c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b9e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ba4:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d012      	beq.n	8001bd0 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 8001baa:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff ff55 	bl	8001a5c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bb4:	233f      	movs	r3, #63	; 0x3f
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bba:	2000      	movs	r0, #0
 8001bbc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001bc4:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bc8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001bca:	4301      	orrs	r1, r0
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	e7e3      	b.n	8001b98 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 8001bd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bd2:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0e7      	beq.n	8001baa <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff ff5c 	bl	8001a98 <DMA_CheckFifoParam>
 8001be0:	2800      	cmp	r0, #0
 8001be2:	d0e2      	beq.n	8001baa <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be4:	2340      	movs	r3, #64	; 0x40
 8001be6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001be8:	2001      	movs	r0, #1
 8001bea:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001bf0:	2001      	movs	r0, #1
}
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
 8001bf4:	f010803f 	.word	0xf010803f

08001bf8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d003      	beq.n	8001c0a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001c06:	2001      	movs	r0, #1
 8001c08:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001c10:	6802      	ldr	r2, [r0, #0]
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001c1a:	2000      	movs	r0, #0
}
 8001c1c:	4770      	bx	lr
	...

08001c20 <HAL_DMA_IRQHandler>:
{
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	b083      	sub	sp, #12
 8001c24:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c2a:	4b72      	ldr	r3, [pc, #456]	; (8001df4 <HAL_DMA_IRQHandler+0x1d4>)
 8001c2c:	681d      	ldr	r5, [r3, #0]
 8001c2e:	4b72      	ldr	r3, [pc, #456]	; (8001df8 <HAL_DMA_IRQHandler+0x1d8>)
 8001c30:	fba3 3505 	umull	r3, r5, r3, r5
 8001c34:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c36:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001c38:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	4093      	lsls	r3, r2
 8001c40:	421e      	tst	r6, r3
 8001c42:	d010      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c44:	6803      	ldr	r3, [r0, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	f012 0f04 	tst.w	r2, #4
 8001c4c:	d00b      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f022 0204 	bic.w	r2, r2, #4
 8001c54:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c56:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001c58:	2308      	movs	r3, #8
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c5e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4093      	lsls	r3, r2
 8001c6c:	421e      	tst	r6, r3
 8001c6e:	d009      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c70:	6822      	ldr	r2, [r4, #0]
 8001c72:	6952      	ldr	r2, [r2, #20]
 8001c74:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c78:	d004      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c7a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c84:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c86:	2304      	movs	r3, #4
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	421e      	tst	r6, r3
 8001c8c:	d009      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c8e:	6822      	ldr	r2, [r4, #0]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	f012 0f02 	tst.w	r2, #2
 8001c96:	d004      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c98:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ca4:	2310      	movs	r3, #16
 8001ca6:	4093      	lsls	r3, r2
 8001ca8:	421e      	tst	r6, r3
 8001caa:	d024      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cac:	6822      	ldr	r2, [r4, #0]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	f012 0f08 	tst.w	r2, #8
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cb6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001cc0:	d00d      	beq.n	8001cde <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001cc8:	d104      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ccc:	b19b      	cbz	r3, 8001cf6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001cce:	4620      	mov	r0, r4
 8001cd0:	4798      	blx	r3
 8001cd2:	e010      	b.n	8001cf6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001cd6:	b173      	cbz	r3, 8001cf6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4798      	blx	r3
 8001cdc:	e00b      	b.n	8001cf6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001ce4:	d103      	bne.n	8001cee <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	f022 0208 	bic.w	r2, r2, #8
 8001cec:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cf0:	b10b      	cbz	r3, 8001cf6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	4093      	lsls	r3, r2
 8001cfc:	421e      	tst	r6, r3
 8001cfe:	d055      	beq.n	8001dac <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d00:	6822      	ldr	r2, [r4, #0]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	f012 0f10 	tst.w	r2, #16
 8001d08:	d050      	beq.n	8001dac <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d0a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d0c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d00e      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001d1e:	d033      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001d26:	d12a      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001d28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d03e      	beq.n	8001dac <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4798      	blx	r3
 8001d32:	e03b      	b.n	8001dac <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d34:	6822      	ldr	r2, [r4, #0]
 8001d36:	6813      	ldr	r3, [r2, #0]
 8001d38:	f023 0316 	bic.w	r3, r3, #22
 8001d3c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d3e:	6822      	ldr	r2, [r4, #0]
 8001d40:	6953      	ldr	r3, [r2, #20]
 8001d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d46:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d4a:	b1a3      	cbz	r3, 8001d76 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d4c:	6822      	ldr	r2, [r4, #0]
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	f023 0308 	bic.w	r3, r3, #8
 8001d54:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d56:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d58:	233f      	movs	r3, #63	; 0x3f
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001d6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d03f      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001d70:	4620      	mov	r0, r4
 8001d72:	4798      	blx	r3
 8001d74:	e03c      	b.n	8001df0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e7      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x12c>
 8001d7c:	e7eb      	b.n	8001d56 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001d7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d80:	b1a3      	cbz	r3, 8001dac <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001d82:	4620      	mov	r0, r4
 8001d84:	4798      	blx	r3
 8001d86:	e011      	b.n	8001dac <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001d8e:	d109      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	f022 0210 	bic.w	r2, r2, #16
 8001d96:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001da4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001da6:	b10b      	cbz	r3, 8001dac <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001da8:	4620      	mov	r0, r4
 8001daa:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001dae:	b1fb      	cbz	r3, 8001df0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001db0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001db2:	f013 0f01 	tst.w	r3, #1
 8001db6:	d017      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001db8:	2305      	movs	r3, #5
 8001dba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001dbe:	6822      	ldr	r2, [r4, #0]
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001dc8:	9b01      	ldr	r3, [sp, #4]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	429d      	cmp	r5, r3
 8001dd0:	d304      	bcc.n	8001ddc <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f013 0f01 	tst.w	r3, #1
 8001dda:	d1f5      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001de8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dea:	b10b      	cbz	r3, 8001df0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001dec:	4620      	mov	r0, r4
 8001dee:	4798      	blx	r3
}
 8001df0:	b003      	add	sp, #12
 8001df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df4:	20000000 	.word	0x20000000
 8001df8:	1b4e81b5 	.word	0x1b4e81b5

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfe:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e00:	2400      	movs	r4, #0
 8001e02:	e098      	b.n	8001f36 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e04:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8001e08:	f10e 0e08 	add.w	lr, lr, #8
 8001e0c:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e10:	f004 0607 	and.w	r6, r4, #7
 8001e14:	00b6      	lsls	r6, r6, #2
 8001e16:	270f      	movs	r7, #15
 8001e18:	40b7      	lsls	r7, r6
 8001e1a:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e1e:	690f      	ldr	r7, [r1, #16]
 8001e20:	fa07 f606 	lsl.w	r6, r7, r6
 8001e24:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001e26:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8001e2a:	e094      	b.n	8001f56 <HAL_GPIO_Init+0x15a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e2e:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e30:	68cf      	ldr	r7, [r1, #12]
 8001e32:	fa07 f70e 	lsl.w	r7, r7, lr
 8001e36:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001e38:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3c:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e40:	684e      	ldr	r6, [r1, #4]
 8001e42:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001e46:	40a6      	lsls	r6, r4
 8001e48:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001e4a:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e4c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e4e:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e50:	688b      	ldr	r3, [r1, #8]
 8001e52:	fa03 f30e 	lsl.w	r3, r3, lr
 8001e56:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8001e58:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5a:	684b      	ldr	r3, [r1, #4]
 8001e5c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e60:	d068      	beq.n	8001f34 <HAL_GPIO_Init+0x138>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	4b51      	ldr	r3, [pc, #324]	; (8001fac <HAL_GPIO_Init+0x1b0>)
 8001e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e6e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	08a3      	lsrs	r3, r4, #2
 8001e7c:	1c9e      	adds	r6, r3, #2
 8001e7e:	4a4c      	ldr	r2, [pc, #304]	; (8001fb0 <HAL_GPIO_Init+0x1b4>)
 8001e80:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e84:	f004 0603 	and.w	r6, r4, #3
 8001e88:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001e8c:	260f      	movs	r6, #15
 8001e8e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001e92:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e96:	4f47      	ldr	r7, [pc, #284]	; (8001fb4 <HAL_GPIO_Init+0x1b8>)
 8001e98:	42b8      	cmp	r0, r7
 8001e9a:	d079      	beq.n	8001f90 <HAL_GPIO_Init+0x194>
 8001e9c:	4e46      	ldr	r6, [pc, #280]	; (8001fb8 <HAL_GPIO_Init+0x1bc>)
 8001e9e:	42b0      	cmp	r0, r6
 8001ea0:	d078      	beq.n	8001f94 <HAL_GPIO_Init+0x198>
 8001ea2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ea6:	42b0      	cmp	r0, r6
 8001ea8:	d076      	beq.n	8001f98 <HAL_GPIO_Init+0x19c>
 8001eaa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001eae:	42b0      	cmp	r0, r6
 8001eb0:	d074      	beq.n	8001f9c <HAL_GPIO_Init+0x1a0>
 8001eb2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001eb6:	42b0      	cmp	r0, r6
 8001eb8:	d072      	beq.n	8001fa0 <HAL_GPIO_Init+0x1a4>
 8001eba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ebe:	42b0      	cmp	r0, r6
 8001ec0:	d070      	beq.n	8001fa4 <HAL_GPIO_Init+0x1a8>
 8001ec2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ec6:	42b0      	cmp	r0, r6
 8001ec8:	d060      	beq.n	8001f8c <HAL_GPIO_Init+0x190>
 8001eca:	2607      	movs	r6, #7
 8001ecc:	fa06 f60e 	lsl.w	r6, r6, lr
 8001ed0:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	4e36      	ldr	r6, [pc, #216]	; (8001fb0 <HAL_GPIO_Init+0x1b4>)
 8001ed6:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_GPIO_Init+0x1c0>)
 8001edc:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	43eb      	mvns	r3, r5
 8001ee0:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee4:	684f      	ldr	r7, [r1, #4]
 8001ee6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001eea:	d001      	beq.n	8001ef0 <HAL_GPIO_Init+0xf4>
        {
          temp |= iocurrent;
 8001eec:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8001ef0:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <HAL_GPIO_Init+0x1c0>)
 8001ef2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001ef4:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001efa:	684f      	ldr	r7, [r1, #4]
 8001efc:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001f00:	d001      	beq.n	8001f06 <HAL_GPIO_Init+0x10a>
        {
          temp |= iocurrent;
 8001f02:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8001f06:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <HAL_GPIO_Init+0x1c0>)
 8001f08:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0a:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f10:	684f      	ldr	r7, [r1, #4]
 8001f12:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001f16:	d001      	beq.n	8001f1c <HAL_GPIO_Init+0x120>
        {
          temp |= iocurrent;
 8001f18:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001f1c:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <HAL_GPIO_Init+0x1c0>)
 8001f1e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001f20:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f24:	684e      	ldr	r6, [r1, #4]
 8001f26:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001f2a:	d001      	beq.n	8001f30 <HAL_GPIO_Init+0x134>
        {
          temp |= iocurrent;
 8001f2c:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001f30:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <HAL_GPIO_Init+0x1c0>)
 8001f32:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f34:	3401      	adds	r4, #1
 8001f36:	2c0f      	cmp	r4, #15
 8001f38:	d836      	bhi.n	8001fa8 <HAL_GPIO_Init+0x1ac>
    ioposition = 0x01U << position;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3e:	680a      	ldr	r2, [r1, #0]
 8001f40:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8001f44:	42ab      	cmp	r3, r5
 8001f46:	d1f5      	bne.n	8001f34 <HAL_GPIO_Init+0x138>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f48:	684a      	ldr	r2, [r1, #4]
 8001f4a:	2a02      	cmp	r2, #2
 8001f4c:	f43f af5a 	beq.w	8001e04 <HAL_GPIO_Init+0x8>
 8001f50:	2a12      	cmp	r2, #18
 8001f52:	f43f af57 	beq.w	8001e04 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001f56:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f58:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f62:	43d2      	mvns	r2, r2
 8001f64:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f66:	684f      	ldr	r7, [r1, #4]
 8001f68:	f007 0703 	and.w	r7, r7, #3
 8001f6c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001f70:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001f72:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f74:	684e      	ldr	r6, [r1, #4]
 8001f76:	1e77      	subs	r7, r6, #1
 8001f78:	2f01      	cmp	r7, #1
 8001f7a:	f67f af57 	bls.w	8001e2c <HAL_GPIO_Init+0x30>
 8001f7e:	2e11      	cmp	r6, #17
 8001f80:	f43f af54 	beq.w	8001e2c <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f84:	2e12      	cmp	r6, #18
 8001f86:	f47f af61 	bne.w	8001e4c <HAL_GPIO_Init+0x50>
 8001f8a:	e74f      	b.n	8001e2c <HAL_GPIO_Init+0x30>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8c:	2606      	movs	r6, #6
 8001f8e:	e79d      	b.n	8001ecc <HAL_GPIO_Init+0xd0>
 8001f90:	2600      	movs	r6, #0
 8001f92:	e79b      	b.n	8001ecc <HAL_GPIO_Init+0xd0>
 8001f94:	2601      	movs	r6, #1
 8001f96:	e799      	b.n	8001ecc <HAL_GPIO_Init+0xd0>
 8001f98:	2602      	movs	r6, #2
 8001f9a:	e797      	b.n	8001ecc <HAL_GPIO_Init+0xd0>
 8001f9c:	2603      	movs	r6, #3
 8001f9e:	e795      	b.n	8001ecc <HAL_GPIO_Init+0xd0>
 8001fa0:	2604      	movs	r6, #4
 8001fa2:	e793      	b.n	8001ecc <HAL_GPIO_Init+0xd0>
 8001fa4:	2605      	movs	r6, #5
 8001fa6:	e791      	b.n	8001ecc <HAL_GPIO_Init+0xd0>
      }
    }
  }
}
 8001fa8:	b003      	add	sp, #12
 8001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	b912      	cbnz	r2, 8001fc8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc2:	0409      	lsls	r1, r1, #16
 8001fc4:	6181      	str	r1, [r0, #24]
 8001fc6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001fc8:	6181      	str	r1, [r0, #24]
 8001fca:	4770      	bx	lr

08001fcc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001fcc:	6943      	ldr	r3, [r0, #20]
 8001fce:	4059      	eors	r1, r3
 8001fd0:	6141      	str	r1, [r0, #20]
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	f000 809d 	beq.w	8002114 <HAL_RCC_ClockConfig+0x140>
{
 8001fda:	b570      	push	{r4, r5, r6, lr}
 8001fdc:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fde:	4b4f      	ldr	r3, [pc, #316]	; (800211c <HAL_RCC_ClockConfig+0x148>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	428b      	cmp	r3, r1
 8001fe8:	d209      	bcs.n	8001ffe <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	b2cb      	uxtb	r3, r1
 8001fec:	4a4b      	ldr	r2, [pc, #300]	; (800211c <HAL_RCC_ClockConfig+0x148>)
 8001fee:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff0:	6813      	ldr	r3, [r2, #0]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	4299      	cmp	r1, r3
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	f013 0f02 	tst.w	r3, #2
 8002004:	d017      	beq.n	8002036 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002006:	f013 0f04 	tst.w	r3, #4
 800200a:	d004      	beq.n	8002016 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800200c:	4a44      	ldr	r2, [pc, #272]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 800200e:	6893      	ldr	r3, [r2, #8]
 8002010:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002014:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	f013 0f08 	tst.w	r3, #8
 800201c:	d004      	beq.n	8002028 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201e:	4a40      	ldr	r2, [pc, #256]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 8002020:	6893      	ldr	r3, [r2, #8]
 8002022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4a3d      	ldr	r2, [pc, #244]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 800202a:	6893      	ldr	r3, [r2, #8]
 800202c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002030:	68a0      	ldr	r0, [r4, #8]
 8002032:	4303      	orrs	r3, r0
 8002034:	6093      	str	r3, [r2, #8]
 8002036:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	f013 0f01 	tst.w	r3, #1
 800203e:	d032      	beq.n	80020a6 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002040:	6863      	ldr	r3, [r4, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d021      	beq.n	800208a <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002046:	1e9a      	subs	r2, r3, #2
 8002048:	2a01      	cmp	r2, #1
 800204a:	d925      	bls.n	8002098 <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	4a34      	ldr	r2, [pc, #208]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f012 0f02 	tst.w	r2, #2
 8002054:	d060      	beq.n	8002118 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002056:	4932      	ldr	r1, [pc, #200]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 8002058:	688a      	ldr	r2, [r1, #8]
 800205a:	f022 0203 	bic.w	r2, r2, #3
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002062:	f7ff f8a9 	bl	80011b8 <HAL_GetTick>
 8002066:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	6862      	ldr	r2, [r4, #4]
 8002072:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002076:	d016      	beq.n	80020a6 <HAL_RCC_ClockConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7ff f89e 	bl	80011b8 <HAL_GetTick>
 800207c:	1b80      	subs	r0, r0, r6
 800207e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002082:	4298      	cmp	r0, r3
 8002084:	d9f0      	bls.n	8002068 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_TIMEOUT;
 8002086:	2003      	movs	r0, #3
 8002088:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4a25      	ldr	r2, [pc, #148]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002092:	d1e0      	bne.n	8002056 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002094:	2001      	movs	r0, #1
 8002096:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002098:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80020a0:	d1d9      	bne.n	8002056 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80020a2:	2001      	movs	r0, #1
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCC_ClockConfig+0x148>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	429d      	cmp	r5, r3
 80020b0:	d209      	bcs.n	80020c6 <HAL_RCC_ClockConfig+0xf2>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	b2ea      	uxtb	r2, r5
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_ClockConfig+0x148>)
 80020b6:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	429d      	cmp	r5, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_ClockConfig+0xf2>
    {
      return HAL_ERROR;
 80020c2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 80020c4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	f013 0f04 	tst.w	r3, #4
 80020cc:	d006      	beq.n	80020dc <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ce:	4a14      	ldr	r2, [pc, #80]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 80020d0:	6893      	ldr	r3, [r2, #8]
 80020d2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80020d6:	68e1      	ldr	r1, [r4, #12]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	f013 0f08 	tst.w	r3, #8
 80020e2:	d007      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 80020e6:	6893      	ldr	r3, [r2, #8]
 80020e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80020ec:	6921      	ldr	r1, [r4, #16]
 80020ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020f2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f4:	f000 f840 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x14c>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002100:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_RCC_ClockConfig+0x150>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	40d8      	lsrs	r0, r3
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_RCC_ClockConfig+0x154>)
 8002108:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800210a:	2000      	movs	r0, #0
 800210c:	f7ff f808 	bl	8001120 <HAL_InitTick>
  return HAL_OK;
 8002110:	2000      	movs	r0, #0
 8002112:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002114:	2001      	movs	r0, #1
 8002116:	4770      	bx	lr
        return HAL_ERROR;
 8002118:	2001      	movs	r0, #1
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	40023c00 	.word	0x40023c00
 8002120:	40023800 	.word	0x40023800
 8002124:	08002fdc 	.word	0x08002fdc
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800212c:	4b01      	ldr	r3, [pc, #4]	; (8002134 <HAL_RCC_GetHCLKFreq+0x8>)
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000000 	.word	0x20000000

08002138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002138:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800213a:	f7ff fff7 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002146:	4a03      	ldr	r2, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002148:	5cd3      	ldrb	r3, [r2, r3]
}
 800214a:	40d8      	lsrs	r0, r3
 800214c:	bd08      	pop	{r3, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	08002fec 	.word	0x08002fec

08002158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002158:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800215a:	f7ff ffe7 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002166:	4a03      	ldr	r2, [pc, #12]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
}
 800216a:	40d8      	lsrs	r0, r3
 800216c:	bd08      	pop	{r3, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	08002fec 	.word	0x08002fec

08002178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800217a:	4b5c      	ldr	r3, [pc, #368]	; (80022ec <HAL_RCC_GetSysClockFreq+0x174>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b08      	cmp	r3, #8
 8002184:	d006      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x1c>
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d05a      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0xc8>
 800218a:	2b04      	cmp	r3, #4
 800218c:	f000 80ac 	beq.w	80022e8 <HAL_RCC_GetSysClockFreq+0x170>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4857      	ldr	r0, [pc, #348]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x178>)
 8002192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002194:	4b55      	ldr	r3, [pc, #340]	; (80022ec <HAL_RCC_GetSysClockFreq+0x174>)
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80021a2:	d02a      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a4:	4b51      	ldr	r3, [pc, #324]	; (80022ec <HAL_RCC_GetSysClockFreq+0x174>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80021ac:	461e      	mov	r6, r3
 80021ae:	2700      	movs	r7, #0
 80021b0:	015c      	lsls	r4, r3, #5
 80021b2:	2500      	movs	r5, #0
 80021b4:	1ae4      	subs	r4, r4, r3
 80021b6:	eb65 0507 	sbc.w	r5, r5, r7
 80021ba:	01a9      	lsls	r1, r5, #6
 80021bc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80021c0:	01a0      	lsls	r0, r4, #6
 80021c2:	1b00      	subs	r0, r0, r4
 80021c4:	eb61 0105 	sbc.w	r1, r1, r5
 80021c8:	00cb      	lsls	r3, r1, #3
 80021ca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80021ce:	00c4      	lsls	r4, r0, #3
 80021d0:	19a0      	adds	r0, r4, r6
 80021d2:	eb43 0107 	adc.w	r1, r3, r7
 80021d6:	024b      	lsls	r3, r1, #9
 80021d8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80021dc:	0244      	lsls	r4, r0, #9
 80021de:	4620      	mov	r0, r4
 80021e0:	4619      	mov	r1, r3
 80021e2:	2300      	movs	r3, #0
 80021e4:	f7fe f80e 	bl	8000204 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021e8:	4b40      	ldr	r3, [pc, #256]	; (80022ec <HAL_RCC_GetSysClockFreq+0x174>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80021f0:	3301      	adds	r3, #1
 80021f2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80021f4:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80021f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <HAL_RCC_GetSysClockFreq+0x174>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002202:	461e      	mov	r6, r3
 8002204:	2700      	movs	r7, #0
 8002206:	015c      	lsls	r4, r3, #5
 8002208:	2500      	movs	r5, #0
 800220a:	1ae4      	subs	r4, r4, r3
 800220c:	eb65 0507 	sbc.w	r5, r5, r7
 8002210:	01a9      	lsls	r1, r5, #6
 8002212:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002216:	01a0      	lsls	r0, r4, #6
 8002218:	1b00      	subs	r0, r0, r4
 800221a:	eb61 0105 	sbc.w	r1, r1, r5
 800221e:	00cb      	lsls	r3, r1, #3
 8002220:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002224:	00c4      	lsls	r4, r0, #3
 8002226:	19a0      	adds	r0, r4, r6
 8002228:	eb43 0107 	adc.w	r1, r3, r7
 800222c:	028b      	lsls	r3, r1, #10
 800222e:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002232:	0284      	lsls	r4, r0, #10
 8002234:	4620      	mov	r0, r4
 8002236:	4619      	mov	r1, r3
 8002238:	2300      	movs	r3, #0
 800223a:	f7fd ffe3 	bl	8000204 <__aeabi_uldivmod>
 800223e:	e7d3      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x70>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_RCC_GetSysClockFreq+0x174>)
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800224e:	d028      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x12a>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002250:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_RCC_GetSysClockFreq+0x174>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002258:	461e      	mov	r6, r3
 800225a:	2700      	movs	r7, #0
 800225c:	015c      	lsls	r4, r3, #5
 800225e:	2500      	movs	r5, #0
 8002260:	1ae4      	subs	r4, r4, r3
 8002262:	eb65 0507 	sbc.w	r5, r5, r7
 8002266:	01a9      	lsls	r1, r5, #6
 8002268:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800226c:	01a0      	lsls	r0, r4, #6
 800226e:	1b00      	subs	r0, r0, r4
 8002270:	eb61 0105 	sbc.w	r1, r1, r5
 8002274:	00cb      	lsls	r3, r1, #3
 8002276:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800227a:	00c4      	lsls	r4, r0, #3
 800227c:	19a0      	adds	r0, r4, r6
 800227e:	eb43 0107 	adc.w	r1, r3, r7
 8002282:	024b      	lsls	r3, r1, #9
 8002284:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002288:	0244      	lsls	r4, r0, #9
 800228a:	4620      	mov	r0, r4
 800228c:	4619      	mov	r1, r3
 800228e:	2300      	movs	r3, #0
 8002290:	f7fd ffb8 	bl	8000204 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_RCC_GetSysClockFreq+0x174>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 800229c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80022a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_RCC_GetSysClockFreq+0x174>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80022aa:	461e      	mov	r6, r3
 80022ac:	2700      	movs	r7, #0
 80022ae:	015c      	lsls	r4, r3, #5
 80022b0:	2500      	movs	r5, #0
 80022b2:	1ae4      	subs	r4, r4, r3
 80022b4:	eb65 0507 	sbc.w	r5, r5, r7
 80022b8:	01a9      	lsls	r1, r5, #6
 80022ba:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80022be:	01a0      	lsls	r0, r4, #6
 80022c0:	1b00      	subs	r0, r0, r4
 80022c2:	eb61 0105 	sbc.w	r1, r1, r5
 80022c6:	00cb      	lsls	r3, r1, #3
 80022c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022cc:	00c4      	lsls	r4, r0, #3
 80022ce:	19a0      	adds	r0, r4, r6
 80022d0:	eb43 0107 	adc.w	r1, r3, r7
 80022d4:	028b      	lsls	r3, r1, #10
 80022d6:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80022da:	0284      	lsls	r4, r0, #10
 80022dc:	4620      	mov	r0, r4
 80022de:	4619      	mov	r1, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	f7fd ff8f 	bl	8000204 <__aeabi_uldivmod>
 80022e6:	e7d5      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x11c>
      sysclockfreq = HSE_VALUE;
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80022ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	00f42400 	.word	0x00f42400
 80022f4:	007a1200 	.word	0x007a1200

080022f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	6803      	ldr	r3, [r0, #0]
 8002300:	f013 0f01 	tst.w	r3, #1
 8002304:	d041      	beq.n	800238a <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002306:	4ba6      	ldr	r3, [pc, #664]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d032      	beq.n	8002378 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002312:	4ba3      	ldr	r3, [pc, #652]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d027      	beq.n	800236e <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4ba0      	ldr	r3, [pc, #640]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d059      	beq.n	80023de <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232a:	6863      	ldr	r3, [r4, #4]
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002330:	d05b      	beq.n	80023ea <HAL_RCC_OscConfig+0xf2>
 8002332:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002336:	d05e      	beq.n	80023f6 <HAL_RCC_OscConfig+0xfe>
 8002338:	4b99      	ldr	r3, [pc, #612]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002348:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800234a:	6863      	ldr	r3, [r4, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d05c      	beq.n	800240a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe ff32 	bl	80011b8 <HAL_GetTick>
 8002354:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b92      	ldr	r3, [pc, #584]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800235e:	d114      	bne.n	800238a <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe ff2a 	bl	80011b8 <HAL_GetTick>
 8002364:	1b40      	subs	r0, r0, r5
 8002366:	2864      	cmp	r0, #100	; 0x64
 8002368:	d9f5      	bls.n	8002356 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800236a:	2003      	movs	r0, #3
 800236c:	e19d      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800236e:	4b8c      	ldr	r3, [pc, #560]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002376:	d0d2      	beq.n	800231e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	4b89      	ldr	r3, [pc, #548]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002380:	d003      	beq.n	800238a <HAL_RCC_OscConfig+0x92>
 8002382:	6863      	ldr	r3, [r4, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 818d 	beq.w	80026a4 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	f013 0f02 	tst.w	r3, #2
 8002390:	d067      	beq.n	8002462 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002392:	4b83      	ldr	r3, [pc, #524]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f013 0f0c 	tst.w	r3, #12
 800239a:	d04a      	beq.n	8002432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800239c:	4b80      	ldr	r3, [pc, #512]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d03f      	beq.n	8002428 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a8:	4b7d      	ldr	r3, [pc, #500]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	d048      	beq.n	8002446 <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b4:	68e3      	ldr	r3, [r4, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d074      	beq.n	80024a4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ba:	2201      	movs	r2, #1
 80023bc:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fefa 	bl	80011b8 <HAL_GetTick>
 80023c4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f013 0f02 	tst.w	r3, #2
 80023ce:	d160      	bne.n	8002492 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d0:	f7fe fef2 	bl	80011b8 <HAL_GetTick>
 80023d4:	1b40      	subs	r0, r0, r5
 80023d6:	2802      	cmp	r0, #2
 80023d8:	d9f5      	bls.n	80023c6 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 80023da:	2003      	movs	r0, #3
 80023dc:	e165      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023de:	4b70      	ldr	r3, [pc, #448]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80023e6:	d0a0      	beq.n	800232a <HAL_RCC_OscConfig+0x32>
 80023e8:	e7c6      	b.n	8002378 <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	4a6d      	ldr	r2, [pc, #436]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 80023ec:	6813      	ldr	r3, [r2, #0]
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e7a9      	b.n	800234a <HAL_RCC_OscConfig+0x52>
 80023f6:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e79f      	b.n	800234a <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 800240a:	f7fe fed5 	bl	80011b8 <HAL_GetTick>
 800240e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002410:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002418:	d0b7      	beq.n	800238a <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241a:	f7fe fecd 	bl	80011b8 <HAL_GetTick>
 800241e:	1b40      	subs	r0, r0, r5
 8002420:	2864      	cmp	r0, #100	; 0x64
 8002422:	d9f5      	bls.n	8002410 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8002424:	2003      	movs	r0, #3
 8002426:	e140      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002428:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002430:	d1ba      	bne.n	80023a8 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f013 0f02 	tst.w	r3, #2
 800243a:	d00a      	beq.n	8002452 <HAL_RCC_OscConfig+0x15a>
 800243c:	68e3      	ldr	r3, [r4, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d007      	beq.n	8002452 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8002442:	2001      	movs	r0, #1
 8002444:	e131      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002446:	4b56      	ldr	r3, [pc, #344]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800244e:	d1b1      	bne.n	80023b4 <HAL_RCC_OscConfig+0xbc>
 8002450:	e7ef      	b.n	8002432 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	4a53      	ldr	r2, [pc, #332]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002454:	6813      	ldr	r3, [r2, #0]
 8002456:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800245a:	6921      	ldr	r1, [r4, #16]
 800245c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002460:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	f013 0f08 	tst.w	r3, #8
 8002468:	d040      	beq.n	80024ec <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800246a:	6963      	ldr	r3, [r4, #20]
 800246c:	b363      	cbz	r3, 80024c8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246e:	2201      	movs	r2, #1
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_RCC_OscConfig+0x2b0>)
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002474:	f7fe fea0 	bl	80011b8 <HAL_GetTick>
 8002478:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	f013 0f02 	tst.w	r3, #2
 8002482:	d133      	bne.n	80024ec <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002484:	f7fe fe98 	bl	80011b8 <HAL_GetTick>
 8002488:	1b40      	subs	r0, r0, r5
 800248a:	2802      	cmp	r0, #2
 800248c:	d9f5      	bls.n	800247a <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 800248e:	2003      	movs	r0, #3
 8002490:	e10b      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4a43      	ldr	r2, [pc, #268]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002494:	6813      	ldr	r3, [r2, #0]
 8002496:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800249a:	6921      	ldr	r1, [r4, #16]
 800249c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e7de      	b.n	8002462 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 80024a4:	2200      	movs	r2, #0
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024aa:	f7fe fe85 	bl	80011b8 <HAL_GetTick>
 80024ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f013 0f02 	tst.w	r3, #2
 80024b8:	d0d3      	beq.n	8002462 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe fe7d 	bl	80011b8 <HAL_GetTick>
 80024be:	1b40      	subs	r0, r0, r5
 80024c0:	2802      	cmp	r0, #2
 80024c2:	d9f5      	bls.n	80024b0 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80024c4:	2003      	movs	r0, #3
 80024c6:	e0f0      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c8:	2200      	movs	r2, #0
 80024ca:	4b37      	ldr	r3, [pc, #220]	; (80025a8 <HAL_RCC_OscConfig+0x2b0>)
 80024cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7fe fe73 	bl	80011b8 <HAL_GetTick>
 80024d2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d4:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 80024d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d8:	f013 0f02 	tst.w	r3, #2
 80024dc:	d006      	beq.n	80024ec <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024de:	f7fe fe6b 	bl	80011b8 <HAL_GetTick>
 80024e2:	1b40      	subs	r0, r0, r5
 80024e4:	2802      	cmp	r0, #2
 80024e6:	d9f5      	bls.n	80024d4 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 80024e8:	2003      	movs	r0, #3
 80024ea:	e0de      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	f013 0f04 	tst.w	r3, #4
 80024f2:	d079      	beq.n	80025e8 <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f4:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80024fc:	d133      	bne.n	8002566 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002506:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002516:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_RCC_OscConfig+0x2b4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002520:	d023      	beq.n	800256a <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002522:	68a3      	ldr	r3, [r4, #8]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d034      	beq.n	8002592 <HAL_RCC_OscConfig+0x29a>
 8002528:	2b05      	cmp	r3, #5
 800252a:	d041      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2b8>
 800252c:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 800252e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002530:	f022 0201 	bic.w	r2, r2, #1
 8002534:	671a      	str	r2, [r3, #112]	; 0x70
 8002536:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002538:	f022 0204 	bic.w	r2, r2, #4
 800253c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800253e:	68a3      	ldr	r3, [r4, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d03f      	beq.n	80025c4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002544:	f7fe fe38 	bl	80011b8 <HAL_GetTick>
 8002548:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	f013 0f02 	tst.w	r3, #2
 8002552:	d148      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe fe30 	bl	80011b8 <HAL_GetTick>
 8002558:	1b80      	subs	r0, r0, r6
 800255a:	f241 3388 	movw	r3, #5000	; 0x1388
 800255e:	4298      	cmp	r0, r3
 8002560:	d9f3      	bls.n	800254a <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 8002562:	2003      	movs	r0, #3
 8002564:	e0a1      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2500      	movs	r5, #0
 8002568:	e7d6      	b.n	8002518 <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_RCC_OscConfig+0x2b4>)
 800256c:	6813      	ldr	r3, [r2, #0]
 800256e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002572:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002574:	f7fe fe20 	bl	80011b8 <HAL_GetTick>
 8002578:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_RCC_OscConfig+0x2b4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002582:	d1ce      	bne.n	8002522 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002584:	f7fe fe18 	bl	80011b8 <HAL_GetTick>
 8002588:	1b80      	subs	r0, r0, r6
 800258a:	2802      	cmp	r0, #2
 800258c:	d9f5      	bls.n	800257a <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 800258e:	2003      	movs	r0, #3
 8002590:	e08b      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002592:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <HAL_RCC_OscConfig+0x2a8>)
 8002594:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
 800259c:	e7cf      	b.n	800253e <HAL_RCC_OscConfig+0x246>
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	42470000 	.word	0x42470000
 80025a8:	42470e80 	.word	0x42470e80
 80025ac:	40007000 	.word	0x40007000
 80025b0:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_RCC_OscConfig+0x3bc>)
 80025b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025b4:	f042 0204 	orr.w	r2, r2, #4
 80025b8:	671a      	str	r2, [r3, #112]	; 0x70
 80025ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	671a      	str	r2, [r3, #112]	; 0x70
 80025c2:	e7bc      	b.n	800253e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7fe fdf8 	bl	80011b8 <HAL_GetTick>
 80025c8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ca:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <HAL_RCC_OscConfig+0x3bc>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	f013 0f02 	tst.w	r3, #2
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d4:	f7fe fdf0 	bl	80011b8 <HAL_GetTick>
 80025d8:	1b80      	subs	r0, r0, r6
 80025da:	f241 3388 	movw	r3, #5000	; 0x1388
 80025de:	4298      	cmp	r0, r3
 80025e0:	d9f3      	bls.n	80025ca <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80025e2:	2003      	movs	r0, #3
 80025e4:	e061      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e6:	b9e5      	cbnz	r5, 8002622 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e8:	69a3      	ldr	r3, [r4, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d05c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ee:	4a31      	ldr	r2, [pc, #196]	; (80026b4 <HAL_RCC_OscConfig+0x3bc>)
 80025f0:	6892      	ldr	r2, [r2, #8]
 80025f2:	f002 020c 	and.w	r2, r2, #12
 80025f6:	2a08      	cmp	r2, #8
 80025f8:	d059      	beq.n	80026ae <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d017      	beq.n	800262e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fe:	2200      	movs	r2, #0
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_OscConfig+0x3c0>)
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fdd8 	bl	80011b8 <HAL_GetTick>
 8002608:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260a:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_OscConfig+0x3bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002612:	d045      	beq.n	80026a0 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fdd0 	bl	80011b8 <HAL_GetTick>
 8002618:	1b00      	subs	r0, r0, r4
 800261a:	2802      	cmp	r0, #2
 800261c:	d9f5      	bls.n	800260a <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 800261e:	2003      	movs	r0, #3
 8002620:	e043      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002622:	4a24      	ldr	r2, [pc, #144]	; (80026b4 <HAL_RCC_OscConfig+0x3bc>)
 8002624:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262a:	6413      	str	r3, [r2, #64]	; 0x40
 800262c:	e7dc      	b.n	80025e8 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 800262e:	2200      	movs	r2, #0
 8002630:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_RCC_OscConfig+0x3c0>)
 8002632:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002634:	f7fe fdc0 	bl	80011b8 <HAL_GetTick>
 8002638:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_RCC_OscConfig+0x3bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002642:	d006      	beq.n	8002652 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fdb8 	bl	80011b8 <HAL_GetTick>
 8002648:	1b40      	subs	r0, r0, r5
 800264a:	2802      	cmp	r0, #2
 800264c:	d9f5      	bls.n	800263a <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 800264e:	2003      	movs	r0, #3
 8002650:	e02b      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002652:	69e3      	ldr	r3, [r4, #28]
 8002654:	6a22      	ldr	r2, [r4, #32]
 8002656:	4313      	orrs	r3, r2
 8002658:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800265a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800265e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002660:	0852      	lsrs	r2, r2, #1
 8002662:	3a01      	subs	r2, #1
 8002664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002668:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800266a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800266e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002670:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002674:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_RCC_OscConfig+0x3bc>)
 8002676:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002678:	2201      	movs	r2, #1
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_RCC_OscConfig+0x3c0>)
 800267c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800267e:	f7fe fd9b 	bl	80011b8 <HAL_GetTick>
 8002682:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_OscConfig+0x3bc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fd93 	bl	80011b8 <HAL_GetTick>
 8002692:	1b00      	subs	r0, r0, r4
 8002694:	2802      	cmp	r0, #2
 8002696:	d9f5      	bls.n	8002684 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8002698:	2003      	movs	r0, #3
 800269a:	e006      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800269c:	2000      	movs	r0, #0
 800269e:	e004      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
 80026a0:	2000      	movs	r0, #0
 80026a2:	e002      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 80026a8:	2000      	movs	r0, #0
}
 80026aa:	b002      	add	sp, #8
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80026ae:	2001      	movs	r0, #1
 80026b0:	e7fb      	b.n	80026aa <HAL_RCC_OscConfig+0x3b2>
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	42470060 	.word	0x42470060

080026bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	4770      	bx	lr

080026be <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026be:	4770      	bx	lr

080026c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIM_IRQHandler>:
{
 80026c4:	b510      	push	{r4, lr}
 80026c6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c8:	6803      	ldr	r3, [r0, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	f012 0f02 	tst.w	r2, #2
 80026d0:	d011      	beq.n	80026f6 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	f012 0f02 	tst.w	r2, #2
 80026d8:	d00d      	beq.n	80026f6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026da:	f06f 0202 	mvn.w	r2, #2
 80026de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e0:	2301      	movs	r3, #1
 80026e2:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e4:	6803      	ldr	r3, [r0, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f013 0f03 	tst.w	r3, #3
 80026ec:	d070      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80026ee:	f7ff ffe6 	bl	80026be <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	2300      	movs	r3, #0
 80026f4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	f012 0f04 	tst.w	r2, #4
 80026fe:	d012      	beq.n	8002726 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	f012 0f04 	tst.w	r2, #4
 8002706:	d00e      	beq.n	8002726 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002708:	f06f 0204 	mvn.w	r2, #4
 800270c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800270e:	2302      	movs	r3, #2
 8002710:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f413 7f40 	tst.w	r3, #768	; 0x300
 800271a:	d05f      	beq.n	80027dc <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff ffce 	bl	80026be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	2300      	movs	r3, #0
 8002724:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	f012 0f08 	tst.w	r2, #8
 800272e:	d012      	beq.n	8002756 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	f012 0f08 	tst.w	r2, #8
 8002736:	d00e      	beq.n	8002756 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002738:	f06f 0208 	mvn.w	r2, #8
 800273c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800273e:	2304      	movs	r3, #4
 8002740:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f013 0f03 	tst.w	r3, #3
 800274a:	d04e      	beq.n	80027ea <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800274c:	4620      	mov	r0, r4
 800274e:	f7ff ffb6 	bl	80026be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	2300      	movs	r3, #0
 8002754:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	f012 0f10 	tst.w	r2, #16
 800275e:	d012      	beq.n	8002786 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	f012 0f10 	tst.w	r2, #16
 8002766:	d00e      	beq.n	8002786 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002768:	f06f 0210 	mvn.w	r2, #16
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800276e:	2308      	movs	r3, #8
 8002770:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f413 7f40 	tst.w	r3, #768	; 0x300
 800277a:	d03d      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff ff9e 	bl	80026be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	2300      	movs	r3, #0
 8002784:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	f012 0f01 	tst.w	r2, #1
 800278e:	d003      	beq.n	8002798 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	f012 0f01 	tst.w	r2, #1
 8002796:	d136      	bne.n	8002806 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027a8:	d134      	bne.n	8002814 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027b2:	d003      	beq.n	80027bc <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027ba:	d132      	bne.n	8002822 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	f012 0f20 	tst.w	r2, #32
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	f012 0f20 	tst.w	r2, #32
 80027cc:	d130      	bne.n	8002830 <HAL_TIM_IRQHandler+0x16c>
 80027ce:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d0:	f7ff ff74 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	4620      	mov	r0, r4
 80027d6:	f7ff ff73 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80027da:	e78a      	b.n	80026f2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027dc:	4620      	mov	r0, r4
 80027de:	f7ff ff6d 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff ff6c 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80027e8:	e79b      	b.n	8002722 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	4620      	mov	r0, r4
 80027ec:	f7ff ff66 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff ff65 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80027f6:	e7ac      	b.n	8002752 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff ff5f 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff ff5e 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002804:	e7bd      	b.n	8002782 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002806:	f06f 0201 	mvn.w	r2, #1
 800280a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800280c:	4620      	mov	r0, r4
 800280e:	f7fe f85f 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
 8002812:	e7c1      	b.n	8002798 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002818:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800281a:	4620      	mov	r0, r4
 800281c:	f000 f810 	bl	8002840 <HAL_TIMEx_BreakCallback>
 8002820:	e7c3      	b.n	80027aa <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002822:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002826:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002828:	4620      	mov	r0, r4
 800282a:	f7ff ff4a 	bl	80026c2 <HAL_TIM_TriggerCallback>
 800282e:	e7c5      	b.n	80027bc <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002830:	f06f 0220 	mvn.w	r2, #32
 8002834:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002836:	4620      	mov	r0, r4
 8002838:	f000 f801 	bl	800283e <HAL_TIMEx_CommutationCallback>
}
 800283c:	e7c7      	b.n	80027ce <HAL_TIM_IRQHandler+0x10a>

0800283e <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800283e:	4770      	bx	lr

08002840 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002840:	4770      	bx	lr

08002842 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002842:	6802      	ldr	r2, [r0, #0]
 8002844:	68d3      	ldr	r3, [r2, #12]
 8002846:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800284a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284c:	6802      	ldr	r2, [r0, #0]
 800284e:	6953      	ldr	r3, [r2, #20]
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002856:	2320      	movs	r3, #32
 8002858:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800285c:	4770      	bx	lr

0800285e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800285e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b21      	cmp	r3, #33	; 0x21
 8002866:	d001      	beq.n	800286c <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002868:	2002      	movs	r0, #2
 800286a:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800286c:	6883      	ldr	r3, [r0, #8]
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002872:	d017      	beq.n	80028a4 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002874:	6802      	ldr	r2, [r0, #0]
 8002876:	6a03      	ldr	r3, [r0, #32]
 8002878:	1c59      	adds	r1, r3, #1
 800287a:	6201      	str	r1, [r0, #32]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8002880:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29b      	uxth	r3, r3
 8002888:	84c3      	strh	r3, [r0, #38]	; 0x26
 800288a:	b9db      	cbnz	r3, 80028c4 <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800288c:	6802      	ldr	r2, [r0, #0]
 800288e:	68d3      	ldr	r3, [r2, #12]
 8002890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002894:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002896:	6802      	ldr	r2, [r0, #0]
 8002898:	68d3      	ldr	r3, [r2, #12]
 800289a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289e:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80028a0:	2000      	movs	r0, #0
 80028a2:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80028a4:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028a6:	6802      	ldr	r2, [r0, #0]
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ae:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80028b0:	6903      	ldr	r3, [r0, #16]
 80028b2:	b91b      	cbnz	r3, 80028bc <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 80028b4:	6a03      	ldr	r3, [r0, #32]
 80028b6:	3302      	adds	r3, #2
 80028b8:	6203      	str	r3, [r0, #32]
 80028ba:	e7e1      	b.n	8002880 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 80028bc:	6a03      	ldr	r3, [r0, #32]
 80028be:	3301      	adds	r3, #1
 80028c0:	6203      	str	r3, [r0, #32]
 80028c2:	e7dd      	b.n	8002880 <UART_Transmit_IT+0x22>
    return HAL_OK;
 80028c4:	2000      	movs	r0, #0
  }
}
 80028c6:	4770      	bx	lr

080028c8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028cc:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80028ce:	6802      	ldr	r2, [r0, #0]
 80028d0:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80028d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80028d6:	68c1      	ldr	r1, [r0, #12]
 80028d8:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80028da:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80028dc:	6801      	ldr	r1, [r0, #0]
 80028de:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80028e0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028e4:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028e8:	6882      	ldr	r2, [r0, #8]
 80028ea:	6900      	ldr	r0, [r0, #16]
 80028ec:	4302      	orrs	r2, r0
 80028ee:	6960      	ldr	r0, [r4, #20]
 80028f0:	4302      	orrs	r2, r0
 80028f2:	69e0      	ldr	r0, [r4, #28]
 80028f4:	4302      	orrs	r2, r0
 80028f6:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80028f8:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80028fa:	6822      	ldr	r2, [r4, #0]
 80028fc:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80028fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002902:	69a1      	ldr	r1, [r4, #24]
 8002904:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002906:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002908:	69e3      	ldr	r3, [r4, #28]
 800290a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290e:	d062      	beq.n	80029d6 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002910:	f8d4 8000 	ldr.w	r8, [r4]
 8002914:	4bbb      	ldr	r3, [pc, #748]	; (8002c04 <UART_SetConfig+0x33c>)
 8002916:	4598      	cmp	r8, r3
 8002918:	f000 811b 	beq.w	8002b52 <UART_SetConfig+0x28a>
 800291c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002920:	4598      	cmp	r8, r3
 8002922:	f000 8116 	beq.w	8002b52 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002926:	f7ff fc07 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 800292a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800292e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002932:	6865      	ldr	r5, [r4, #4]
 8002934:	00ad      	lsls	r5, r5, #2
 8002936:	fbb0 f5f5 	udiv	r5, r0, r5
 800293a:	4fb3      	ldr	r7, [pc, #716]	; (8002c08 <UART_SetConfig+0x340>)
 800293c:	fba7 3505 	umull	r3, r5, r7, r5
 8002940:	096d      	lsrs	r5, r5, #5
 8002942:	012e      	lsls	r6, r5, #4
 8002944:	f7ff fbf8 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002948:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800294c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002950:	6865      	ldr	r5, [r4, #4]
 8002952:	00ad      	lsls	r5, r5, #2
 8002954:	fbb0 faf5 	udiv	sl, r0, r5
 8002958:	f7ff fbee 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 800295c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002960:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002964:	6865      	ldr	r5, [r4, #4]
 8002966:	00ad      	lsls	r5, r5, #2
 8002968:	fbb0 f5f5 	udiv	r5, r0, r5
 800296c:	fba7 3505 	umull	r3, r5, r7, r5
 8002970:	096d      	lsrs	r5, r5, #5
 8002972:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002976:	fb09 a515 	mls	r5, r9, r5, sl
 800297a:	012d      	lsls	r5, r5, #4
 800297c:	3532      	adds	r5, #50	; 0x32
 800297e:	fba7 3505 	umull	r3, r5, r7, r5
 8002982:	096d      	lsrs	r5, r5, #5
 8002984:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002988:	4435      	add	r5, r6
 800298a:	f7ff fbd5 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 800298e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002992:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002996:	6866      	ldr	r6, [r4, #4]
 8002998:	00b6      	lsls	r6, r6, #2
 800299a:	fbb0 f6f6 	udiv	r6, r0, r6
 800299e:	f7ff fbcb 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 80029a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029aa:	6863      	ldr	r3, [r4, #4]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80029b2:	fba7 3000 	umull	r3, r0, r7, r0
 80029b6:	0940      	lsrs	r0, r0, #5
 80029b8:	fb09 6910 	mls	r9, r9, r0, r6
 80029bc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80029c0:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80029c4:	fba7 3709 	umull	r3, r7, r7, r9
 80029c8:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80029cc:	442f      	add	r7, r5
 80029ce:	f8c8 7008 	str.w	r7, [r8, #8]
 80029d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80029d6:	f8d4 8000 	ldr.w	r8, [r4]
 80029da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029de:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80029e2:	4598      	cmp	r8, r3
 80029e4:	d05c      	beq.n	8002aa0 <UART_SetConfig+0x1d8>
 80029e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ea:	4598      	cmp	r8, r3
 80029ec:	d058      	beq.n	8002aa0 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80029ee:	f7ff fba3 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 80029f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029fa:	6865      	ldr	r5, [r4, #4]
 80029fc:	006d      	lsls	r5, r5, #1
 80029fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8002a02:	4f81      	ldr	r7, [pc, #516]	; (8002c08 <UART_SetConfig+0x340>)
 8002a04:	fba7 3505 	umull	r3, r5, r7, r5
 8002a08:	096d      	lsrs	r5, r5, #5
 8002a0a:	012e      	lsls	r6, r5, #4
 8002a0c:	f7ff fb94 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002a10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a18:	6865      	ldr	r5, [r4, #4]
 8002a1a:	006d      	lsls	r5, r5, #1
 8002a1c:	fbb0 faf5 	udiv	sl, r0, r5
 8002a20:	f7ff fb8a 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002a24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a2c:	6865      	ldr	r5, [r4, #4]
 8002a2e:	006d      	lsls	r5, r5, #1
 8002a30:	fbb0 f5f5 	udiv	r5, r0, r5
 8002a34:	fba7 3505 	umull	r3, r5, r7, r5
 8002a38:	096d      	lsrs	r5, r5, #5
 8002a3a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002a3e:	fb09 a515 	mls	r5, r9, r5, sl
 8002a42:	00ed      	lsls	r5, r5, #3
 8002a44:	3532      	adds	r5, #50	; 0x32
 8002a46:	fba7 3505 	umull	r3, r5, r7, r5
 8002a4a:	096d      	lsrs	r5, r5, #5
 8002a4c:	006d      	lsls	r5, r5, #1
 8002a4e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002a52:	4435      	add	r5, r6
 8002a54:	f7ff fb70 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002a58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a60:	6866      	ldr	r6, [r4, #4]
 8002a62:	0076      	lsls	r6, r6, #1
 8002a64:	fbb0 f6f6 	udiv	r6, r0, r6
 8002a68:	f7ff fb66 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a74:	6863      	ldr	r3, [r4, #4]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7c:	fba7 2303 	umull	r2, r3, r7, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	fb09 6913 	mls	r9, r9, r3, r6
 8002a86:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002a8a:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002a8e:	fba7 3709 	umull	r3, r7, r7, r9
 8002a92:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002a96:	442f      	add	r7, r5
 8002a98:	f8c8 7008 	str.w	r7, [r8, #8]
 8002a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002aa0:	f7ff fb5a 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002aa4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002aa8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002aac:	6865      	ldr	r5, [r4, #4]
 8002aae:	006d      	lsls	r5, r5, #1
 8002ab0:	fbb0 f5f5 	udiv	r5, r0, r5
 8002ab4:	4f54      	ldr	r7, [pc, #336]	; (8002c08 <UART_SetConfig+0x340>)
 8002ab6:	fba7 3505 	umull	r3, r5, r7, r5
 8002aba:	096d      	lsrs	r5, r5, #5
 8002abc:	012e      	lsls	r6, r5, #4
 8002abe:	f7ff fb4b 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002ac2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ac6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002aca:	6865      	ldr	r5, [r4, #4]
 8002acc:	006d      	lsls	r5, r5, #1
 8002ace:	fbb0 faf5 	udiv	sl, r0, r5
 8002ad2:	f7ff fb41 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ada:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ade:	6865      	ldr	r5, [r4, #4]
 8002ae0:	006d      	lsls	r5, r5, #1
 8002ae2:	fbb0 f5f5 	udiv	r5, r0, r5
 8002ae6:	fba7 3505 	umull	r3, r5, r7, r5
 8002aea:	096d      	lsrs	r5, r5, #5
 8002aec:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002af0:	fb09 a515 	mls	r5, r9, r5, sl
 8002af4:	00ed      	lsls	r5, r5, #3
 8002af6:	3532      	adds	r5, #50	; 0x32
 8002af8:	fba7 3505 	umull	r3, r5, r7, r5
 8002afc:	096d      	lsrs	r5, r5, #5
 8002afe:	006d      	lsls	r5, r5, #1
 8002b00:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002b04:	4435      	add	r5, r6
 8002b06:	f7ff fb27 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002b0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b12:	6866      	ldr	r6, [r4, #4]
 8002b14:	0076      	lsls	r6, r6, #1
 8002b16:	fbb0 f6f6 	udiv	r6, r0, r6
 8002b1a:	f7ff fb1d 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002b1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b26:	6863      	ldr	r3, [r4, #4]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	fba7 2303 	umull	r2, r3, r7, r3
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	fb09 6913 	mls	r9, r9, r3, r6
 8002b38:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002b3c:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002b40:	fba7 3709 	umull	r3, r7, r7, r9
 8002b44:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002b48:	442f      	add	r7, r5
 8002b4a:	f8c8 7008 	str.w	r7, [r8, #8]
 8002b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b52:	f7ff fb01 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002b56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b5e:	6865      	ldr	r5, [r4, #4]
 8002b60:	00ad      	lsls	r5, r5, #2
 8002b62:	fbb0 f5f5 	udiv	r5, r0, r5
 8002b66:	4f28      	ldr	r7, [pc, #160]	; (8002c08 <UART_SetConfig+0x340>)
 8002b68:	fba7 3505 	umull	r3, r5, r7, r5
 8002b6c:	096d      	lsrs	r5, r5, #5
 8002b6e:	012e      	lsls	r6, r5, #4
 8002b70:	f7ff faf2 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002b74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b7c:	6865      	ldr	r5, [r4, #4]
 8002b7e:	00ad      	lsls	r5, r5, #2
 8002b80:	fbb0 faf5 	udiv	sl, r0, r5
 8002b84:	f7ff fae8 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002b88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b90:	6865      	ldr	r5, [r4, #4]
 8002b92:	00ad      	lsls	r5, r5, #2
 8002b94:	fbb0 f5f5 	udiv	r5, r0, r5
 8002b98:	fba7 3505 	umull	r3, r5, r7, r5
 8002b9c:	096d      	lsrs	r5, r5, #5
 8002b9e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002ba2:	fb09 a515 	mls	r5, r9, r5, sl
 8002ba6:	012d      	lsls	r5, r5, #4
 8002ba8:	3532      	adds	r5, #50	; 0x32
 8002baa:	fba7 3505 	umull	r3, r5, r7, r5
 8002bae:	096d      	lsrs	r5, r5, #5
 8002bb0:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002bb4:	4435      	add	r5, r6
 8002bb6:	f7ff facf 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002bba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bc2:	6866      	ldr	r6, [r4, #4]
 8002bc4:	00b6      	lsls	r6, r6, #2
 8002bc6:	fbb0 f6f6 	udiv	r6, r0, r6
 8002bca:	f7ff fac5 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002bce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bd6:	6863      	ldr	r3, [r4, #4]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bde:	fba7 2303 	umull	r2, r3, r7, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	fb09 6913 	mls	r9, r9, r3, r6
 8002be8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8002bec:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002bf0:	fba7 3709 	umull	r3, r7, r7, r9
 8002bf4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002bf8:	442f      	add	r7, r5
 8002bfa:	f8c8 7008 	str.w	r7, [r8, #8]
 8002bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c02:	bf00      	nop
 8002c04:	40011000 	.word	0x40011000
 8002c08:	51eb851f 	.word	0x51eb851f

08002c0c <HAL_UART_Init>:
  if(huart == NULL)
 8002c0c:	b358      	cbz	r0, 8002c66 <HAL_UART_Init+0x5a>
{
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c12:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c16:	b30b      	cbz	r3, 8002c5c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c18:	2324      	movs	r3, #36	; 0x24
 8002c1a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002c1e:	6822      	ldr	r2, [r4, #0]
 8002c20:	68d3      	ldr	r3, [r2, #12]
 8002c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c26:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7ff fe4d 	bl	80028c8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	6913      	ldr	r3, [r2, #16]
 8002c32:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002c36:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c38:	6822      	ldr	r2, [r4, #0]
 8002c3a:	6953      	ldr	r3, [r2, #20]
 8002c3c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002c40:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	68d3      	ldr	r3, [r2, #12]
 8002c46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c4a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002c50:	2320      	movs	r3, #32
 8002c52:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002c56:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002c5a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002c5c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002c60:	f7fe f86c 	bl	8000d3c <HAL_UART_MspInit>
 8002c64:	e7d8      	b.n	8002c18 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002c66:	2001      	movs	r0, #1
 8002c68:	4770      	bx	lr

08002c6a <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8002c6a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d001      	beq.n	8002c78 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;   
 8002c74:	2002      	movs	r0, #2
 8002c76:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0)) 
 8002c78:	b1a9      	cbz	r1, 8002ca6 <HAL_UART_Transmit_IT+0x3c>
 8002c7a:	b1b2      	cbz	r2, 8002caa <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8002c7c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d014      	beq.n	8002cae <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8002c84:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8002c86:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c88:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c8e:	2221      	movs	r2, #33	; 0x21
 8002c90:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002c94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002c98:	6801      	ldr	r1, [r0, #0]
 8002c9a:	68ca      	ldr	r2, [r1, #12]
 8002c9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ca0:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	4770      	bx	lr
      return HAL_ERROR;
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	4770      	bx	lr
 8002caa:	2001      	movs	r0, #1
 8002cac:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002cae:	2002      	movs	r0, #2
}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002cb2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d001      	beq.n	8002cc0 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY; 
 8002cbc:	2002      	movs	r0, #2
 8002cbe:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0)) 
 8002cc0:	b1d1      	cbz	r1, 8002cf8 <HAL_UART_Receive_IT+0x46>
 8002cc2:	b1da      	cbz	r2, 8002cfc <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8002cc4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d019      	beq.n	8002d00 <HAL_UART_Receive_IT+0x4e>
    huart->pRxBuffPtr = pData;
 8002ccc:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002cce:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002cd0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cd6:	2222      	movs	r2, #34	; 0x22
 8002cd8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8002cdc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce0:	6801      	ldr	r1, [r0, #0]
 8002ce2:	694a      	ldr	r2, [r1, #20]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002cea:	6801      	ldr	r1, [r0, #0]
 8002cec:	68ca      	ldr	r2, [r1, #12]
 8002cee:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002cf2:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	4770      	bx	lr
      return HAL_ERROR;
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	4770      	bx	lr
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002d00:	2002      	movs	r0, #2
}
 8002d02:	4770      	bx	lr

08002d04 <UART_EndTransmit_IT>:
{
 8002d04:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d06:	6801      	ldr	r1, [r0, #0]
 8002d08:	68cb      	ldr	r3, [r1, #12]
 8002d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d0e:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002d10:	2320      	movs	r3, #32
 8002d12:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002d16:	f7fd fecf 	bl	8000ab8 <HAL_UART_TxCpltCallback>
}
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	bd08      	pop	{r3, pc}

08002d1e <UART_Receive_IT>:
{
 8002d1e:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002d20:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b22      	cmp	r3, #34	; 0x22
 8002d28:	d001      	beq.n	8002d2e <UART_Receive_IT+0x10>
    return HAL_BUSY;
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d2e:	6883      	ldr	r3, [r0, #8]
 8002d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d34:	d00f      	beq.n	8002d56 <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d36:	6903      	ldr	r3, [r0, #16]
 8002d38:	bb0b      	cbnz	r3, 8002d7e <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	6282      	str	r2, [r0, #40]	; 0x28
 8002d40:	6802      	ldr	r2, [r0, #0]
 8002d42:	6852      	ldr	r2, [r2, #4]
 8002d44:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8002d46:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002d50:	b1f3      	cbz	r3, 8002d90 <UART_Receive_IT+0x72>
    return HAL_OK;
 8002d52:	2000      	movs	r0, #0
}
 8002d54:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002d56:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d58:	6903      	ldr	r3, [r0, #16]
 8002d5a:	b943      	cbnz	r3, 8002d6e <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d5c:	6803      	ldr	r3, [r0, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d64:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002d66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d68:	3302      	adds	r3, #2
 8002d6a:	6283      	str	r3, [r0, #40]	; 0x28
 8002d6c:	e7eb      	b.n	8002d46 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d6e:	6803      	ldr	r3, [r0, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002d76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d78:	3301      	adds	r3, #1
 8002d7a:	6283      	str	r3, [r0, #40]	; 0x28
 8002d7c:	e7e3      	b.n	8002d46 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d7e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002d80:	1c53      	adds	r3, r2, #1
 8002d82:	6283      	str	r3, [r0, #40]	; 0x28
 8002d84:	6803      	ldr	r3, [r0, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d8c:	7013      	strb	r3, [r2, #0]
 8002d8e:	e7da      	b.n	8002d46 <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d90:	6802      	ldr	r2, [r0, #0]
 8002d92:	68d3      	ldr	r3, [r2, #12]
 8002d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d98:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	6802      	ldr	r2, [r0, #0]
 8002d9c:	6953      	ldr	r3, [r2, #20]
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002da4:	2320      	movs	r3, #32
 8002da6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002daa:	f7fd ffa9 	bl	8000d00 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002dae:	2000      	movs	r0, #0
 8002db0:	bd08      	pop	{r3, pc}

08002db2 <HAL_UART_ErrorCallback>:
{
 8002db2:	4770      	bx	lr

08002db4 <HAL_UART_IRQHandler>:
{
 8002db4:	b510      	push	{r4, lr}
 8002db6:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002db8:	6802      	ldr	r2, [r0, #0]
 8002dba:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dbc:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dbe:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8002dc0:	f013 000f 	ands.w	r0, r3, #15
 8002dc4:	d105      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dc6:	f013 0f20 	tst.w	r3, #32
 8002dca:	d002      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x1e>
 8002dcc:	f011 0f20 	tst.w	r1, #32
 8002dd0:	d153      	bne.n	8002e7a <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d067      	beq.n	8002ea6 <HAL_UART_IRQHandler+0xf2>
 8002dd6:	f012 0201 	ands.w	r2, r2, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_UART_IRQHandler+0x2e>
 8002ddc:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002de0:	d061      	beq.n	8002ea6 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002de2:	f013 0f01 	tst.w	r3, #1
 8002de6:	d006      	beq.n	8002df6 <HAL_UART_IRQHandler+0x42>
 8002de8:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002dec:	d003      	beq.n	8002df6 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002df0:	f040 0001 	orr.w	r0, r0, #1
 8002df4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df6:	f013 0f04 	tst.w	r3, #4
 8002dfa:	d004      	beq.n	8002e06 <HAL_UART_IRQHandler+0x52>
 8002dfc:	b11a      	cbz	r2, 8002e06 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dfe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e00:	f040 0002 	orr.w	r0, r0, #2
 8002e04:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e06:	f013 0f02 	tst.w	r3, #2
 8002e0a:	d004      	beq.n	8002e16 <HAL_UART_IRQHandler+0x62>
 8002e0c:	b11a      	cbz	r2, 8002e16 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e10:	f040 0004 	orr.w	r0, r0, #4
 8002e14:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e16:	f013 0f08 	tst.w	r3, #8
 8002e1a:	d004      	beq.n	8002e26 <HAL_UART_IRQHandler+0x72>
 8002e1c:	b11a      	cbz	r2, 8002e26 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e20:	f042 0208 	orr.w	r2, r2, #8
 8002e24:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e26:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d048      	beq.n	8002ebe <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e2c:	f013 0f20 	tst.w	r3, #32
 8002e30:	d002      	beq.n	8002e38 <HAL_UART_IRQHandler+0x84>
 8002e32:	f011 0f20 	tst.w	r1, #32
 8002e36:	d124      	bne.n	8002e82 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e42:	f012 0f08 	tst.w	r2, #8
 8002e46:	d100      	bne.n	8002e4a <HAL_UART_IRQHandler+0x96>
 8002e48:	b33b      	cbz	r3, 8002e9a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff fcf9 	bl	8002842 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e58:	d01b      	beq.n	8002e92 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e60:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e64:	b18b      	cbz	r3, 8002e8a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <HAL_UART_IRQHandler+0x11c>)
 8002e68:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e6a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002e6c:	f7fe fec4 	bl	8001bf8 <HAL_DMA_Abort_IT>
 8002e70:	b328      	cbz	r0, 8002ebe <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e72:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002e74:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002e76:	4798      	blx	r3
 8002e78:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff ff4f 	bl	8002d1e <UART_Receive_IT>
      return;
 8002e80:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff ff4b 	bl	8002d1e <UART_Receive_IT>
 8002e88:	e7d6      	b.n	8002e38 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff ff91 	bl	8002db2 <HAL_UART_ErrorCallback>
 8002e90:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8002e92:	4620      	mov	r0, r4
 8002e94:	f7ff ff8d 	bl	8002db2 <HAL_UART_ErrorCallback>
 8002e98:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f7ff ff89 	bl	8002db2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002ea4:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ea6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002eaa:	d002      	beq.n	8002eb2 <HAL_UART_IRQHandler+0xfe>
 8002eac:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002eb0:	d106      	bne.n	8002ec0 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eb2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002eb6:	d002      	beq.n	8002ebe <HAL_UART_IRQHandler+0x10a>
 8002eb8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002ebc:	d104      	bne.n	8002ec8 <HAL_UART_IRQHandler+0x114>
 8002ebe:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f7ff fccc 	bl	800285e <UART_Transmit_IT>
    return;
 8002ec6:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7ff ff1b 	bl	8002d04 <UART_EndTransmit_IT>
    return;
 8002ece:	e7f6      	b.n	8002ebe <HAL_UART_IRQHandler+0x10a>
 8002ed0:	08002ed5 	.word	0x08002ed5

08002ed4 <UART_DMAAbortOnError>:
{
 8002ed4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ed6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002edc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002ede:	f7ff ff68 	bl	8002db2 <HAL_UART_ErrorCallback>
 8002ee2:	bd08      	pop	{r3, pc}

08002ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eea:	e003      	b.n	8002ef4 <LoopCopyDataInit>

08002eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ef2:	3104      	adds	r1, #4

08002ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ef4:	480b      	ldr	r0, [pc, #44]	; (8002f24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002efc:	d3f6      	bcc.n	8002eec <CopyDataInit>
  ldr  r2, =_sbss
 8002efe:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f00:	e002      	b.n	8002f08 <LoopFillZerobss>

08002f02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f04:	f842 3b04 	str.w	r3, [r2], #4

08002f08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f0c:	d3f9      	bcc.n	8002f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f0e:	f7fe f8e1 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f12:	f000 f811 	bl	8002f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f16:	f7fe f815 	bl	8000f44 <main>
  bx  lr    
 8002f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f20:	0800300c 	.word	0x0800300c
  ldr  r0, =_sdata
 8002f24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f28:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002f2c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002f30:	20000cb0 	.word	0x20000cb0

08002f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f34:	e7fe      	b.n	8002f34 <ADC_IRQHandler>
	...

08002f38 <__libc_init_array>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	4e0d      	ldr	r6, [pc, #52]	; (8002f70 <__libc_init_array+0x38>)
 8002f3c:	4c0d      	ldr	r4, [pc, #52]	; (8002f74 <__libc_init_array+0x3c>)
 8002f3e:	1ba4      	subs	r4, r4, r6
 8002f40:	10a4      	asrs	r4, r4, #2
 8002f42:	2500      	movs	r5, #0
 8002f44:	42a5      	cmp	r5, r4
 8002f46:	d109      	bne.n	8002f5c <__libc_init_array+0x24>
 8002f48:	4e0b      	ldr	r6, [pc, #44]	; (8002f78 <__libc_init_array+0x40>)
 8002f4a:	4c0c      	ldr	r4, [pc, #48]	; (8002f7c <__libc_init_array+0x44>)
 8002f4c:	f000 f818 	bl	8002f80 <_init>
 8002f50:	1ba4      	subs	r4, r4, r6
 8002f52:	10a4      	asrs	r4, r4, #2
 8002f54:	2500      	movs	r5, #0
 8002f56:	42a5      	cmp	r5, r4
 8002f58:	d105      	bne.n	8002f66 <__libc_init_array+0x2e>
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
 8002f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f60:	4798      	blx	r3
 8002f62:	3501      	adds	r5, #1
 8002f64:	e7ee      	b.n	8002f44 <__libc_init_array+0xc>
 8002f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f6a:	4798      	blx	r3
 8002f6c:	3501      	adds	r5, #1
 8002f6e:	e7f2      	b.n	8002f56 <__libc_init_array+0x1e>
 8002f70:	08003004 	.word	0x08003004
 8002f74:	08003004 	.word	0x08003004
 8002f78:	08003004 	.word	0x08003004
 8002f7c:	08003008 	.word	0x08003008

08002f80 <_init>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	bf00      	nop
 8002f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f86:	bc08      	pop	{r3}
 8002f88:	469e      	mov	lr, r3
 8002f8a:	4770      	bx	lr

08002f8c <_fini>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr
